{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"themes/hexo-theme-linear/source/css/common.styl","path":"css/common.styl","modified":1,"renderable":1},{"_id":"themes/hexo-theme-linear/source/css/config.styl","path":"css/config.styl","modified":1,"renderable":1},{"_id":"themes/hexo-theme-linear/source/css/response.styl","path":"css/response.styl","modified":1,"renderable":1},{"_id":"themes/hexo-theme-linear/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/hexo-theme-linear/source/css/fonts/google.styl","path":"css/fonts/google.styl","modified":1,"renderable":1},{"_id":"themes/hexo-theme-linear/source/images/links/about.png","path":"images/links/about.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-linear/source/images/links/blog.png","path":"images/links/blog.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-linear/source/images/links/codepen.png","path":"images/links/codepen.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-linear/source/images/links/dribbble.png","path":"images/links/dribbble.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-linear/source/images/links/email.png","path":"images/links/email.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-linear/source/images/links/feed.png","path":"images/links/feed.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-linear/source/images/links/friends.png","path":"images/links/friends.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-linear/source/images/links/github.png","path":"images/links/github.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-linear/source/images/links/instagram.png","path":"images/links/instagram.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-linear/source/images/links/link.png","path":"images/links/link.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-linear/source/images/links/linkedin.png","path":"images/links/linkedin.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-linear/source/images/links/qq.png","path":"images/links/qq.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-linear/source/images/links/skype.png","path":"images/links/skype.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-linear/source/images/links/twitter.png","path":"images/links/twitter.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-linear/source/images/links/wechat.png","path":"images/links/wechat.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-linear/source/images/links/youtube.png","path":"images/links/youtube.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-linear/source/images/links/yuque.png","path":"images/links/yuque.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-linear/source/images/links/zhihu.png","path":"images/links/zhihu.png","modified":1,"renderable":1}],"Cache":[{"_id":"source/_posts/egg写一个最简单的token登陆验证.md","hash":"38db63719e9b39801fc5e487616f4c47a1d58cd5","modified":1661844208617},{"_id":"source/_posts/vue项目启用压缩gzip.md","hash":"f8879654b17b7352360d0484fc2d7c3904134087","modified":1661845220341},{"_id":"source/_posts/Ant-Design-VUE-Upload组件-OSS上传图片.md","hash":"ff4cb46c443fcb704f6c6226f15db1367adae860","modified":1661844384559},{"_id":"source/_posts/vscode-eslint-规则.md","hash":"b13aa6607fc5c7646f86a482a119cf8ed2b0373e","modified":1661845234726},{"_id":"source/_posts/JS多个异步接口的顺序调用.md","hash":"1f4f106775fd784dfc1177cdc602703400c2c50a","modified":1661844501506},{"_id":"source/_posts/纯前端利用canvas压缩图片上传.md","hash":"04d4189701a5c2b589a89a2d8fba97896798863f","modified":1661845260532},{"_id":"source/_posts/vscode漂亮的代码格式化prettier.md","hash":"3685d1b188f43e9f8385fe9325ec1ece50807982","modified":1661845275184},{"_id":"source/_posts/利用腾讯云cloudbase快速搭建vue项目到发布.md","hash":"10014464f315b1bf714502292b2dfa226ab6c961","modified":1661845173987},{"_id":"source/_posts/egg写一个最简单的mysql查询接口.md","hash":"9ee10829d94dfc8ee0a9313589c72f8dbfb2c9c1","modified":1661843732320},{"_id":"source/_posts/一个比localStorage还要好的本地存储-LocalForage.md","hash":"677c0ff1eda8cc33b01c8efdb0ae467c7bb43244","modified":1661845246027},{"_id":"source/_posts/理解vue3组合式API-Setup（一）.md","hash":"05b8bd47974f85c7c0c2593e111b5aca3f110011","modified":1661845207196},{"_id":"source/_posts/解决vue-keepAlive-二次进入页面显示首次缓存问题.md","hash":"511bff4baf63aa58683f670cd40461c7b02f6bc2","modified":1661845187862},{"_id":"source/_posts/理解vue3组合式API-Setup（二）.md","hash":"9aae00ff1063245b09660be24a7588a6237cd534","modified":1661845199178},{"_id":"themes/hexo-theme-linear/package.json","hash":"6497a8549817f4a97443630ff29ba6e9415209bd","modified":1661842036435},{"_id":"themes/hexo-theme-linear/README.md","hash":"0d0bc7cb6a69de63a9b946b72192cbc4ac97ae74","modified":1661842036431},{"_id":"themes/hexo-theme-linear/languages/default.yml","hash":"6ff8adb2312baf19cbdcd0ff17f6794f16f6062a","modified":1661842036432},{"_id":"themes/hexo-theme-linear/docs/guide.md","hash":"584fd836bbf76dfa762dceae8c6c046c3c39d87d","modified":1661842036431},{"_id":"themes/hexo-theme-linear/docs/log.md","hash":"f4e435fe91521f2ba1a9aa1f7d55e8e3b3b6230b","modified":1661842036431},{"_id":"themes/hexo-theme-linear/LICENSE","hash":"620226eaf7c118fbcd74696cd77f64eb9e7df412","modified":1661842036431},{"_id":"themes/hexo-theme-linear/layout/category.ejs","hash":"7d4eebab7ce33f2c5d6d8c6240cc8fe65ea14cd7","modified":1661842036434},{"_id":"themes/hexo-theme-linear/layout/index.ejs","hash":"7af11efda166e4fc807a4da634239cf3b96cef65","modified":1661842036434},{"_id":"themes/hexo-theme-linear/layout/archive.ejs","hash":"28f652ff227d4e483a69e3b86f4a302e30a559e4","modified":1661842036433},{"_id":"themes/hexo-theme-linear/layout/page.ejs","hash":"2b6f60e0ba6cd82beeabd1451b61ccb195448268","modified":1661842036434},{"_id":"themes/hexo-theme-linear/languages/zh-CN.yml","hash":"840e5c2d41ff14997977cddaa23ac3f6f012d1a8","modified":1661842036432},{"_id":"themes/hexo-theme-linear/_config.yml","hash":"9dfdb84119acc84560d48d8e76635702590752d1","modified":1661846096947},{"_id":"themes/hexo-theme-linear/.DS_Store","hash":"9457f542cf2c3f2a50b9ecd64858fc6f50b0d0c4","modified":1661845742822},{"_id":"themes/hexo-theme-linear/layout/tag.ejs","hash":"28f652ff227d4e483a69e3b86f4a302e30a559e4","modified":1661842036434},{"_id":"themes/hexo-theme-linear/layout/_partial/archive-post.ejs","hash":"ce379abf9001dc6c493a213704d4314a794bbdbd","modified":1661842036432},{"_id":"themes/hexo-theme-linear/layout/_partial/head.ejs","hash":"8283f7460cb7fcfbd0112f9d064c507eb2a25679","modified":1661842036432},{"_id":"themes/hexo-theme-linear/layout/_partial/article.ejs","hash":"0dd7deb69adf079e34e3495a13c172d81736d412","modified":1661842036432},{"_id":"themes/hexo-theme-linear/source/.DS_Store","hash":"06e01f5032ecfcddf3daae5ee9ec555248009300","modified":1661846990792},{"_id":"themes/hexo-theme-linear/layout/_partial/footer.ejs","hash":"f540fcdaf0e88ccb54b8b6b9733b6714bf43f612","modified":1661842036432},{"_id":"themes/hexo-theme-linear/layout/post.ejs","hash":"2b6f60e0ba6cd82beeabd1451b61ccb195448268","modified":1661842036434},{"_id":"themes/hexo-theme-linear/layout/layout.ejs","hash":"690eaf42cc4736b5fd499c6c380b306611ed5ea1","modified":1661842036434},{"_id":"themes/hexo-theme-linear/layout/_partial/waline.ejs","hash":"0ce6f818cc870a64a4584ee5a105f82cb2a424af","modified":1661842036433},{"_id":"themes/hexo-theme-linear/layout/_partial/header.ejs","hash":"0b79bf55e8adf014ff92b784c297242faf46179a","modified":1661842036433},{"_id":"themes/hexo-theme-linear/source/css/config.styl","hash":"d4bed522bbfdd877da5f636212acee77b8ae27e7","modified":1661842036437},{"_id":"themes/hexo-theme-linear/layout/_partial/archive.ejs","hash":"d813e9f103d28ecf5afaf11d0be2800b3997ef3b","modified":1661842036432},{"_id":"themes/hexo-theme-linear/source/css/common.styl","hash":"a31ee642a22fd96dd83c31e7296af368a9aa846a","modified":1661842036436},{"_id":"themes/hexo-theme-linear/source/css/response.styl","hash":"0a15399a79864f5c69b3bbc7d104a87d1de4dbdd","modified":1661842036437},{"_id":"themes/hexo-theme-linear/layout/_partial/post/date.ejs","hash":"6776686e7854f491317e69f3a1d00f3884a986e0","modified":1661842036433},{"_id":"themes/hexo-theme-linear/source/css/style.styl","hash":"6e746d38c09c23246899068ece7a335b0c7dc55d","modified":1661842036437},{"_id":"themes/hexo-theme-linear/layout/_partial/post/tag.ejs","hash":"2585a8d4aae3601e68eabec616723515cf77a46b","modified":1661842036433},{"_id":"themes/hexo-theme-linear/layout/_partial/post/info.ejs","hash":"3cc4450f38f94789d9ef913ecb8da379838e8ddd","modified":1661842036433},{"_id":"themes/hexo-theme-linear/source/css/_partial/archive-post.styl","hash":"2d0065547a6eacc9a47a9c303f656b9062b40a45","modified":1661842036435},{"_id":"themes/hexo-theme-linear/source/css/_partial/archive.styl","hash":"14b73e45d40ee83f9beb1571ffc0340d8a91e710","modified":1661842036436},{"_id":"themes/hexo-theme-linear/source/css/_partial/article.styl","hash":"844e5b4f59e9952675f4d51ba705e44f52f7c1b0","modified":1661842036436},{"_id":"themes/hexo-theme-linear/source/css/_partial/footer.styl","hash":"3f0bc805c0f3f9726fd2eef96d17f501be442488","modified":1661842036436},{"_id":"themes/hexo-theme-linear/source/images/links/about.png","hash":"48eff8470014e345a88a0739ebfb769fa0ae5b6b","modified":1661842036437},{"_id":"themes/hexo-theme-linear/source/images/links/blog.png","hash":"799d8de2adf030008a0292f07557639e293751b0","modified":1661842036437},{"_id":"themes/hexo-theme-linear/source/images/.DS_Store","hash":"675c493afd939b381e509567f83662d5eb28fa45","modified":1661847951956},{"_id":"themes/hexo-theme-linear/source/css/fonts/google.styl","hash":"5563f0367a509828f667005b253a04da0b5a12d3","modified":1661842036437},{"_id":"themes/hexo-theme-linear/source/images/links/dribbble.png","hash":"a308c9a4d4335e59dd0d93fc35fc24121c36d459","modified":1661842036438},{"_id":"themes/hexo-theme-linear/source/images/links/codepen.png","hash":"48aaebe04f3a88388b8e0918f4a099b46d883232","modified":1661842036438},{"_id":"themes/hexo-theme-linear/source/css/_partial/header.styl","hash":"f961cc42f55e51aa528ae5beb0320e5c1f640422","modified":1661842036436},{"_id":"themes/hexo-theme-linear/source/images/links/email.png","hash":"4093db7c6fc97853b36ec0665b8ddb3763489dab","modified":1661842036438},{"_id":"themes/hexo-theme-linear/source/images/links/feed.png","hash":"0a746dab71dca2025f63584dbd222dc5e0707ba8","modified":1661842036438},{"_id":"themes/hexo-theme-linear/source/images/links/github.png","hash":"339087dfb4e615bb8c40f9cca7f202a0396b3717","modified":1661842036438},{"_id":"themes/hexo-theme-linear/source/images/links/instagram.png","hash":"48c1e3df64fa30b74f01bbed6911d7e5962d73ea","modified":1661842036438},{"_id":"themes/hexo-theme-linear/source/images/links/friends.png","hash":"a47fde3aeaf569dd9049d466c93b28ec85685b8f","modified":1661842036438},{"_id":"themes/hexo-theme-linear/source/images/links/skype.png","hash":"d3bd54a698934f91ad1904e50c484cbbf3e4cd95","modified":1661842036439},{"_id":"themes/hexo-theme-linear/source/images/links/linkedin.png","hash":"6ba2cb2b20535ca5bac1df709ad933fd42ccddc0","modified":1661842036439},{"_id":"themes/hexo-theme-linear/source/images/links/qq.png","hash":"8ca9c35d73edec9e81b1fcfd3c80d21ffea54939","modified":1661842036439},{"_id":"themes/hexo-theme-linear/source/images/links/twitter.png","hash":"f9176b8a90656f86b2e1b90a3e084917dee5dd50","modified":1661842036439},{"_id":"themes/hexo-theme-linear/source/images/links/wechat.png","hash":"3a190d43caddf93a96b92832ccb76741ffb5f18b","modified":1661842036439},{"_id":"themes/hexo-theme-linear/source/images/links/link.png","hash":"00104f71810af6dc61a3be0f39c16497fc475a53","modified":1661842036438},{"_id":"themes/hexo-theme-linear/source/images/links/youtube.png","hash":"9f2f5c958674e4491948af8b0513b47167c06e03","modified":1661842036439},{"_id":"themes/hexo-theme-linear/source/images/links/yuque.png","hash":"75e716ddefd77babd13854fba8ffd6f8bfff388c","modified":1661842036439},{"_id":"themes/hexo-theme-linear/source/images/links/zhihu.png","hash":"d2a1d957625923884da96be87fca92795bfc92b9","modified":1661842036439},{"_id":"public/2021/07/26/解决vue-keepAlive-二次进入页面显示首次缓存问题/index.html","hash":"8cc009e110b36e6d078d79851664fd033b8e19ac","modified":1661856309839},{"_id":"public/2021/06/25/理解vue3组合式API-Setup（一）/index.html","hash":"c5223321429b5744570e1fb2e0af1550d4f93bb4","modified":1661856309839},{"_id":"public/2021/07/05/理解vue3组合式API-Setup（二）/index.html","hash":"a1c6306db4b8017c106f9b71022661c4e53efc74","modified":1661856309839},{"_id":"public/2021/02/26/JS多个异步接口的顺序调用/index.html","hash":"d7e7e0b3e8333208610bbd38381622f9635febb9","modified":1661856309839},{"_id":"public/2021/02/25/一个比localStorage还要好的本地存储-LocalForage/index.html","hash":"0e278ae6a837e1ff912aa10c1ad7622d99be7239","modified":1661856309839},{"_id":"public/archives/index.html","hash":"b28ec5fd9410e22ea636c60aeef8cc436a29ef02","modified":1661856309839},{"_id":"public/2021/04/06/vue项目启用压缩gzip/index.html","hash":"4947f5b355715382363688067d5908c44dd4aff7","modified":1661856309839},{"_id":"public/archives/page/2/index.html","hash":"58fdc8a8e4bd32065ef506dc3626912b12745054","modified":1661856309839},{"_id":"public/2021/04/25/vscode漂亮的代码格式化prettier/index.html","hash":"965b28a05ed37eae546968c52c1be40c65b9e5fd","modified":1661856309839},{"_id":"public/archives/2021/page/2/index.html","hash":"5f197b24911c1aa23b7e8c296b71c412e152007e","modified":1661856309839},{"_id":"public/archives/2021/02/index.html","hash":"59f5d24bc98ca4e320b6a1b5cb97ff1d8fa8b9bf","modified":1661856309839},{"_id":"public/archives/2021/index.html","hash":"b08b2f635d5c57c46226a9bfffb41ddfaa0cbb5c","modified":1661856309839},{"_id":"public/archives/2021/03/index.html","hash":"ad9f305ada80bbbe12814860dc7d7fe58ffe1291","modified":1661856309839},{"_id":"public/archives/2021/04/index.html","hash":"a2d1b3b6d6f1370c4790158576db1a02260d7ab2","modified":1661856309839},{"_id":"public/archives/2021/06/index.html","hash":"819188271b8ff46204ec5342da55808492c0d62b","modified":1661856309839},{"_id":"public/2022/01/28/利用腾讯云cloudbase快速搭建vue项目到发布/index.html","hash":"dab07abd5ca0fadccb75048343b3874dca704ec7","modified":1661856309839},{"_id":"public/2021/03/12/Ant-Design-VUE-Upload组件-OSS上传图片/index.html","hash":"762ea906a1ce457d863b1f39eb14a8126e622360","modified":1661856309839},{"_id":"public/2021/02/25/egg写一个最简单的token登陆验证/index.html","hash":"733fb0fd0c67be76232b5c4c02575dafa76a1dce","modified":1661856309839},{"_id":"public/2021/02/25/vscode-eslint-规则/index.html","hash":"fc24957dc6cb9cd4ba516d11e70aabefec39db3d","modified":1661856309839},{"_id":"public/2021/02/25/纯前端利用canvas压缩图片上传/index.html","hash":"266d632d02fccc77fdf693c656556896cb0d6049","modified":1661856309839},{"_id":"public/2021/02/25/egg写一个最简单的mysql查询接口/index.html","hash":"9b0a5fe065d6344a423d8cc860a05c7ebf2e7fca","modified":1661856309839},{"_id":"public/archives/2021/07/index.html","hash":"506cf42d1457898af3e7b235bf98719db8066986","modified":1661856309839},{"_id":"public/archives/2022/01/index.html","hash":"1be2d3db06f091278362ab531c59c82e18952e13","modified":1661856309839},{"_id":"public/archives/2022/index.html","hash":"685101d9a1ef4468a362f90e23d066a341d4c427","modified":1661856309839},{"_id":"public/page/2/index.html","hash":"3b5098d3267c9c78a3cc6333bf20af2925aa145f","modified":1661856309839},{"_id":"public/index.html","hash":"a31b909fff76aef1647a19233694a8a8de7713d0","modified":1661856309839},{"_id":"public/images/links/blog.png","hash":"799d8de2adf030008a0292f07557639e293751b0","modified":1661856309839},{"_id":"public/images/links/about.png","hash":"48eff8470014e345a88a0739ebfb769fa0ae5b6b","modified":1661856309839},{"_id":"public/images/links/dribbble.png","hash":"a308c9a4d4335e59dd0d93fc35fc24121c36d459","modified":1661856309839},{"_id":"public/images/links/friends.png","hash":"a47fde3aeaf569dd9049d466c93b28ec85685b8f","modified":1661856309839},{"_id":"public/images/links/feed.png","hash":"0a746dab71dca2025f63584dbd222dc5e0707ba8","modified":1661856309839},{"_id":"public/images/links/email.png","hash":"4093db7c6fc97853b36ec0665b8ddb3763489dab","modified":1661856309839},{"_id":"public/images/links/github.png","hash":"339087dfb4e615bb8c40f9cca7f202a0396b3717","modified":1661856309839},{"_id":"public/images/links/codepen.png","hash":"48aaebe04f3a88388b8e0918f4a099b46d883232","modified":1661856309839},{"_id":"public/images/links/link.png","hash":"00104f71810af6dc61a3be0f39c16497fc475a53","modified":1661856309839},{"_id":"public/images/links/linkedin.png","hash":"6ba2cb2b20535ca5bac1df709ad933fd42ccddc0","modified":1661856309839},{"_id":"public/images/links/twitter.png","hash":"f9176b8a90656f86b2e1b90a3e084917dee5dd50","modified":1661856309839},{"_id":"public/images/links/wechat.png","hash":"3a190d43caddf93a96b92832ccb76741ffb5f18b","modified":1661856309839},{"_id":"public/images/links/youtube.png","hash":"9f2f5c958674e4491948af8b0513b47167c06e03","modified":1661856309839},{"_id":"public/images/links/yuque.png","hash":"75e716ddefd77babd13854fba8ffd6f8bfff388c","modified":1661856309839},{"_id":"public/images/links/instagram.png","hash":"48c1e3df64fa30b74f01bbed6911d7e5962d73ea","modified":1661856309839},{"_id":"public/images/links/skype.png","hash":"d3bd54a698934f91ad1904e50c484cbbf3e4cd95","modified":1661856309839},{"_id":"public/images/links/qq.png","hash":"8ca9c35d73edec9e81b1fcfd3c80d21ffea54939","modified":1661856309839},{"_id":"public/images/links/zhihu.png","hash":"d2a1d957625923884da96be87fca92795bfc92b9","modified":1661856309839},{"_id":"public/css/config.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1661856309839},{"_id":"public/css/common.css","hash":"0d4cab7860995c61569757d86cf029ce94cebb2b","modified":1661856309839},{"_id":"public/css/response.css","hash":"c956d0643ae46918623efc85760d70dc9ed94f8c","modified":1661856309839},{"_id":"public/css/fonts/google.css","hash":"399d13a882b2fe7e82a7c33b0d2d4165e1dddf6f","modified":1661856309839},{"_id":"public/css/style.css","hash":"09445039d35797ab35383e65d7de6927c37ea937","modified":1661856309839}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"Ant Design VUE Upload组件 OSS上传图片","date":"2021-03-12T12:52:00.000Z","_content":"\n\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/1585566760218-eb503e89-dfbc-4fc9-a81c-97bb01aac7be.png)\n之前写图片上传都是通过自定义方法将file和OSS信息组装到formData里面然后设置请求头'Content-Type': 'multipart/form-data'来上传的，现在直接用自带的action上传还是挺方便的。\n\n\n```js\n<template>\n\t<a-upload\n    :action=\"urlhost\"\n    listType=\"picture-card\"\n    accept=\"image/*\"\n    @preview=\"handlePreview\"\n    @change=\"handleChange\"\n    :remove=\"removeImg\"\n    :beforeUpload=\"beforeUpload\"\n    :data=\"paramsData\">\n    <a-icon type=\"plus\" />\n      <div class=\"ant-upload-text\">点击上传</div>\n </a-upload>\n   <a-modal :visible=\"previewVisible\" :footer=\"null\" @cancel=\"handleCancel\">\n      <img alt=\"example\" style=\"width: 100%\" :src=\"previewImage\" />\n   </a-modal>\n</template>\n\n\n<script>\n  function getBase64(file) {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.readAsDataURL(file);\n      reader.onload = () => resolve(reader.result);\n      reader.onerror = error => reject(error);\n    });\n  }\n  import {getOssSignWeb} from '../../../api/upload.js'; //获取后端OSS信息接口\n  export default {\n  \treturn {\n    \tbusinessId:'',//业务id\n    \tpreviewVisible:false,\n      previewImage: '',\n    \tparamsData:{ //OSS信息对象 也是用来需要上传的参数\n          'OSSAccessKeyId':'',\n          'policy':'',\n          'Signature':'',\n          'key':'',\n          'success_action_status':200\n        },\n    \turlhost:'', //上传路径\n  \t},\n    methods: {\n    \tasync handlePreview(file) { //点击图片预览\n        if (!file.url && !file.preview) {\n          file.preview = await getBase64(file.originFileObj);\n        }\n        this.previewImage = file.url || file.preview;\n        this.previewVisible = true;\n      },\n      beforeUpload(file, fileList){ //在上传前获取OSS信息\n        return new Promise((resolve,reject)=>{\n          let params ={\n            \"businessId\":this.businessId,\n            \"suffix\":'.jpg'\n          }\n          getOssSignWeb(params).then(res=>{\n            \tthis.urlhost = res.retData.host\n              this.paramsData = { //组装参数\n                'OSSAccessKeyId':res.retData.accessid,\n                'policy':res.retData.policy,\n                'Signature':res.retData.signature,\n                'key':res.retData.dir+res.retData.fileName,\n                'success_action_status':200\n              }\n              resolve(file)\n            }).catch(e=>{\n              reject()\n            })\n        })\n      },\n      removeImg(){\n        return new Promise((resolve,reject)=>{\n          this.$confirm({\n            title: '提示',\n            content: '是否删除这张图片',\n            okText: '确定',\n            okType: 'danger',\n            cancelText: '取消',\n            onOk() {\n              resolve(true)\n            },\n            onCancel() {\n              resolve(false)\n            },\n          })\n        })\n      },\n      handleChange(info) {\n        if (info.file.status === 'done') {\n          this.$message.success('上传成功！');\n        }\n        if (info.file.status === 'error') {\n          this.$message.error('上传失败！');\n        }\n      },\n      handleCancel() {\n        this.previewVisible = false;\n      },\n    }\n  }\n</script>\n```\n\n\n","source":"_posts/Ant-Design-VUE-Upload组件-OSS上传图片.md","raw":"---\ntitle: Ant Design VUE Upload组件 OSS上传图片\ndate: 2021-03-12 20:52\ntags:\n---\n\n\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/1585566760218-eb503e89-dfbc-4fc9-a81c-97bb01aac7be.png)\n之前写图片上传都是通过自定义方法将file和OSS信息组装到formData里面然后设置请求头'Content-Type': 'multipart/form-data'来上传的，现在直接用自带的action上传还是挺方便的。\n\n\n```js\n<template>\n\t<a-upload\n    :action=\"urlhost\"\n    listType=\"picture-card\"\n    accept=\"image/*\"\n    @preview=\"handlePreview\"\n    @change=\"handleChange\"\n    :remove=\"removeImg\"\n    :beforeUpload=\"beforeUpload\"\n    :data=\"paramsData\">\n    <a-icon type=\"plus\" />\n      <div class=\"ant-upload-text\">点击上传</div>\n </a-upload>\n   <a-modal :visible=\"previewVisible\" :footer=\"null\" @cancel=\"handleCancel\">\n      <img alt=\"example\" style=\"width: 100%\" :src=\"previewImage\" />\n   </a-modal>\n</template>\n\n\n<script>\n  function getBase64(file) {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.readAsDataURL(file);\n      reader.onload = () => resolve(reader.result);\n      reader.onerror = error => reject(error);\n    });\n  }\n  import {getOssSignWeb} from '../../../api/upload.js'; //获取后端OSS信息接口\n  export default {\n  \treturn {\n    \tbusinessId:'',//业务id\n    \tpreviewVisible:false,\n      previewImage: '',\n    \tparamsData:{ //OSS信息对象 也是用来需要上传的参数\n          'OSSAccessKeyId':'',\n          'policy':'',\n          'Signature':'',\n          'key':'',\n          'success_action_status':200\n        },\n    \turlhost:'', //上传路径\n  \t},\n    methods: {\n    \tasync handlePreview(file) { //点击图片预览\n        if (!file.url && !file.preview) {\n          file.preview = await getBase64(file.originFileObj);\n        }\n        this.previewImage = file.url || file.preview;\n        this.previewVisible = true;\n      },\n      beforeUpload(file, fileList){ //在上传前获取OSS信息\n        return new Promise((resolve,reject)=>{\n          let params ={\n            \"businessId\":this.businessId,\n            \"suffix\":'.jpg'\n          }\n          getOssSignWeb(params).then(res=>{\n            \tthis.urlhost = res.retData.host\n              this.paramsData = { //组装参数\n                'OSSAccessKeyId':res.retData.accessid,\n                'policy':res.retData.policy,\n                'Signature':res.retData.signature,\n                'key':res.retData.dir+res.retData.fileName,\n                'success_action_status':200\n              }\n              resolve(file)\n            }).catch(e=>{\n              reject()\n            })\n        })\n      },\n      removeImg(){\n        return new Promise((resolve,reject)=>{\n          this.$confirm({\n            title: '提示',\n            content: '是否删除这张图片',\n            okText: '确定',\n            okType: 'danger',\n            cancelText: '取消',\n            onOk() {\n              resolve(true)\n            },\n            onCancel() {\n              resolve(false)\n            },\n          })\n        })\n      },\n      handleChange(info) {\n        if (info.file.status === 'done') {\n          this.$message.success('上传成功！');\n        }\n        if (info.file.status === 'error') {\n          this.$message.error('上传失败！');\n        }\n      },\n      handleCancel() {\n        this.previewVisible = false;\n      },\n    }\n  }\n</script>\n```\n\n\n","slug":"Ant-Design-VUE-Upload组件-OSS上传图片","published":1,"updated":"2022-08-30T07:26:24.559Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7g2c7fv00007qu5dftl10gc","content":"<p><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/1585566760218-eb503e89-dfbc-4fc9-a81c-97bb01aac7be.png\" alt=\"image.png\"><br>之前写图片上传都是通过自定义方法将file和OSS信息组装到formData里面然后设置请求头’Content-Type’: ‘multipart&#x2F;form-data’来上传的，现在直接用自带的action上传还是挺方便的。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">\t<span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">a-upload</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">    <span class=\"attr\">:action</span>=<span class=\"string\">&quot;urlhost&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">    <span class=\"attr\">listType</span>=<span class=\"string\">&quot;picture-card&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">    <span class=\"attr\">accept</span>=<span class=\"string\">&quot;image/*&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">    @<span class=\"attr\">preview</span>=<span class=\"string\">&quot;handlePreview&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">    @<span class=\"attr\">change</span>=<span class=\"string\">&quot;handleChange&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">    <span class=\"attr\">:remove</span>=<span class=\"string\">&quot;removeImg&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">    <span class=\"attr\">:beforeUpload</span>=<span class=\"string\">&quot;beforeUpload&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">    <span class=\"attr\">:data</span>=<span class=\"string\">&quot;paramsData&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;<span class=\"name\">a-icon</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;plus&quot;</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;ant-upload-text&quot;</span>&gt;</span>点击上传<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"> <span class=\"tag\">&lt;/<span class=\"name\">a-upload</span>&gt;</span></span></span><br><span class=\"line\">   <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">a-modal</span> <span class=\"attr\">:visible</span>=<span class=\"string\">&quot;previewVisible&quot;</span> <span class=\"attr\">:footer</span>=<span class=\"string\">&quot;null&quot;</span> @<span class=\"attr\">cancel</span>=<span class=\"string\">&quot;handleCancel&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">alt</span>=<span class=\"string\">&quot;example&quot;</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;width: 100%&quot;</span> <span class=\"attr\">:src</span>=<span class=\"string\">&quot;previewImage&quot;</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">   <span class=\"tag\">&lt;/<span class=\"name\">a-modal</span>&gt;</span></span></span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">  <span class=\"keyword\">function</span> <span class=\"title function_\">getBase64</span>(<span class=\"params\">file</span>) &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      <span class=\"keyword\">const</span> reader = <span class=\"keyword\">new</span> <span class=\"title class_\">FileReader</span>();</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      reader.<span class=\"title function_\">readAsDataURL</span>(file);</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      reader.<span class=\"property\">onload</span> = <span class=\"function\">() =&gt;</span> <span class=\"title function_\">resolve</span>(reader.<span class=\"property\">result</span>);</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      reader.<span class=\"property\">onerror</span> = <span class=\"function\"><span class=\"params\">error</span> =&gt;</span> <span class=\"title function_\">reject</span>(error);</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    &#125;);</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">  &#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">  <span class=\"keyword\">import</span> &#123;getOssSignWeb&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../../../api/upload.js&#x27;</span>; <span class=\"comment\">//获取后端OSS信息接口</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">  <span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">  \t<span class=\"keyword\">return</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    \t<span class=\"attr\">businessId</span>:<span class=\"string\">&#x27;&#x27;</span>,<span class=\"comment\">//业务id</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    \t<span class=\"attr\">previewVisible</span>:<span class=\"literal\">false</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      <span class=\"attr\">previewImage</span>: <span class=\"string\">&#x27;&#x27;</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    \t<span class=\"attr\">paramsData</span>:&#123; <span class=\"comment\">//OSS信息对象 也是用来需要上传的参数</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">          <span class=\"string\">&#x27;OSSAccessKeyId&#x27;</span>:<span class=\"string\">&#x27;&#x27;</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">          <span class=\"string\">&#x27;policy&#x27;</span>:<span class=\"string\">&#x27;&#x27;</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">          <span class=\"string\">&#x27;Signature&#x27;</span>:<span class=\"string\">&#x27;&#x27;</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">          <span class=\"string\">&#x27;key&#x27;</span>:<span class=\"string\">&#x27;&#x27;</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">          <span class=\"string\">&#x27;success_action_status&#x27;</span>:<span class=\"number\">200</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        &#125;,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    \t<span class=\"attr\">urlhost</span>:<span class=\"string\">&#x27;&#x27;</span>, <span class=\"comment\">//上传路径</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">  \t&#125;,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"attr\">methods</span>: &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    \t<span class=\"keyword\">async</span> <span class=\"title function_\">handlePreview</span>(<span class=\"params\">file</span>) &#123; <span class=\"comment\">//点击图片预览</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"keyword\">if</span> (!file.<span class=\"property\">url</span> &amp;&amp; !file.<span class=\"property\">preview</span>) &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">          file.<span class=\"property\">preview</span> = <span class=\"keyword\">await</span> <span class=\"title function_\">getBase64</span>(file.<span class=\"property\">originFileObj</span>);</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        &#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"variable language_\">this</span>.<span class=\"property\">previewImage</span> = file.<span class=\"property\">url</span> || file.<span class=\"property\">preview</span>;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"variable language_\">this</span>.<span class=\"property\">previewVisible</span> = <span class=\"literal\">true</span>;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      &#125;,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      <span class=\"title function_\">beforeUpload</span>(<span class=\"params\">file, fileList</span>)&#123; <span class=\"comment\">//在上传前获取OSS信息</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve,reject</span>)=&gt;</span>&#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">          <span class=\"keyword\">let</span> params =&#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"string\">&quot;businessId&quot;</span>:<span class=\"variable language_\">this</span>.<span class=\"property\">businessId</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"string\">&quot;suffix&quot;</span>:<span class=\"string\">&#x27;.jpg&#x27;</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">          &#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">          <span class=\"title function_\">getOssSignWeb</span>(params).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">res</span>=&gt;</span>&#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">            \t<span class=\"variable language_\">this</span>.<span class=\"property\">urlhost</span> = res.<span class=\"property\">retData</span>.<span class=\"property\">host</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">              <span class=\"variable language_\">this</span>.<span class=\"property\">paramsData</span> = &#123; <span class=\"comment\">//组装参数</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                <span class=\"string\">&#x27;OSSAccessKeyId&#x27;</span>:res.<span class=\"property\">retData</span>.<span class=\"property\">accessid</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                <span class=\"string\">&#x27;policy&#x27;</span>:res.<span class=\"property\">retData</span>.<span class=\"property\">policy</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                <span class=\"string\">&#x27;Signature&#x27;</span>:res.<span class=\"property\">retData</span>.<span class=\"property\">signature</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                <span class=\"string\">&#x27;key&#x27;</span>:res.<span class=\"property\">retData</span>.<span class=\"property\">dir</span>+res.<span class=\"property\">retData</span>.<span class=\"property\">fileName</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                <span class=\"string\">&#x27;success_action_status&#x27;</span>:<span class=\"number\">200</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">              &#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">              <span class=\"title function_\">resolve</span>(file)</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">            &#125;).<span class=\"title function_\">catch</span>(<span class=\"function\"><span class=\"params\">e</span>=&gt;</span>&#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">              <span class=\"title function_\">reject</span>()</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">            &#125;)</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        &#125;)</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      &#125;,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      <span class=\"title function_\">removeImg</span>(<span class=\"params\"></span>)&#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve,reject</span>)=&gt;</span>&#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">          <span class=\"variable language_\">this</span>.$confirm(&#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"attr\">title</span>: <span class=\"string\">&#x27;提示&#x27;</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"attr\">content</span>: <span class=\"string\">&#x27;是否删除这张图片&#x27;</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"attr\">okText</span>: <span class=\"string\">&#x27;确定&#x27;</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"attr\">okType</span>: <span class=\"string\">&#x27;danger&#x27;</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"attr\">cancelText</span>: <span class=\"string\">&#x27;取消&#x27;</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"title function_\">onOk</span>(<span class=\"params\"></span>) &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">              <span class=\"title function_\">resolve</span>(<span class=\"literal\">true</span>)</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">            &#125;,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"title function_\">onCancel</span>(<span class=\"params\"></span>) &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">              <span class=\"title function_\">resolve</span>(<span class=\"literal\">false</span>)</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">            &#125;,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">          &#125;)</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        &#125;)</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      &#125;,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      <span class=\"title function_\">handleChange</span>(<span class=\"params\">info</span>) &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"keyword\">if</span> (info.<span class=\"property\">file</span>.<span class=\"property\">status</span> === <span class=\"string\">&#x27;done&#x27;</span>) &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">          <span class=\"variable language_\">this</span>.<span class=\"property\">$message</span>.<span class=\"title function_\">success</span>(<span class=\"string\">&#x27;上传成功！&#x27;</span>);</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        &#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"keyword\">if</span> (info.<span class=\"property\">file</span>.<span class=\"property\">status</span> === <span class=\"string\">&#x27;error&#x27;</span>) &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">          <span class=\"variable language_\">this</span>.<span class=\"property\">$message</span>.<span class=\"title function_\">error</span>(<span class=\"string\">&#x27;上传失败！&#x27;</span>);</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        &#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      &#125;,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      <span class=\"title function_\">handleCancel</span>(<span class=\"params\"></span>) &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"variable language_\">this</span>.<span class=\"property\">previewVisible</span> = <span class=\"literal\">false</span>;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      &#125;,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    &#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">  &#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/1585566760218-eb503e89-dfbc-4fc9-a81c-97bb01aac7be.png\" alt=\"image.png\"><br>之前写图片上传都是通过自定义方法将file和OSS信息组装到formData里面然后设置请求头’Content-Type’: ‘multipart&#x2F;form-data’来上传的，现在直接用自带的action上传还是挺方便的。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">\t<span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">a-upload</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">    <span class=\"attr\">:action</span>=<span class=\"string\">&quot;urlhost&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">    <span class=\"attr\">listType</span>=<span class=\"string\">&quot;picture-card&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">    <span class=\"attr\">accept</span>=<span class=\"string\">&quot;image/*&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">    @<span class=\"attr\">preview</span>=<span class=\"string\">&quot;handlePreview&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">    @<span class=\"attr\">change</span>=<span class=\"string\">&quot;handleChange&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">    <span class=\"attr\">:remove</span>=<span class=\"string\">&quot;removeImg&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">    <span class=\"attr\">:beforeUpload</span>=<span class=\"string\">&quot;beforeUpload&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">    <span class=\"attr\">:data</span>=<span class=\"string\">&quot;paramsData&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;<span class=\"name\">a-icon</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;plus&quot;</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;ant-upload-text&quot;</span>&gt;</span>点击上传<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"> <span class=\"tag\">&lt;/<span class=\"name\">a-upload</span>&gt;</span></span></span><br><span class=\"line\">   <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">a-modal</span> <span class=\"attr\">:visible</span>=<span class=\"string\">&quot;previewVisible&quot;</span> <span class=\"attr\">:footer</span>=<span class=\"string\">&quot;null&quot;</span> @<span class=\"attr\">cancel</span>=<span class=\"string\">&quot;handleCancel&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">alt</span>=<span class=\"string\">&quot;example&quot;</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;width: 100%&quot;</span> <span class=\"attr\">:src</span>=<span class=\"string\">&quot;previewImage&quot;</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">   <span class=\"tag\">&lt;/<span class=\"name\">a-modal</span>&gt;</span></span></span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">  <span class=\"keyword\">function</span> <span class=\"title function_\">getBase64</span>(<span class=\"params\">file</span>) &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      <span class=\"keyword\">const</span> reader = <span class=\"keyword\">new</span> <span class=\"title class_\">FileReader</span>();</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      reader.<span class=\"title function_\">readAsDataURL</span>(file);</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      reader.<span class=\"property\">onload</span> = <span class=\"function\">() =&gt;</span> <span class=\"title function_\">resolve</span>(reader.<span class=\"property\">result</span>);</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      reader.<span class=\"property\">onerror</span> = <span class=\"function\"><span class=\"params\">error</span> =&gt;</span> <span class=\"title function_\">reject</span>(error);</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    &#125;);</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">  &#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">  <span class=\"keyword\">import</span> &#123;getOssSignWeb&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../../../api/upload.js&#x27;</span>; <span class=\"comment\">//获取后端OSS信息接口</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">  <span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">  \t<span class=\"keyword\">return</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    \t<span class=\"attr\">businessId</span>:<span class=\"string\">&#x27;&#x27;</span>,<span class=\"comment\">//业务id</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    \t<span class=\"attr\">previewVisible</span>:<span class=\"literal\">false</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      <span class=\"attr\">previewImage</span>: <span class=\"string\">&#x27;&#x27;</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    \t<span class=\"attr\">paramsData</span>:&#123; <span class=\"comment\">//OSS信息对象 也是用来需要上传的参数</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">          <span class=\"string\">&#x27;OSSAccessKeyId&#x27;</span>:<span class=\"string\">&#x27;&#x27;</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">          <span class=\"string\">&#x27;policy&#x27;</span>:<span class=\"string\">&#x27;&#x27;</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">          <span class=\"string\">&#x27;Signature&#x27;</span>:<span class=\"string\">&#x27;&#x27;</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">          <span class=\"string\">&#x27;key&#x27;</span>:<span class=\"string\">&#x27;&#x27;</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">          <span class=\"string\">&#x27;success_action_status&#x27;</span>:<span class=\"number\">200</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        &#125;,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    \t<span class=\"attr\">urlhost</span>:<span class=\"string\">&#x27;&#x27;</span>, <span class=\"comment\">//上传路径</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">  \t&#125;,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"attr\">methods</span>: &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    \t<span class=\"keyword\">async</span> <span class=\"title function_\">handlePreview</span>(<span class=\"params\">file</span>) &#123; <span class=\"comment\">//点击图片预览</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"keyword\">if</span> (!file.<span class=\"property\">url</span> &amp;&amp; !file.<span class=\"property\">preview</span>) &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">          file.<span class=\"property\">preview</span> = <span class=\"keyword\">await</span> <span class=\"title function_\">getBase64</span>(file.<span class=\"property\">originFileObj</span>);</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        &#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"variable language_\">this</span>.<span class=\"property\">previewImage</span> = file.<span class=\"property\">url</span> || file.<span class=\"property\">preview</span>;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"variable language_\">this</span>.<span class=\"property\">previewVisible</span> = <span class=\"literal\">true</span>;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      &#125;,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      <span class=\"title function_\">beforeUpload</span>(<span class=\"params\">file, fileList</span>)&#123; <span class=\"comment\">//在上传前获取OSS信息</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve,reject</span>)=&gt;</span>&#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">          <span class=\"keyword\">let</span> params =&#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"string\">&quot;businessId&quot;</span>:<span class=\"variable language_\">this</span>.<span class=\"property\">businessId</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"string\">&quot;suffix&quot;</span>:<span class=\"string\">&#x27;.jpg&#x27;</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">          &#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">          <span class=\"title function_\">getOssSignWeb</span>(params).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">res</span>=&gt;</span>&#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">            \t<span class=\"variable language_\">this</span>.<span class=\"property\">urlhost</span> = res.<span class=\"property\">retData</span>.<span class=\"property\">host</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">              <span class=\"variable language_\">this</span>.<span class=\"property\">paramsData</span> = &#123; <span class=\"comment\">//组装参数</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                <span class=\"string\">&#x27;OSSAccessKeyId&#x27;</span>:res.<span class=\"property\">retData</span>.<span class=\"property\">accessid</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                <span class=\"string\">&#x27;policy&#x27;</span>:res.<span class=\"property\">retData</span>.<span class=\"property\">policy</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                <span class=\"string\">&#x27;Signature&#x27;</span>:res.<span class=\"property\">retData</span>.<span class=\"property\">signature</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                <span class=\"string\">&#x27;key&#x27;</span>:res.<span class=\"property\">retData</span>.<span class=\"property\">dir</span>+res.<span class=\"property\">retData</span>.<span class=\"property\">fileName</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                <span class=\"string\">&#x27;success_action_status&#x27;</span>:<span class=\"number\">200</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">              &#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">              <span class=\"title function_\">resolve</span>(file)</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">            &#125;).<span class=\"title function_\">catch</span>(<span class=\"function\"><span class=\"params\">e</span>=&gt;</span>&#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">              <span class=\"title function_\">reject</span>()</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">            &#125;)</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        &#125;)</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      &#125;,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      <span class=\"title function_\">removeImg</span>(<span class=\"params\"></span>)&#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve,reject</span>)=&gt;</span>&#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">          <span class=\"variable language_\">this</span>.$confirm(&#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"attr\">title</span>: <span class=\"string\">&#x27;提示&#x27;</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"attr\">content</span>: <span class=\"string\">&#x27;是否删除这张图片&#x27;</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"attr\">okText</span>: <span class=\"string\">&#x27;确定&#x27;</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"attr\">okType</span>: <span class=\"string\">&#x27;danger&#x27;</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"attr\">cancelText</span>: <span class=\"string\">&#x27;取消&#x27;</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"title function_\">onOk</span>(<span class=\"params\"></span>) &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">              <span class=\"title function_\">resolve</span>(<span class=\"literal\">true</span>)</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">            &#125;,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"title function_\">onCancel</span>(<span class=\"params\"></span>) &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">              <span class=\"title function_\">resolve</span>(<span class=\"literal\">false</span>)</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">            &#125;,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">          &#125;)</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        &#125;)</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      &#125;,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      <span class=\"title function_\">handleChange</span>(<span class=\"params\">info</span>) &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"keyword\">if</span> (info.<span class=\"property\">file</span>.<span class=\"property\">status</span> === <span class=\"string\">&#x27;done&#x27;</span>) &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">          <span class=\"variable language_\">this</span>.<span class=\"property\">$message</span>.<span class=\"title function_\">success</span>(<span class=\"string\">&#x27;上传成功！&#x27;</span>);</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        &#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"keyword\">if</span> (info.<span class=\"property\">file</span>.<span class=\"property\">status</span> === <span class=\"string\">&#x27;error&#x27;</span>) &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">          <span class=\"variable language_\">this</span>.<span class=\"property\">$message</span>.<span class=\"title function_\">error</span>(<span class=\"string\">&#x27;上传失败！&#x27;</span>);</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        &#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      &#125;,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      <span class=\"title function_\">handleCancel</span>(<span class=\"params\"></span>) &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"variable language_\">this</span>.<span class=\"property\">previewVisible</span> = <span class=\"literal\">false</span>;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      &#125;,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    &#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">  &#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n\n"},{"title":"写一个最简单的mysql查询接口","date":"2021-02-25T09:17:00.000Z","_content":"\n# egg 写一个最简单的mysql查询接口\n\n按照[egg官网](https://eggjs.org/zh-cn/intro/quickstart.html) 写一个最简单的mysql查询接口(提前准备好mysql数据库)\n1、创建项目 安装依赖\n```bash\nmkdir my-study-backend\ncd my-study-backend\nnpm init\nnpm i egg --save\nnpm i egg-bin --save-dev\nnpm i --save egg-mysql\n```\n修改启动项\n```json\n\"scripts\": {\n    \"dev\": \"egg-bin dev\"\n  },\n```\n2、在app目录下新建app/controller/users.js\n```javascript\nconst Controller = require('egg').Controller;\n\nclass UsersController extends Controller {\n  async getUsers() {\n    const { ctx } = this;\n    ctx.body = 'hello world'\n  }\n}\n\nmodule.exports = UsersController;\n```\n3、在app目录下新建app/router.js\n```javascript\nmodule.exports = app => {\n  const { router, controller } = app;\n  router.get('/api/getUsers', controller.users.getUsers); // get('接口路径',controller内对应的方法)\n};\n```\n4、在根目录下新建config/config.default.js\n```javascript\n\nmodule.exports = {\n  keys: '123456790', // 随便写个Cookie 安全字符串\n};\n```\n终端运行项目\n```bash\nnpm run dev\n```\n此时打开浏览器访问接口就会显示hello world\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/1595334065360-6ee5820a-036b-4c33-b1f2-e51b30eb9acf.png)\n5、在config目录下新建config/plugin.js 添加mysql配置\n```javascript\nmodule.exports = {\n  mysql: {\n    enable: true,\n    package: 'egg-mysql',\n  },\n};\n```\n6、修改config/config.default.js 添加数据库账号密码\n```javascript\nmodule.exports = {\n  keys: '123456790',\n  mysql: {\n    // 单数据库信息配置\n    client: {\n      // host\n      host: '39.120.202.168',\n      // 端口号\n      port: '3306',\n      // 用户名\n      user: 'root',\n      // 密码\n      password: '123456',\n      // 数据库名\n      database: 'mystudy',\n    },\n    // 是否加载到 app 上，默认开启\n    app: true,\n    // 是否加载到 agent 上，默认关闭\n    agent: false,\n  }\n};\n```\n并在数据库mystudy内添加一些数据\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/1595334905486-4cdcf583-8243-4eb3-bc2c-430631ea291a.png)\n7、在app目录下新建app/service/users.js\n```javascript\nconst Service = require('egg').Service;\n\nclass UsersService extends Service {\n  async getData() {\n    const data = await this.app.mysql.query('SELECT * FROM user');\n    return { data };\n  }\n}\n\nmodule.exports = UsersService;\n```\n8、修改app/controller/users.js\n```javascript\nconst Controller = require('egg').Controller;\n\nclass UsersController extends Controller {\n  async getUsers() {\n    const { ctx } = this;\n    const res = await ctx.service.users.getData();\n    ctx.body = {\n      code: '200',\n      data: res.data,\n      message: 'success'\n    };\n  }\n}\n\nmodule.exports = UsersController;\n```\n此时重新运行项目\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/1595335194788-4c1e4d12-41b2-463b-bb36-03ecb8fa8230.png)\n成功获取到数据啦！\n\n\n\n\n","source":"_posts/egg写一个最简单的mysql查询接口.md","raw":"---\ntitle: 写一个最简单的mysql查询接口\ndate: 2021-02-25 17:17\ntags:\n---\n\n# egg 写一个最简单的mysql查询接口\n\n按照[egg官网](https://eggjs.org/zh-cn/intro/quickstart.html) 写一个最简单的mysql查询接口(提前准备好mysql数据库)\n1、创建项目 安装依赖\n```bash\nmkdir my-study-backend\ncd my-study-backend\nnpm init\nnpm i egg --save\nnpm i egg-bin --save-dev\nnpm i --save egg-mysql\n```\n修改启动项\n```json\n\"scripts\": {\n    \"dev\": \"egg-bin dev\"\n  },\n```\n2、在app目录下新建app/controller/users.js\n```javascript\nconst Controller = require('egg').Controller;\n\nclass UsersController extends Controller {\n  async getUsers() {\n    const { ctx } = this;\n    ctx.body = 'hello world'\n  }\n}\n\nmodule.exports = UsersController;\n```\n3、在app目录下新建app/router.js\n```javascript\nmodule.exports = app => {\n  const { router, controller } = app;\n  router.get('/api/getUsers', controller.users.getUsers); // get('接口路径',controller内对应的方法)\n};\n```\n4、在根目录下新建config/config.default.js\n```javascript\n\nmodule.exports = {\n  keys: '123456790', // 随便写个Cookie 安全字符串\n};\n```\n终端运行项目\n```bash\nnpm run dev\n```\n此时打开浏览器访问接口就会显示hello world\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/1595334065360-6ee5820a-036b-4c33-b1f2-e51b30eb9acf.png)\n5、在config目录下新建config/plugin.js 添加mysql配置\n```javascript\nmodule.exports = {\n  mysql: {\n    enable: true,\n    package: 'egg-mysql',\n  },\n};\n```\n6、修改config/config.default.js 添加数据库账号密码\n```javascript\nmodule.exports = {\n  keys: '123456790',\n  mysql: {\n    // 单数据库信息配置\n    client: {\n      // host\n      host: '39.120.202.168',\n      // 端口号\n      port: '3306',\n      // 用户名\n      user: 'root',\n      // 密码\n      password: '123456',\n      // 数据库名\n      database: 'mystudy',\n    },\n    // 是否加载到 app 上，默认开启\n    app: true,\n    // 是否加载到 agent 上，默认关闭\n    agent: false,\n  }\n};\n```\n并在数据库mystudy内添加一些数据\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/1595334905486-4cdcf583-8243-4eb3-bc2c-430631ea291a.png)\n7、在app目录下新建app/service/users.js\n```javascript\nconst Service = require('egg').Service;\n\nclass UsersService extends Service {\n  async getData() {\n    const data = await this.app.mysql.query('SELECT * FROM user');\n    return { data };\n  }\n}\n\nmodule.exports = UsersService;\n```\n8、修改app/controller/users.js\n```javascript\nconst Controller = require('egg').Controller;\n\nclass UsersController extends Controller {\n  async getUsers() {\n    const { ctx } = this;\n    const res = await ctx.service.users.getData();\n    ctx.body = {\n      code: '200',\n      data: res.data,\n      message: 'success'\n    };\n  }\n}\n\nmodule.exports = UsersController;\n```\n此时重新运行项目\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/1595335194788-4c1e4d12-41b2-463b-bb36-03ecb8fa8230.png)\n成功获取到数据啦！\n\n\n\n\n","slug":"egg写一个最简单的mysql查询接口","published":1,"updated":"2022-08-30T07:15:32.320Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7g2c7fy00017qu58uwt5db6","content":"<h1 id=\"egg-写一个最简单的mysql查询接口\"><a href=\"#egg-写一个最简单的mysql查询接口\" class=\"headerlink\" title=\"egg 写一个最简单的mysql查询接口\"></a>egg 写一个最简单的mysql查询接口</h1><p>按照<a href=\"https://eggjs.org/zh-cn/intro/quickstart.html\">egg官网</a> 写一个最简单的mysql查询接口(提前准备好mysql数据库)<br>1、创建项目 安装依赖</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">mkdir</span> my-study-backend</span><br><span class=\"line\"><span class=\"built_in\">cd</span> my-study-backend</span><br><span class=\"line\">npm init</span><br><span class=\"line\">npm i egg --save</span><br><span class=\"line\">npm i egg-bin --save-dev</span><br><span class=\"line\">npm i --save egg-mysql</span><br></pre></td></tr></table></figure>\n<p>修改启动项</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">&quot;scripts&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;dev&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;egg-bin dev&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br></pre></td></tr></table></figure>\n<p>2、在app目录下新建app&#x2F;controller&#x2F;users.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">Controller</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;egg&#x27;</span>).<span class=\"property\">Controller</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">UsersController</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Controller</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">async</span> <span class=\"title function_\">getUsers</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; ctx &#125; = <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">    ctx.<span class=\"property\">body</span> = <span class=\"string\">&#x27;hello world&#x27;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = <span class=\"title class_\">UsersController</span>;</span><br></pre></td></tr></table></figure>\n<p>3、在app目录下新建app&#x2F;router.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = <span class=\"function\"><span class=\"params\">app</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123; router, controller &#125; = app;</span><br><span class=\"line\">  router.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;/api/getUsers&#x27;</span>, controller.<span class=\"property\">users</span>.<span class=\"property\">getUsers</span>); <span class=\"comment\">// get(&#x27;接口路径&#x27;,controller内对应的方法)</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>4、在根目录下新建config&#x2F;config.default.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">keys</span>: <span class=\"string\">&#x27;123456790&#x27;</span>, <span class=\"comment\">// 随便写个Cookie 安全字符串</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>终端运行项目</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run dev</span><br></pre></td></tr></table></figure>\n<p>此时打开浏览器访问接口就会显示hello world<br><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/1595334065360-6ee5820a-036b-4c33-b1f2-e51b30eb9acf.png\" alt=\"image.png\"><br>5、在config目录下新建config&#x2F;plugin.js 添加mysql配置</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">mysql</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">enable</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">package</span>: <span class=\"string\">&#x27;egg-mysql&#x27;</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>6、修改config&#x2F;config.default.js 添加数据库账号密码</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">keys</span>: <span class=\"string\">&#x27;123456790&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">mysql</span>: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 单数据库信息配置</span></span><br><span class=\"line\">    <span class=\"attr\">client</span>: &#123;</span><br><span class=\"line\">      <span class=\"comment\">// host</span></span><br><span class=\"line\">      <span class=\"attr\">host</span>: <span class=\"string\">&#x27;39.120.202.168&#x27;</span>,</span><br><span class=\"line\">      <span class=\"comment\">// 端口号</span></span><br><span class=\"line\">      <span class=\"attr\">port</span>: <span class=\"string\">&#x27;3306&#x27;</span>,</span><br><span class=\"line\">      <span class=\"comment\">// 用户名</span></span><br><span class=\"line\">      <span class=\"attr\">user</span>: <span class=\"string\">&#x27;root&#x27;</span>,</span><br><span class=\"line\">      <span class=\"comment\">// 密码</span></span><br><span class=\"line\">      <span class=\"attr\">password</span>: <span class=\"string\">&#x27;123456&#x27;</span>,</span><br><span class=\"line\">      <span class=\"comment\">// 数据库名</span></span><br><span class=\"line\">      <span class=\"attr\">database</span>: <span class=\"string\">&#x27;mystudy&#x27;</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// 是否加载到 app 上，默认开启</span></span><br><span class=\"line\">    <span class=\"attr\">app</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 是否加载到 agent 上，默认关闭</span></span><br><span class=\"line\">    <span class=\"attr\">agent</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>并在数据库mystudy内添加一些数据<br><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/1595334905486-4cdcf583-8243-4eb3-bc2c-430631ea291a.png\" alt=\"image.png\"><br>7、在app目录下新建app&#x2F;service&#x2F;users.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">Service</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;egg&#x27;</span>).<span class=\"property\">Service</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">UsersService</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Service</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">async</span> <span class=\"title function_\">getData</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> data = <span class=\"keyword\">await</span> <span class=\"variable language_\">this</span>.<span class=\"property\">app</span>.<span class=\"property\">mysql</span>.<span class=\"title function_\">query</span>(<span class=\"string\">&#x27;SELECT * FROM user&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123; data &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = <span class=\"title class_\">UsersService</span>;</span><br></pre></td></tr></table></figure>\n<p>8、修改app&#x2F;controller&#x2F;users.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">Controller</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;egg&#x27;</span>).<span class=\"property\">Controller</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">UsersController</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Controller</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">async</span> <span class=\"title function_\">getUsers</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; ctx &#125; = <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> res = <span class=\"keyword\">await</span> ctx.<span class=\"property\">service</span>.<span class=\"property\">users</span>.<span class=\"title function_\">getData</span>();</span><br><span class=\"line\">    ctx.<span class=\"property\">body</span> = &#123;</span><br><span class=\"line\">      <span class=\"attr\">code</span>: <span class=\"string\">&#x27;200&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">data</span>: res.<span class=\"property\">data</span>,</span><br><span class=\"line\">      <span class=\"attr\">message</span>: <span class=\"string\">&#x27;success&#x27;</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = <span class=\"title class_\">UsersController</span>;</span><br></pre></td></tr></table></figure>\n<p>此时重新运行项目<br><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/1595335194788-4c1e4d12-41b2-463b-bb36-03ecb8fa8230.png\" alt=\"image.png\"><br>成功获取到数据啦！</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"egg-写一个最简单的mysql查询接口\"><a href=\"#egg-写一个最简单的mysql查询接口\" class=\"headerlink\" title=\"egg 写一个最简单的mysql查询接口\"></a>egg 写一个最简单的mysql查询接口</h1><p>按照<a href=\"https://eggjs.org/zh-cn/intro/quickstart.html\">egg官网</a> 写一个最简单的mysql查询接口(提前准备好mysql数据库)<br>1、创建项目 安装依赖</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">mkdir</span> my-study-backend</span><br><span class=\"line\"><span class=\"built_in\">cd</span> my-study-backend</span><br><span class=\"line\">npm init</span><br><span class=\"line\">npm i egg --save</span><br><span class=\"line\">npm i egg-bin --save-dev</span><br><span class=\"line\">npm i --save egg-mysql</span><br></pre></td></tr></table></figure>\n<p>修改启动项</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">&quot;scripts&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;dev&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;egg-bin dev&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br></pre></td></tr></table></figure>\n<p>2、在app目录下新建app&#x2F;controller&#x2F;users.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">Controller</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;egg&#x27;</span>).<span class=\"property\">Controller</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">UsersController</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Controller</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">async</span> <span class=\"title function_\">getUsers</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; ctx &#125; = <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">    ctx.<span class=\"property\">body</span> = <span class=\"string\">&#x27;hello world&#x27;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = <span class=\"title class_\">UsersController</span>;</span><br></pre></td></tr></table></figure>\n<p>3、在app目录下新建app&#x2F;router.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = <span class=\"function\"><span class=\"params\">app</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123; router, controller &#125; = app;</span><br><span class=\"line\">  router.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;/api/getUsers&#x27;</span>, controller.<span class=\"property\">users</span>.<span class=\"property\">getUsers</span>); <span class=\"comment\">// get(&#x27;接口路径&#x27;,controller内对应的方法)</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>4、在根目录下新建config&#x2F;config.default.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">keys</span>: <span class=\"string\">&#x27;123456790&#x27;</span>, <span class=\"comment\">// 随便写个Cookie 安全字符串</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>终端运行项目</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run dev</span><br></pre></td></tr></table></figure>\n<p>此时打开浏览器访问接口就会显示hello world<br><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/1595334065360-6ee5820a-036b-4c33-b1f2-e51b30eb9acf.png\" alt=\"image.png\"><br>5、在config目录下新建config&#x2F;plugin.js 添加mysql配置</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">mysql</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">enable</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">package</span>: <span class=\"string\">&#x27;egg-mysql&#x27;</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>6、修改config&#x2F;config.default.js 添加数据库账号密码</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">keys</span>: <span class=\"string\">&#x27;123456790&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">mysql</span>: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 单数据库信息配置</span></span><br><span class=\"line\">    <span class=\"attr\">client</span>: &#123;</span><br><span class=\"line\">      <span class=\"comment\">// host</span></span><br><span class=\"line\">      <span class=\"attr\">host</span>: <span class=\"string\">&#x27;39.120.202.168&#x27;</span>,</span><br><span class=\"line\">      <span class=\"comment\">// 端口号</span></span><br><span class=\"line\">      <span class=\"attr\">port</span>: <span class=\"string\">&#x27;3306&#x27;</span>,</span><br><span class=\"line\">      <span class=\"comment\">// 用户名</span></span><br><span class=\"line\">      <span class=\"attr\">user</span>: <span class=\"string\">&#x27;root&#x27;</span>,</span><br><span class=\"line\">      <span class=\"comment\">// 密码</span></span><br><span class=\"line\">      <span class=\"attr\">password</span>: <span class=\"string\">&#x27;123456&#x27;</span>,</span><br><span class=\"line\">      <span class=\"comment\">// 数据库名</span></span><br><span class=\"line\">      <span class=\"attr\">database</span>: <span class=\"string\">&#x27;mystudy&#x27;</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// 是否加载到 app 上，默认开启</span></span><br><span class=\"line\">    <span class=\"attr\">app</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 是否加载到 agent 上，默认关闭</span></span><br><span class=\"line\">    <span class=\"attr\">agent</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>并在数据库mystudy内添加一些数据<br><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/1595334905486-4cdcf583-8243-4eb3-bc2c-430631ea291a.png\" alt=\"image.png\"><br>7、在app目录下新建app&#x2F;service&#x2F;users.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">Service</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;egg&#x27;</span>).<span class=\"property\">Service</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">UsersService</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Service</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">async</span> <span class=\"title function_\">getData</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> data = <span class=\"keyword\">await</span> <span class=\"variable language_\">this</span>.<span class=\"property\">app</span>.<span class=\"property\">mysql</span>.<span class=\"title function_\">query</span>(<span class=\"string\">&#x27;SELECT * FROM user&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123; data &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = <span class=\"title class_\">UsersService</span>;</span><br></pre></td></tr></table></figure>\n<p>8、修改app&#x2F;controller&#x2F;users.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">Controller</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;egg&#x27;</span>).<span class=\"property\">Controller</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">UsersController</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Controller</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">async</span> <span class=\"title function_\">getUsers</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; ctx &#125; = <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> res = <span class=\"keyword\">await</span> ctx.<span class=\"property\">service</span>.<span class=\"property\">users</span>.<span class=\"title function_\">getData</span>();</span><br><span class=\"line\">    ctx.<span class=\"property\">body</span> = &#123;</span><br><span class=\"line\">      <span class=\"attr\">code</span>: <span class=\"string\">&#x27;200&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">data</span>: res.<span class=\"property\">data</span>,</span><br><span class=\"line\">      <span class=\"attr\">message</span>: <span class=\"string\">&#x27;success&#x27;</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = <span class=\"title class_\">UsersController</span>;</span><br></pre></td></tr></table></figure>\n<p>此时重新运行项目<br><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/1595335194788-4c1e4d12-41b2-463b-bb36-03ecb8fa8230.png\" alt=\"image.png\"><br>成功获取到数据啦！</p>\n"},{"title":"JS多个异步接口的顺序调用","date":"2021-02-26T09:53:00.000Z","_content":"\n**假如有这样的一个需求：有请求1、请求2、请求3，但是请求1的入参必须依赖请求2和请求3的返回才可以获取到数据，那么需要怎么做呢？**\n常规的做法可能是以下这样：\n\n\n```javascript\nfetch2().then(result2=>{\n\tfetch3().then(result3=>{\n\t\tfetch1(result2,result3).then(result1=>{\n\t\t\tconsole.log(result1);\n\t\t})\n\t})\n})\n```\n\n\n这样的写法虽然可以实现需求，但是写起来特别难受，层层嵌套。\nES6中新增了async await特性，完全可以满足这样的需求，下面换一种写法看看。\n\n\n```javascript\nasync function getResult(){\n\tlet result2 = await fetch2()\n\tlet result3 = await fetch3()\n\tlet result1 = await fetch1(result2,result3)\n\tconsole.log(result1);\n})\n```\n\n\n`async`函数返回一个 Promise 对象，可以使用`then`方法添加回调函数。当函数执行的时候，一旦遇到`await`就会先返回，等到异步操作完成，再接着执行函数体内后面的语句。\n\n\n```javascript\nasync function getResult(){\n\tlet result2 = await fetch2()\n\tlet result3 = await fetch3()\n\treturn await fetch1(result2,result3)\n})\ngetResult().then(res=>{\n\tconsole.log(res);\n})\n```\n\n\n在方法前加上async 说明在这个方法体内存在异步调用，而await后面通常也是一个Promise对象，会返回Promise对象处理的结果，如果不是 Promise 对象，就直接返回对应的值，await不能单独使用，必须在async方法内部使用。\n\n\n```javascript\nasync function f() {\n  return await 123;\n}\nf().then(v => console.log(v))\n// 123\n```\n\n\n但是这样的处理就会出现一个缺点，假如fetch2和fetch3请求非常慢，那么fetch1等待的时间就非常久，这样的处理结果非常影响页面的效率。\n我们可以使用Promise.all()来处理：\n\n\n```javascript\nasync function getResult(){\n\tlet [result2,result3] = await Promise.all([fetch2(),fetch3()])\n\treturn await fetch1(result2,result3)\n})\ngetResult().then(result1=>{\n\tconsole.log(result1);\n})\n```\n\n\n使用Promise.all()需要传递一个Promise实例的数组，即多个请求的数组，并且多个请求是同时进行请求的。这样就fetch1就无需等待过多的请求时间了。\nPromise.all返回的结果是一个数组，并且 Promise.all获得的成功结果的数组里面的数据顺序和Promise.all接收到的数组顺序是一致的。\n那么如何处理异常呢？\n\n\n```javascript\nasync function getResult(){\n\tlet [result2,result3] = await Promise.all([fetch2(),fetch3()]).catch(e=>{\n\t\tthrow new Error(e);\n\t})\n\treturn await fetch1(result2,result3)\n})\ngetResult().then(result1=>{\n\tconsole.log(result1);\n}).catch(e=>{\n\tthrow new Error(e);\n})\n```\n\n\npromise.all 中任何一个promise 出现错误的时候都会执行reject，同时将错误异常返回给async的Promise 对象并且抛出reject，抛出的错误对象reject又会被`catch`方法回调函数接收到。\n只有`async`函数内部的异步操作执行完，才会执行`then`方法指定的回调函数。\n`而await`后面的 Promise 对象如果变为`reject`状态，则`reject`的参数会被`catch`方法的回调函数接收到。\n所以如果promise.all 中任何一个promise 出现错误我们可以用catch来接收promise.all的错误，也可以不用catch来接收，因为Promise.all抛出的异常会被async的reject抛出，然后通过async的catch方法来处理。\n\n\n\n","source":"_posts/JS多个异步接口的顺序调用.md","raw":"---\ntitle: JS多个异步接口的顺序调用\ndate: 2021-02-26 17:53\ntags:\n---\n\n**假如有这样的一个需求：有请求1、请求2、请求3，但是请求1的入参必须依赖请求2和请求3的返回才可以获取到数据，那么需要怎么做呢？**\n常规的做法可能是以下这样：\n\n\n```javascript\nfetch2().then(result2=>{\n\tfetch3().then(result3=>{\n\t\tfetch1(result2,result3).then(result1=>{\n\t\t\tconsole.log(result1);\n\t\t})\n\t})\n})\n```\n\n\n这样的写法虽然可以实现需求，但是写起来特别难受，层层嵌套。\nES6中新增了async await特性，完全可以满足这样的需求，下面换一种写法看看。\n\n\n```javascript\nasync function getResult(){\n\tlet result2 = await fetch2()\n\tlet result3 = await fetch3()\n\tlet result1 = await fetch1(result2,result3)\n\tconsole.log(result1);\n})\n```\n\n\n`async`函数返回一个 Promise 对象，可以使用`then`方法添加回调函数。当函数执行的时候，一旦遇到`await`就会先返回，等到异步操作完成，再接着执行函数体内后面的语句。\n\n\n```javascript\nasync function getResult(){\n\tlet result2 = await fetch2()\n\tlet result3 = await fetch3()\n\treturn await fetch1(result2,result3)\n})\ngetResult().then(res=>{\n\tconsole.log(res);\n})\n```\n\n\n在方法前加上async 说明在这个方法体内存在异步调用，而await后面通常也是一个Promise对象，会返回Promise对象处理的结果，如果不是 Promise 对象，就直接返回对应的值，await不能单独使用，必须在async方法内部使用。\n\n\n```javascript\nasync function f() {\n  return await 123;\n}\nf().then(v => console.log(v))\n// 123\n```\n\n\n但是这样的处理就会出现一个缺点，假如fetch2和fetch3请求非常慢，那么fetch1等待的时间就非常久，这样的处理结果非常影响页面的效率。\n我们可以使用Promise.all()来处理：\n\n\n```javascript\nasync function getResult(){\n\tlet [result2,result3] = await Promise.all([fetch2(),fetch3()])\n\treturn await fetch1(result2,result3)\n})\ngetResult().then(result1=>{\n\tconsole.log(result1);\n})\n```\n\n\n使用Promise.all()需要传递一个Promise实例的数组，即多个请求的数组，并且多个请求是同时进行请求的。这样就fetch1就无需等待过多的请求时间了。\nPromise.all返回的结果是一个数组，并且 Promise.all获得的成功结果的数组里面的数据顺序和Promise.all接收到的数组顺序是一致的。\n那么如何处理异常呢？\n\n\n```javascript\nasync function getResult(){\n\tlet [result2,result3] = await Promise.all([fetch2(),fetch3()]).catch(e=>{\n\t\tthrow new Error(e);\n\t})\n\treturn await fetch1(result2,result3)\n})\ngetResult().then(result1=>{\n\tconsole.log(result1);\n}).catch(e=>{\n\tthrow new Error(e);\n})\n```\n\n\npromise.all 中任何一个promise 出现错误的时候都会执行reject，同时将错误异常返回给async的Promise 对象并且抛出reject，抛出的错误对象reject又会被`catch`方法回调函数接收到。\n只有`async`函数内部的异步操作执行完，才会执行`then`方法指定的回调函数。\n`而await`后面的 Promise 对象如果变为`reject`状态，则`reject`的参数会被`catch`方法的回调函数接收到。\n所以如果promise.all 中任何一个promise 出现错误我们可以用catch来接收promise.all的错误，也可以不用catch来接收，因为Promise.all抛出的异常会被async的reject抛出，然后通过async的catch方法来处理。\n\n\n\n","slug":"JS多个异步接口的顺序调用","published":1,"updated":"2022-08-30T07:28:21.506Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7g2c7fy00027qu5922na6i0","content":"<p><strong>假如有这样的一个需求：有请求1、请求2、请求3，但是请求1的入参必须依赖请求2和请求3的返回才可以获取到数据，那么需要怎么做呢？</strong><br>常规的做法可能是以下这样：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">fetch2</span>().<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">result2</span>=&gt;</span>&#123;</span><br><span class=\"line\">\t<span class=\"title function_\">fetch3</span>().<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">result3</span>=&gt;</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"title function_\">fetch1</span>(result2,result3).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">result1</span>=&gt;</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(result1);</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n\n<p>这样的写法虽然可以实现需求，但是写起来特别难受，层层嵌套。<br>ES6中新增了async await特性，完全可以满足这样的需求，下面换一种写法看看。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">getResult</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> result2 = <span class=\"keyword\">await</span> <span class=\"title function_\">fetch2</span>()</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> result3 = <span class=\"keyword\">await</span> <span class=\"title function_\">fetch3</span>()</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> result1 = <span class=\"keyword\">await</span> <span class=\"title function_\">fetch1</span>(result2,result3)</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(result1);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n\n<p><code>async</code>函数返回一个 Promise 对象，可以使用<code>then</code>方法添加回调函数。当函数执行的时候，一旦遇到<code>await</code>就会先返回，等到异步操作完成，再接着执行函数体内后面的语句。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">getResult</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> result2 = <span class=\"keyword\">await</span> <span class=\"title function_\">fetch2</span>()</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> result3 = <span class=\"keyword\">await</span> <span class=\"title function_\">fetch3</span>()</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">await</span> <span class=\"title function_\">fetch1</span>(result2,result3)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"title function_\">getResult</span>().<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">res</span>=&gt;</span>&#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n\n<p>在方法前加上async 说明在这个方法体内存在异步调用，而await后面通常也是一个Promise对象，会返回Promise对象处理的结果，如果不是 Promise 对象，就直接返回对应的值，await不能单独使用，必须在async方法内部使用。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">f</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">await</span> <span class=\"number\">123</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">f</span>().<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">v</span> =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(v))</span><br><span class=\"line\"><span class=\"comment\">// 123</span></span><br></pre></td></tr></table></figure>\n\n\n<p>但是这样的处理就会出现一个缺点，假如fetch2和fetch3请求非常慢，那么fetch1等待的时间就非常久，这样的处理结果非常影响页面的效率。<br>我们可以使用Promise.all()来处理：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">getResult</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> [result2,result3] = <span class=\"keyword\">await</span> <span class=\"title class_\">Promise</span>.<span class=\"title function_\">all</span>([<span class=\"title function_\">fetch2</span>(),<span class=\"title function_\">fetch3</span>()])</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">await</span> <span class=\"title function_\">fetch1</span>(result2,result3)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"title function_\">getResult</span>().<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">result1</span>=&gt;</span>&#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(result1);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n\n<p>使用Promise.all()需要传递一个Promise实例的数组，即多个请求的数组，并且多个请求是同时进行请求的。这样就fetch1就无需等待过多的请求时间了。<br>Promise.all返回的结果是一个数组，并且 Promise.all获得的成功结果的数组里面的数据顺序和Promise.all接收到的数组顺序是一致的。<br>那么如何处理异常呢？</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">getResult</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> [result2,result3] = <span class=\"keyword\">await</span> <span class=\"title class_\">Promise</span>.<span class=\"title function_\">all</span>([<span class=\"title function_\">fetch2</span>(),<span class=\"title function_\">fetch3</span>()]).<span class=\"title function_\">catch</span>(<span class=\"function\"><span class=\"params\">e</span>=&gt;</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(e);</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">await</span> <span class=\"title function_\">fetch1</span>(result2,result3)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"title function_\">getResult</span>().<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">result1</span>=&gt;</span>&#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(result1);</span><br><span class=\"line\">&#125;).<span class=\"title function_\">catch</span>(<span class=\"function\"><span class=\"params\">e</span>=&gt;</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(e);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n\n<p>promise.all 中任何一个promise 出现错误的时候都会执行reject，同时将错误异常返回给async的Promise 对象并且抛出reject，抛出的错误对象reject又会被<code>catch</code>方法回调函数接收到。<br>只有<code>async</code>函数内部的异步操作执行完，才会执行<code>then</code>方法指定的回调函数。<br><code>而await</code>后面的 Promise 对象如果变为<code>reject</code>状态，则<code>reject</code>的参数会被<code>catch</code>方法的回调函数接收到。<br>所以如果promise.all 中任何一个promise 出现错误我们可以用catch来接收promise.all的错误，也可以不用catch来接收，因为Promise.all抛出的异常会被async的reject抛出，然后通过async的catch方法来处理。</p>\n","site":{"data":{}},"excerpt":"","more":"<p><strong>假如有这样的一个需求：有请求1、请求2、请求3，但是请求1的入参必须依赖请求2和请求3的返回才可以获取到数据，那么需要怎么做呢？</strong><br>常规的做法可能是以下这样：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">fetch2</span>().<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">result2</span>=&gt;</span>&#123;</span><br><span class=\"line\">\t<span class=\"title function_\">fetch3</span>().<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">result3</span>=&gt;</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"title function_\">fetch1</span>(result2,result3).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">result1</span>=&gt;</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(result1);</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n\n<p>这样的写法虽然可以实现需求，但是写起来特别难受，层层嵌套。<br>ES6中新增了async await特性，完全可以满足这样的需求，下面换一种写法看看。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">getResult</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> result2 = <span class=\"keyword\">await</span> <span class=\"title function_\">fetch2</span>()</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> result3 = <span class=\"keyword\">await</span> <span class=\"title function_\">fetch3</span>()</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> result1 = <span class=\"keyword\">await</span> <span class=\"title function_\">fetch1</span>(result2,result3)</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(result1);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n\n<p><code>async</code>函数返回一个 Promise 对象，可以使用<code>then</code>方法添加回调函数。当函数执行的时候，一旦遇到<code>await</code>就会先返回，等到异步操作完成，再接着执行函数体内后面的语句。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">getResult</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> result2 = <span class=\"keyword\">await</span> <span class=\"title function_\">fetch2</span>()</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> result3 = <span class=\"keyword\">await</span> <span class=\"title function_\">fetch3</span>()</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">await</span> <span class=\"title function_\">fetch1</span>(result2,result3)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"title function_\">getResult</span>().<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">res</span>=&gt;</span>&#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n\n<p>在方法前加上async 说明在这个方法体内存在异步调用，而await后面通常也是一个Promise对象，会返回Promise对象处理的结果，如果不是 Promise 对象，就直接返回对应的值，await不能单独使用，必须在async方法内部使用。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">f</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">await</span> <span class=\"number\">123</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">f</span>().<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">v</span> =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(v))</span><br><span class=\"line\"><span class=\"comment\">// 123</span></span><br></pre></td></tr></table></figure>\n\n\n<p>但是这样的处理就会出现一个缺点，假如fetch2和fetch3请求非常慢，那么fetch1等待的时间就非常久，这样的处理结果非常影响页面的效率。<br>我们可以使用Promise.all()来处理：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">getResult</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> [result2,result3] = <span class=\"keyword\">await</span> <span class=\"title class_\">Promise</span>.<span class=\"title function_\">all</span>([<span class=\"title function_\">fetch2</span>(),<span class=\"title function_\">fetch3</span>()])</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">await</span> <span class=\"title function_\">fetch1</span>(result2,result3)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"title function_\">getResult</span>().<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">result1</span>=&gt;</span>&#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(result1);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n\n<p>使用Promise.all()需要传递一个Promise实例的数组，即多个请求的数组，并且多个请求是同时进行请求的。这样就fetch1就无需等待过多的请求时间了。<br>Promise.all返回的结果是一个数组，并且 Promise.all获得的成功结果的数组里面的数据顺序和Promise.all接收到的数组顺序是一致的。<br>那么如何处理异常呢？</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">getResult</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> [result2,result3] = <span class=\"keyword\">await</span> <span class=\"title class_\">Promise</span>.<span class=\"title function_\">all</span>([<span class=\"title function_\">fetch2</span>(),<span class=\"title function_\">fetch3</span>()]).<span class=\"title function_\">catch</span>(<span class=\"function\"><span class=\"params\">e</span>=&gt;</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(e);</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">await</span> <span class=\"title function_\">fetch1</span>(result2,result3)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"title function_\">getResult</span>().<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">result1</span>=&gt;</span>&#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(result1);</span><br><span class=\"line\">&#125;).<span class=\"title function_\">catch</span>(<span class=\"function\"><span class=\"params\">e</span>=&gt;</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(e);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n\n<p>promise.all 中任何一个promise 出现错误的时候都会执行reject，同时将错误异常返回给async的Promise 对象并且抛出reject，抛出的错误对象reject又会被<code>catch</code>方法回调函数接收到。<br>只有<code>async</code>函数内部的异步操作执行完，才会执行<code>then</code>方法指定的回调函数。<br><code>而await</code>后面的 Promise 对象如果变为<code>reject</code>状态，则<code>reject</code>的参数会被<code>catch</code>方法的回调函数接收到。<br>所以如果promise.all 中任何一个promise 出现错误我们可以用catch来接收promise.all的错误，也可以不用catch来接收，因为Promise.all抛出的异常会被async的reject抛出，然后通过async的catch方法来处理。</p>\n"},{"title":"利用腾讯云cloudbase快速搭建vue项目到发布","date":"2022-01-28T07:43:00.000Z","_content":"## 前言\n利用腾讯云的serverless技术--[cloudbase](https://docs.cloudbase.net/)快速搭建项目到部署发布。\n作为一个前端开发，很多时候因为没有后端服务的接口和数据库支持而一筹莫展；一想到搭建一个项目，还要购买服务器、配置数据库等等就觉得麻烦；\n现在，腾讯云提供了一种新的快速上线的云架构，让只会前端的同学也能快速开发一个完整的前后端系统，并且能够支持一键部署，快速上线，低成本、高效率的开发。\n## 搭建环境\n### 一、开通环境\n进入[云开发 CloudBase 控制台](https://console.cloud.tencent.com/tcb)开通CloudBase，腾讯云直接微信扫码登录注册就行。\n\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/image_1643350234186.png)\n\n选择vue应用模板；\n\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/image_1643350311797.png)\n\n创建环境名称test，计费的话前期有免费额度，然后点击下一步到开通为止。\n\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/image_1643350465793.png)\n\n点击应用进入环境总览；\n\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/image_1643350571129.png)\n\n后面的话主要会用到的就是当前环境的id；\n\n### 二、搭建vue前端项目及一键部署\n#### 1、全局安装 CloudBase CLI\n```bash\nnpm install -g @cloudbase/cli@latest\n```\n\n#### 2、创建vue项目\n```bash\nnpx vue create vue-hello-world\n```\n\n#### 3、发布项目\n```bash\ncd vue-hello-world\ncloudbase framework deploy -e test-4g5kb8yja12f81fb\n\n//或者也可以直接输入cloudbase命令回车，test-4g5kb8yja12f81fb 为刚刚创建的环境id\n\n Tip: cloudbase 命令可以简写为 tcb \n\nCloudBase CLI 1.12.0\nCloudBase Framework 1.9.0\n   ______ __                   __ ____                             \n  / ____// /____   __  __ ____/ // __ ) ____ _ _____ ___           \n / /    / // __ \\ / / / // __  // __  |/ __ `// ___// _ \\          \n/ /___ / // /_/ // /_/ // /_/ // /_/ // /_/ /(__  )/  __/          \n\\____//_/_\\____/ \\__,_/ \\__,_//_____/ \\__,_//____/ \\___/       __  \n   / ____/_____ ____ _ ____ ___   ___  _      __ ____   _____ / /__\n  / /_   / ___// __ `// __ `__ \\ / _ \\| | /| / // __ \\ / ___// //_/\n / __/  / /   / /_/ // / / / / //  __/| |/ |/ // /_/ // /   / ,<   \n/_/    /_/    \\__,_//_/ /_/ /_/ \\___/ |__/|__/ \\____//_/   /_/|_|  \n                                                                   \n\n CloudBase Framework  info     Version v1.9.0\n CloudBase Framework  info     Github: https://github.com/Tencent/cloudbase-framework\n\n CloudBase Framework  info     EnvId test1-4g5kb8yja12f81fb\n CloudBase Framework  info     Region ap-shanghai\n? 请输入应用唯一标识(支持 A-Z a-z 0-9 及 -, 同一环境下不能相同) test\n? 检测到当前项目包含 Vue.js 项目\n\n  🔨 构建脚本 `npm run build`\n  📦 本地静态文件目录 `dist`\n\n  是否需要修改默认配置 No\n? 是否需要保存当前项目配置到项目中 Yes\n CloudBase Framework  info     Validate config file success.\n CloudBase Framework  info     AppName test\n CloudBase Framework  info     📦 install plugins\n CloudBase Framework  info     callHooks 'preDeploy' \n CloudBase Framework  info     🔧 init: vue...\n CloudBase Framework  info     Website 插件会自动开启静态网页托管能力，需要当前环境为 [按量计费] 模式\n CloudBase Framework  info     Website 插件会部署应用资源到当前静态托管的 / 目录下\n CloudBase Framework  info     🔨 build: vue...\n CloudBase Framework  info     running 'npm install --prefer-offline --no-audit --progress=false' \n\nup to date in 594ms\n\n11 packages are looking for funding\n  run `npm fund` for details\n CloudBase Framework  info     running 'npm run build' \n\n> vue-hello-world1@0.1.0 build\n> vue-cli-service build\n\n\n\n\n DONE  Compiled successfully in 1669ms                                                                                      下午2:34:11\n\n  File                                 Size                                           Gzipped\n\n  dist/js/chunk-vendors.4102dc7c.js    94.96 KiB                                      34.02 KiB\n  dist/js/app.ecf66627.js              4.58 KiB                                       1.63 KiB\n  dist/css/app.fb0c6e1c.css            0.33 KiB                                       0.23 KiB\n\n  Images and other types of assets omitted.\n\n DONE  Build complete. The dist directory is ready to be deployed.\n INFO  Check out deployment instructions at https://cli.vuejs.org/guide/deployment.html\n      \n CloudBase Framework  info     🧬 compile: vue...\n CloudBase Framework  info     callHooks 'postCompile' \n正在部署[░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░] 100% 100.2 s\n CloudBase Framework  info     🚀 deploy: vue...\n CloudBase Framework  info     🚀 网站部署成功\n CloudBase Framework  info     callHooks 'postDeploy' \n CloudBase Framework  info     🌐 应用入口信息:\n🔗 网站入口: https://test-4g5kb8yja12f81fb-1256759236.tcloudbaseapp.com/\n CloudBase Framework  info     ✨ done\n```\n\n部署结束后会生成一个访问地址：🔗 网站入口: https://test-4g5kb8yja12f81fb-1256759236.tcloudbaseapp.com/\n\n复制到浏览器地址栏就直接能访问啦~\n\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/image_1643352051889.png)\n\n### 三、配置数据库\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/image_1643352786244.png)\n\n新建一个名为test的集合数据库；\n\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/image_1643352881859.png)\n\n添加文档(创建表)、添加字段\n\n### 四、开发项目(前端操作数据库)\n进入项目根目录，引入cloudbase依赖\n\n```base\n#npm\nnpm install @cloudbase/js-sdk -S\n# yarn\nyarn add @cloudbase/js-sdk\n```\n\n编写查询和新增方法\n\n```js\n<template>\n  <button @click=\"insert\">插入一条数据</button>\n  <button @click=\"search\">查询数据</button>\n  <span v-if=\"result\">{{result}}</span>\n</template>\n\nimport cloudbase from '@cloudbase/js-sdk';\nconst app = cloudbase.init({\n  env: \"test-4g5kb8yja12f81fb\"\n});\nconst db = app.database();\n\nmethods: {\n     search() {\n      let _this = this\n      db.collection(\"test\") // collection() 方法获取一个集合的引用\n      .get() // get() 方法会触发网络请求，往数据库取数据\n      .then(function (res) {\n        _this.result = res\n      });\n    },\t\t\n    insert(){\n      db.collection(\"test\").add({\n        name: 'test',\n        password: '123456'\n      }).then(res=>{\n        alert( JSON.stringify(res),\"插入成功\")\n      })\n    }\n  }\n```\n\n本地测试接口调用，发现没有权限 Permission denied\n\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/image_1643353831460.png)\n\n#### 配置权限\n\n进入控制台登录授权\n官方提供了几种[登录授权](https://docs.cloudbase.net/authentication/auth/introduce)\n当前我们使用未登录模式\n\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/image_1643354158012.png)\n\n在根目录下public/index.html 初始化cloudbase\n\n```html\n<script src=\"//imgcache.qq.com/qcloud/cloudbase-js-sdk/1.6.0/cloudbase.full.js\"></script>\n<script>\n  const app = cloudbase.init({\n    env: 'test-4g5kb8yja12f81fb' // 您的环境id\n  })\n</script>\n```\n\n但是这样做还是不能访问到数据库，因为还需要配置数据库的读写权限。\n进入数据库权限设置。\n\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/image_1643354016007.png)\n\n点击右上角切换到安全规则权限设置，按照如下配置\n\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/image_1643354464046.png)\n\n```json\n{\n  \"read\": \"doc._openid == auth.uid || auth == null\",\n  \"write\": \"doc._openid == auth.uid || auth == null\"\n}\n```\n\n此时点击查询数据和查询，就能够顺利调用接口查询到数据了。\n\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/image_1643354621900.png)\n\n### 五、发布项目及配置域名\n在根目录下再次输入命令 cloudbase framework deploy\n\n```bash\ncloudbase framework deploy\n```\ncloudbase 又会执行npm run build 打包并发布部署到线上环境。\n\n\n#### 自定义域名\n进入静态网站托管，进入详细配置。\n\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/image_1643355011560.png)\n\n点击添加域名\n\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/image_1643355403629.png)\n\n域名必须为https协议，所以提前准备好带有证书的域名。\n\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/image_1643355559005.png)\n\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/image_1643355656598.png)\n\n还需要配置DNS CNAME记录。\n\n等待部署成功就可以访问啦~\nhttps://test.vanterc.com/\n\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/image_1643356325651.png)","source":"_posts/利用腾讯云cloudbase快速搭建vue项目到发布.md","raw":"---\ntitle: 利用腾讯云cloudbase快速搭建vue项目到发布\ndate: 2022-01-28 15:43\ntags:\n---\n## 前言\n利用腾讯云的serverless技术--[cloudbase](https://docs.cloudbase.net/)快速搭建项目到部署发布。\n作为一个前端开发，很多时候因为没有后端服务的接口和数据库支持而一筹莫展；一想到搭建一个项目，还要购买服务器、配置数据库等等就觉得麻烦；\n现在，腾讯云提供了一种新的快速上线的云架构，让只会前端的同学也能快速开发一个完整的前后端系统，并且能够支持一键部署，快速上线，低成本、高效率的开发。\n## 搭建环境\n### 一、开通环境\n进入[云开发 CloudBase 控制台](https://console.cloud.tencent.com/tcb)开通CloudBase，腾讯云直接微信扫码登录注册就行。\n\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/image_1643350234186.png)\n\n选择vue应用模板；\n\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/image_1643350311797.png)\n\n创建环境名称test，计费的话前期有免费额度，然后点击下一步到开通为止。\n\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/image_1643350465793.png)\n\n点击应用进入环境总览；\n\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/image_1643350571129.png)\n\n后面的话主要会用到的就是当前环境的id；\n\n### 二、搭建vue前端项目及一键部署\n#### 1、全局安装 CloudBase CLI\n```bash\nnpm install -g @cloudbase/cli@latest\n```\n\n#### 2、创建vue项目\n```bash\nnpx vue create vue-hello-world\n```\n\n#### 3、发布项目\n```bash\ncd vue-hello-world\ncloudbase framework deploy -e test-4g5kb8yja12f81fb\n\n//或者也可以直接输入cloudbase命令回车，test-4g5kb8yja12f81fb 为刚刚创建的环境id\n\n Tip: cloudbase 命令可以简写为 tcb \n\nCloudBase CLI 1.12.0\nCloudBase Framework 1.9.0\n   ______ __                   __ ____                             \n  / ____// /____   __  __ ____/ // __ ) ____ _ _____ ___           \n / /    / // __ \\ / / / // __  // __  |/ __ `// ___// _ \\          \n/ /___ / // /_/ // /_/ // /_/ // /_/ // /_/ /(__  )/  __/          \n\\____//_/_\\____/ \\__,_/ \\__,_//_____/ \\__,_//____/ \\___/       __  \n   / ____/_____ ____ _ ____ ___   ___  _      __ ____   _____ / /__\n  / /_   / ___// __ `// __ `__ \\ / _ \\| | /| / // __ \\ / ___// //_/\n / __/  / /   / /_/ // / / / / //  __/| |/ |/ // /_/ // /   / ,<   \n/_/    /_/    \\__,_//_/ /_/ /_/ \\___/ |__/|__/ \\____//_/   /_/|_|  \n                                                                   \n\n CloudBase Framework  info     Version v1.9.0\n CloudBase Framework  info     Github: https://github.com/Tencent/cloudbase-framework\n\n CloudBase Framework  info     EnvId test1-4g5kb8yja12f81fb\n CloudBase Framework  info     Region ap-shanghai\n? 请输入应用唯一标识(支持 A-Z a-z 0-9 及 -, 同一环境下不能相同) test\n? 检测到当前项目包含 Vue.js 项目\n\n  🔨 构建脚本 `npm run build`\n  📦 本地静态文件目录 `dist`\n\n  是否需要修改默认配置 No\n? 是否需要保存当前项目配置到项目中 Yes\n CloudBase Framework  info     Validate config file success.\n CloudBase Framework  info     AppName test\n CloudBase Framework  info     📦 install plugins\n CloudBase Framework  info     callHooks 'preDeploy' \n CloudBase Framework  info     🔧 init: vue...\n CloudBase Framework  info     Website 插件会自动开启静态网页托管能力，需要当前环境为 [按量计费] 模式\n CloudBase Framework  info     Website 插件会部署应用资源到当前静态托管的 / 目录下\n CloudBase Framework  info     🔨 build: vue...\n CloudBase Framework  info     running 'npm install --prefer-offline --no-audit --progress=false' \n\nup to date in 594ms\n\n11 packages are looking for funding\n  run `npm fund` for details\n CloudBase Framework  info     running 'npm run build' \n\n> vue-hello-world1@0.1.0 build\n> vue-cli-service build\n\n\n\n\n DONE  Compiled successfully in 1669ms                                                                                      下午2:34:11\n\n  File                                 Size                                           Gzipped\n\n  dist/js/chunk-vendors.4102dc7c.js    94.96 KiB                                      34.02 KiB\n  dist/js/app.ecf66627.js              4.58 KiB                                       1.63 KiB\n  dist/css/app.fb0c6e1c.css            0.33 KiB                                       0.23 KiB\n\n  Images and other types of assets omitted.\n\n DONE  Build complete. The dist directory is ready to be deployed.\n INFO  Check out deployment instructions at https://cli.vuejs.org/guide/deployment.html\n      \n CloudBase Framework  info     🧬 compile: vue...\n CloudBase Framework  info     callHooks 'postCompile' \n正在部署[░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░] 100% 100.2 s\n CloudBase Framework  info     🚀 deploy: vue...\n CloudBase Framework  info     🚀 网站部署成功\n CloudBase Framework  info     callHooks 'postDeploy' \n CloudBase Framework  info     🌐 应用入口信息:\n🔗 网站入口: https://test-4g5kb8yja12f81fb-1256759236.tcloudbaseapp.com/\n CloudBase Framework  info     ✨ done\n```\n\n部署结束后会生成一个访问地址：🔗 网站入口: https://test-4g5kb8yja12f81fb-1256759236.tcloudbaseapp.com/\n\n复制到浏览器地址栏就直接能访问啦~\n\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/image_1643352051889.png)\n\n### 三、配置数据库\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/image_1643352786244.png)\n\n新建一个名为test的集合数据库；\n\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/image_1643352881859.png)\n\n添加文档(创建表)、添加字段\n\n### 四、开发项目(前端操作数据库)\n进入项目根目录，引入cloudbase依赖\n\n```base\n#npm\nnpm install @cloudbase/js-sdk -S\n# yarn\nyarn add @cloudbase/js-sdk\n```\n\n编写查询和新增方法\n\n```js\n<template>\n  <button @click=\"insert\">插入一条数据</button>\n  <button @click=\"search\">查询数据</button>\n  <span v-if=\"result\">{{result}}</span>\n</template>\n\nimport cloudbase from '@cloudbase/js-sdk';\nconst app = cloudbase.init({\n  env: \"test-4g5kb8yja12f81fb\"\n});\nconst db = app.database();\n\nmethods: {\n     search() {\n      let _this = this\n      db.collection(\"test\") // collection() 方法获取一个集合的引用\n      .get() // get() 方法会触发网络请求，往数据库取数据\n      .then(function (res) {\n        _this.result = res\n      });\n    },\t\t\n    insert(){\n      db.collection(\"test\").add({\n        name: 'test',\n        password: '123456'\n      }).then(res=>{\n        alert( JSON.stringify(res),\"插入成功\")\n      })\n    }\n  }\n```\n\n本地测试接口调用，发现没有权限 Permission denied\n\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/image_1643353831460.png)\n\n#### 配置权限\n\n进入控制台登录授权\n官方提供了几种[登录授权](https://docs.cloudbase.net/authentication/auth/introduce)\n当前我们使用未登录模式\n\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/image_1643354158012.png)\n\n在根目录下public/index.html 初始化cloudbase\n\n```html\n<script src=\"//imgcache.qq.com/qcloud/cloudbase-js-sdk/1.6.0/cloudbase.full.js\"></script>\n<script>\n  const app = cloudbase.init({\n    env: 'test-4g5kb8yja12f81fb' // 您的环境id\n  })\n</script>\n```\n\n但是这样做还是不能访问到数据库，因为还需要配置数据库的读写权限。\n进入数据库权限设置。\n\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/image_1643354016007.png)\n\n点击右上角切换到安全规则权限设置，按照如下配置\n\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/image_1643354464046.png)\n\n```json\n{\n  \"read\": \"doc._openid == auth.uid || auth == null\",\n  \"write\": \"doc._openid == auth.uid || auth == null\"\n}\n```\n\n此时点击查询数据和查询，就能够顺利调用接口查询到数据了。\n\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/image_1643354621900.png)\n\n### 五、发布项目及配置域名\n在根目录下再次输入命令 cloudbase framework deploy\n\n```bash\ncloudbase framework deploy\n```\ncloudbase 又会执行npm run build 打包并发布部署到线上环境。\n\n\n#### 自定义域名\n进入静态网站托管，进入详细配置。\n\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/image_1643355011560.png)\n\n点击添加域名\n\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/image_1643355403629.png)\n\n域名必须为https协议，所以提前准备好带有证书的域名。\n\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/image_1643355559005.png)\n\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/image_1643355656598.png)\n\n还需要配置DNS CNAME记录。\n\n等待部署成功就可以访问啦~\nhttps://test.vanterc.com/\n\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/image_1643356325651.png)","slug":"利用腾讯云cloudbase快速搭建vue项目到发布","published":1,"updated":"2022-08-30T07:39:33.987Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7g2c7fz00037qu5hbvv4nya","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>利用腾讯云的serverless技术–<a href=\"https://docs.cloudbase.net/\">cloudbase</a>快速搭建项目到部署发布。<br>作为一个前端开发，很多时候因为没有后端服务的接口和数据库支持而一筹莫展；一想到搭建一个项目，还要购买服务器、配置数据库等等就觉得麻烦；<br>现在，腾讯云提供了一种新的快速上线的云架构，让只会前端的同学也能快速开发一个完整的前后端系统，并且能够支持一键部署，快速上线，低成本、高效率的开发。</p>\n<h2 id=\"搭建环境\"><a href=\"#搭建环境\" class=\"headerlink\" title=\"搭建环境\"></a>搭建环境</h2><h3 id=\"一、开通环境\"><a href=\"#一、开通环境\" class=\"headerlink\" title=\"一、开通环境\"></a>一、开通环境</h3><p>进入<a href=\"https://console.cloud.tencent.com/tcb\">云开发 CloudBase 控制台</a>开通CloudBase，腾讯云直接微信扫码登录注册就行。</p>\n<p><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/image_1643350234186.png\" alt=\"image.png\"></p>\n<p>选择vue应用模板；</p>\n<p><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/image_1643350311797.png\" alt=\"image.png\"></p>\n<p>创建环境名称test，计费的话前期有免费额度，然后点击下一步到开通为止。</p>\n<p><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/image_1643350465793.png\" alt=\"image.png\"></p>\n<p>点击应用进入环境总览；</p>\n<p><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/image_1643350571129.png\" alt=\"image.png\"></p>\n<p>后面的话主要会用到的就是当前环境的id；</p>\n<h3 id=\"二、搭建vue前端项目及一键部署\"><a href=\"#二、搭建vue前端项目及一键部署\" class=\"headerlink\" title=\"二、搭建vue前端项目及一键部署\"></a>二、搭建vue前端项目及一键部署</h3><h4 id=\"1、全局安装-CloudBase-CLI\"><a href=\"#1、全局安装-CloudBase-CLI\" class=\"headerlink\" title=\"1、全局安装 CloudBase CLI\"></a>1、全局安装 CloudBase CLI</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g @cloudbase/cli@latest</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2、创建vue项目\"><a href=\"#2、创建vue项目\" class=\"headerlink\" title=\"2、创建vue项目\"></a>2、创建vue项目</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npx vue create vue-hello-world</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3、发布项目\"><a href=\"#3、发布项目\" class=\"headerlink\" title=\"3、发布项目\"></a>3、发布项目</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> vue-hello-world</span><br><span class=\"line\">cloudbase framework deploy -e test-4g5kb8yja12f81fb</span><br><span class=\"line\"></span><br><span class=\"line\">//或者也可以直接输入cloudbase命令回车，test-4g5kb8yja12f81fb 为刚刚创建的环境<span class=\"built_in\">id</span></span><br><span class=\"line\"></span><br><span class=\"line\"> Tip: cloudbase 命令可以简写为 tcb </span><br><span class=\"line\"></span><br><span class=\"line\">CloudBase CLI 1.12.0</span><br><span class=\"line\">CloudBase Framework 1.9.0</span><br><span class=\"line\">   ______ __                   __ ____                             </span><br><span class=\"line\">  / ____// /____   __  __ ____/ // __ ) ____ _ _____ ___           </span><br><span class=\"line\"> / /    / // __ \\ / / / // __  // __  |/ __ `// ___// _ \\          </span><br><span class=\"line\">/ /___ / // /_/ // /_/ // /_/ // /_/ // /_/ /(__  )/  __/          </span><br><span class=\"line\">\\____//_/_\\____/ \\__,_/ \\__,_//_____/ \\__,_//____/ \\___/       __  </span><br><span class=\"line\">   / ____/_____ ____ _ ____ ___   ___  _      __ ____   _____ / /__</span><br><span class=\"line\">  / /_   / ___// __ `// __ `__ \\ / _ \\| | /| / // __ \\ / ___// //_/</span><br><span class=\"line\"> / __/  / /   / /_/ // / / / / //  __/| |/ |/ // /_/ // /   / ,&lt;   </span><br><span class=\"line\">/_/    /_/    \\__,_//_/ /_/ /_/ \\___/ |__/|__/ \\____//_/   /_/|_|  </span><br><span class=\"line\">                                                                   </span><br><span class=\"line\"></span><br><span class=\"line\"> CloudBase Framework  info     Version v1.9.0</span><br><span class=\"line\"> CloudBase Framework  info     Github: https://github.com/Tencent/cloudbase-framework</span><br><span class=\"line\"></span><br><span class=\"line\"> CloudBase Framework  info     EnvId test1-4g5kb8yja12f81fb</span><br><span class=\"line\"> CloudBase Framework  info     Region ap-shanghai</span><br><span class=\"line\">? 请输入应用唯一标识(支持 A-Z a-z 0-9 及 -, 同一环境下不能相同) <span class=\"built_in\">test</span></span><br><span class=\"line\">? 检测到当前项目包含 Vue.js 项目</span><br><span class=\"line\"></span><br><span class=\"line\">  🔨 构建脚本 `npm run build`</span><br><span class=\"line\">  📦 本地静态文件目录 `dist`</span><br><span class=\"line\"></span><br><span class=\"line\">  是否需要修改默认配置 No</span><br><span class=\"line\">? 是否需要保存当前项目配置到项目中 Yes</span><br><span class=\"line\"> CloudBase Framework  info     Validate config file success.</span><br><span class=\"line\"> CloudBase Framework  info     AppName <span class=\"built_in\">test</span></span><br><span class=\"line\"> CloudBase Framework  info     📦 install plugins</span><br><span class=\"line\"> CloudBase Framework  info     callHooks <span class=\"string\">&#x27;preDeploy&#x27;</span> </span><br><span class=\"line\"> CloudBase Framework  info     🔧 init: vue...</span><br><span class=\"line\"> CloudBase Framework  info     Website 插件会自动开启静态网页托管能力，需要当前环境为 [按量计费] 模式</span><br><span class=\"line\"> CloudBase Framework  info     Website 插件会部署应用资源到当前静态托管的 / 目录下</span><br><span class=\"line\"> CloudBase Framework  info     🔨 build: vue...</span><br><span class=\"line\"> CloudBase Framework  info     running <span class=\"string\">&#x27;npm install --prefer-offline --no-audit --progress=false&#x27;</span> </span><br><span class=\"line\"></span><br><span class=\"line\">up to <span class=\"built_in\">date</span> <span class=\"keyword\">in</span> 594ms</span><br><span class=\"line\"></span><br><span class=\"line\">11 packages are looking <span class=\"keyword\">for</span> funding</span><br><span class=\"line\">  run `npm fund` <span class=\"keyword\">for</span> details</span><br><span class=\"line\"> CloudBase Framework  info     running <span class=\"string\">&#x27;npm run build&#x27;</span> </span><br><span class=\"line\"></span><br><span class=\"line\">&gt; vue-hello-world1@0.1.0 build</span><br><span class=\"line\">&gt; vue-cli-service build</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"> DONE  Compiled successfully <span class=\"keyword\">in</span> 1669ms                                                                                      下午2:34:11</span><br><span class=\"line\"></span><br><span class=\"line\">  File                                 Size                                           Gzipped</span><br><span class=\"line\"></span><br><span class=\"line\">  dist/js/chunk-vendors.4102dc7c.js    94.96 KiB                                      34.02 KiB</span><br><span class=\"line\">  dist/js/app.ecf66627.js              4.58 KiB                                       1.63 KiB</span><br><span class=\"line\">  dist/css/app.fb0c6e1c.css            0.33 KiB                                       0.23 KiB</span><br><span class=\"line\"></span><br><span class=\"line\">  Images and other types of assets omitted.</span><br><span class=\"line\"></span><br><span class=\"line\"> DONE  Build complete. The dist directory is ready to be deployed.</span><br><span class=\"line\"> INFO  Check out deployment instructions at https://cli.vuejs.org/guide/deployment.html</span><br><span class=\"line\">      </span><br><span class=\"line\"> CloudBase Framework  info     🧬 compile: vue...</span><br><span class=\"line\"> CloudBase Framework  info     callHooks <span class=\"string\">&#x27;postCompile&#x27;</span> </span><br><span class=\"line\">正在部署[░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░] 100% 100.2 s</span><br><span class=\"line\"> CloudBase Framework  info     🚀 deploy: vue...</span><br><span class=\"line\"> CloudBase Framework  info     🚀 网站部署成功</span><br><span class=\"line\"> CloudBase Framework  info     callHooks <span class=\"string\">&#x27;postDeploy&#x27;</span> </span><br><span class=\"line\"> CloudBase Framework  info     🌐 应用入口信息:</span><br><span class=\"line\">🔗 网站入口: https://test-4g5kb8yja12f81fb-1256759236.tcloudbaseapp.com/</span><br><span class=\"line\"> CloudBase Framework  info     ✨ <span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n\n<p>部署结束后会生成一个访问地址：🔗 网站入口: <a href=\"https://test-4g5kb8yja12f81fb-1256759236.tcloudbaseapp.com/\">https://test-4g5kb8yja12f81fb-1256759236.tcloudbaseapp.com/</a></p>\n<p>复制到浏览器地址栏就直接能访问啦~</p>\n<p><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/image_1643352051889.png\" alt=\"image.png\"></p>\n<h3 id=\"三、配置数据库\"><a href=\"#三、配置数据库\" class=\"headerlink\" title=\"三、配置数据库\"></a>三、配置数据库</h3><p><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/image_1643352786244.png\" alt=\"image.png\"></p>\n<p>新建一个名为test的集合数据库；</p>\n<p><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/image_1643352881859.png\" alt=\"image.png\"></p>\n<p>添加文档(创建表)、添加字段</p>\n<h3 id=\"四、开发项目-前端操作数据库\"><a href=\"#四、开发项目-前端操作数据库\" class=\"headerlink\" title=\"四、开发项目(前端操作数据库)\"></a>四、开发项目(前端操作数据库)</h3><p>进入项目根目录，引入cloudbase依赖</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#npm</span><br><span class=\"line\">npm install @cloudbase/js-sdk -S</span><br><span class=\"line\"># yarn</span><br><span class=\"line\">yarn add @cloudbase/js-sdk</span><br></pre></td></tr></table></figure>\n\n<p>编写查询和新增方法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;insert&quot;</span>&gt;</span>插入一条数据<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\">  <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;search&quot;</span>&gt;</span>查询数据<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\">  <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">v-if</span>=<span class=\"string\">&quot;result&quot;</span>&gt;</span>&#123;&#123;result&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span></span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> cloudbase <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@cloudbase/js-sdk&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> app = cloudbase.<span class=\"title function_\">init</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">env</span>: <span class=\"string\">&quot;test-4g5kb8yja12f81fb&quot;</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"keyword\">const</span> db = app.<span class=\"title function_\">database</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">methods</span>: &#123;</span><br><span class=\"line\">     <span class=\"title function_\">search</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> _this = <span class=\"variable language_\">this</span></span><br><span class=\"line\">      db.<span class=\"title function_\">collection</span>(<span class=\"string\">&quot;test&quot;</span>) <span class=\"comment\">// collection() 方法获取一个集合的引用</span></span><br><span class=\"line\">      .<span class=\"title function_\">get</span>() <span class=\"comment\">// get() 方法会触发网络请求，往数据库取数据</span></span><br><span class=\"line\">      .<span class=\"title function_\">then</span>(<span class=\"keyword\">function</span> (<span class=\"params\">res</span>) &#123;</span><br><span class=\"line\">        _this.<span class=\"property\">result</span> = res</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;,\t\t</span><br><span class=\"line\">    <span class=\"title function_\">insert</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">      db.<span class=\"title function_\">collection</span>(<span class=\"string\">&quot;test&quot;</span>).<span class=\"title function_\">add</span>(&#123;</span><br><span class=\"line\">        <span class=\"attr\">name</span>: <span class=\"string\">&#x27;test&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">password</span>: <span class=\"string\">&#x27;123456&#x27;</span></span><br><span class=\"line\">      &#125;).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">res</span>=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"title function_\">alert</span>( <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(res),<span class=\"string\">&quot;插入成功&quot;</span>)</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<p>本地测试接口调用，发现没有权限 Permission denied</p>\n<p><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/image_1643353831460.png\" alt=\"image.png\"></p>\n<h4 id=\"配置权限\"><a href=\"#配置权限\" class=\"headerlink\" title=\"配置权限\"></a>配置权限</h4><p>进入控制台登录授权<br>官方提供了几种<a href=\"https://docs.cloudbase.net/authentication/auth/introduce\">登录授权</a><br>当前我们使用未登录模式</p>\n<p><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/image_1643354158012.png\" alt=\"image.png\"></p>\n<p>在根目录下public&#x2F;index.html 初始化cloudbase</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;//imgcache.qq.com/qcloud/cloudbase-js-sdk/1.6.0/cloudbase.full.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">const</span> app = cloudbase.<span class=\"title function_\">init</span>(&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"attr\">env</span>: <span class=\"string\">&#x27;test-4g5kb8yja12f81fb&#x27;</span> <span class=\"comment\">// 您的环境id</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>但是这样做还是不能访问到数据库，因为还需要配置数据库的读写权限。<br>进入数据库权限设置。</p>\n<p><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/image_1643354016007.png\" alt=\"image.png\"></p>\n<p>点击右上角切换到安全规则权限设置，按照如下配置</p>\n<p><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/image_1643354464046.png\" alt=\"image.png\"></p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;read&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;doc._openid == auth.uid || auth == null&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;write&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;doc._openid == auth.uid || auth == null&quot;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>此时点击查询数据和查询，就能够顺利调用接口查询到数据了。</p>\n<p><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/image_1643354621900.png\" alt=\"image.png\"></p>\n<h3 id=\"五、发布项目及配置域名\"><a href=\"#五、发布项目及配置域名\" class=\"headerlink\" title=\"五、发布项目及配置域名\"></a>五、发布项目及配置域名</h3><p>在根目录下再次输入命令 cloudbase framework deploy</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cloudbase framework deploy</span><br></pre></td></tr></table></figure>\n<p>cloudbase 又会执行npm run build 打包并发布部署到线上环境。</p>\n<h4 id=\"自定义域名\"><a href=\"#自定义域名\" class=\"headerlink\" title=\"自定义域名\"></a>自定义域名</h4><p>进入静态网站托管，进入详细配置。</p>\n<p><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/image_1643355011560.png\" alt=\"image.png\"></p>\n<p>点击添加域名</p>\n<p><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/image_1643355403629.png\" alt=\"image.png\"></p>\n<p>域名必须为https协议，所以提前准备好带有证书的域名。</p>\n<p><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/image_1643355559005.png\" alt=\"image.png\"></p>\n<p><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/image_1643355656598.png\" alt=\"image.png\"></p>\n<p>还需要配置DNS CNAME记录。</p>\n<p>等待部署成功就可以访问啦~<br><a href=\"https://test.vanterc.com/\">https://test.vanterc.com/</a></p>\n<p><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/image_1643356325651.png\" alt=\"image.png\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>利用腾讯云的serverless技术–<a href=\"https://docs.cloudbase.net/\">cloudbase</a>快速搭建项目到部署发布。<br>作为一个前端开发，很多时候因为没有后端服务的接口和数据库支持而一筹莫展；一想到搭建一个项目，还要购买服务器、配置数据库等等就觉得麻烦；<br>现在，腾讯云提供了一种新的快速上线的云架构，让只会前端的同学也能快速开发一个完整的前后端系统，并且能够支持一键部署，快速上线，低成本、高效率的开发。</p>\n<h2 id=\"搭建环境\"><a href=\"#搭建环境\" class=\"headerlink\" title=\"搭建环境\"></a>搭建环境</h2><h3 id=\"一、开通环境\"><a href=\"#一、开通环境\" class=\"headerlink\" title=\"一、开通环境\"></a>一、开通环境</h3><p>进入<a href=\"https://console.cloud.tencent.com/tcb\">云开发 CloudBase 控制台</a>开通CloudBase，腾讯云直接微信扫码登录注册就行。</p>\n<p><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/image_1643350234186.png\" alt=\"image.png\"></p>\n<p>选择vue应用模板；</p>\n<p><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/image_1643350311797.png\" alt=\"image.png\"></p>\n<p>创建环境名称test，计费的话前期有免费额度，然后点击下一步到开通为止。</p>\n<p><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/image_1643350465793.png\" alt=\"image.png\"></p>\n<p>点击应用进入环境总览；</p>\n<p><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/image_1643350571129.png\" alt=\"image.png\"></p>\n<p>后面的话主要会用到的就是当前环境的id；</p>\n<h3 id=\"二、搭建vue前端项目及一键部署\"><a href=\"#二、搭建vue前端项目及一键部署\" class=\"headerlink\" title=\"二、搭建vue前端项目及一键部署\"></a>二、搭建vue前端项目及一键部署</h3><h4 id=\"1、全局安装-CloudBase-CLI\"><a href=\"#1、全局安装-CloudBase-CLI\" class=\"headerlink\" title=\"1、全局安装 CloudBase CLI\"></a>1、全局安装 CloudBase CLI</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g @cloudbase/cli@latest</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2、创建vue项目\"><a href=\"#2、创建vue项目\" class=\"headerlink\" title=\"2、创建vue项目\"></a>2、创建vue项目</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npx vue create vue-hello-world</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3、发布项目\"><a href=\"#3、发布项目\" class=\"headerlink\" title=\"3、发布项目\"></a>3、发布项目</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> vue-hello-world</span><br><span class=\"line\">cloudbase framework deploy -e test-4g5kb8yja12f81fb</span><br><span class=\"line\"></span><br><span class=\"line\">//或者也可以直接输入cloudbase命令回车，test-4g5kb8yja12f81fb 为刚刚创建的环境<span class=\"built_in\">id</span></span><br><span class=\"line\"></span><br><span class=\"line\"> Tip: cloudbase 命令可以简写为 tcb </span><br><span class=\"line\"></span><br><span class=\"line\">CloudBase CLI 1.12.0</span><br><span class=\"line\">CloudBase Framework 1.9.0</span><br><span class=\"line\">   ______ __                   __ ____                             </span><br><span class=\"line\">  / ____// /____   __  __ ____/ // __ ) ____ _ _____ ___           </span><br><span class=\"line\"> / /    / // __ \\ / / / // __  // __  |/ __ `// ___// _ \\          </span><br><span class=\"line\">/ /___ / // /_/ // /_/ // /_/ // /_/ // /_/ /(__  )/  __/          </span><br><span class=\"line\">\\____//_/_\\____/ \\__,_/ \\__,_//_____/ \\__,_//____/ \\___/       __  </span><br><span class=\"line\">   / ____/_____ ____ _ ____ ___   ___  _      __ ____   _____ / /__</span><br><span class=\"line\">  / /_   / ___// __ `// __ `__ \\ / _ \\| | /| / // __ \\ / ___// //_/</span><br><span class=\"line\"> / __/  / /   / /_/ // / / / / //  __/| |/ |/ // /_/ // /   / ,&lt;   </span><br><span class=\"line\">/_/    /_/    \\__,_//_/ /_/ /_/ \\___/ |__/|__/ \\____//_/   /_/|_|  </span><br><span class=\"line\">                                                                   </span><br><span class=\"line\"></span><br><span class=\"line\"> CloudBase Framework  info     Version v1.9.0</span><br><span class=\"line\"> CloudBase Framework  info     Github: https://github.com/Tencent/cloudbase-framework</span><br><span class=\"line\"></span><br><span class=\"line\"> CloudBase Framework  info     EnvId test1-4g5kb8yja12f81fb</span><br><span class=\"line\"> CloudBase Framework  info     Region ap-shanghai</span><br><span class=\"line\">? 请输入应用唯一标识(支持 A-Z a-z 0-9 及 -, 同一环境下不能相同) <span class=\"built_in\">test</span></span><br><span class=\"line\">? 检测到当前项目包含 Vue.js 项目</span><br><span class=\"line\"></span><br><span class=\"line\">  🔨 构建脚本 `npm run build`</span><br><span class=\"line\">  📦 本地静态文件目录 `dist`</span><br><span class=\"line\"></span><br><span class=\"line\">  是否需要修改默认配置 No</span><br><span class=\"line\">? 是否需要保存当前项目配置到项目中 Yes</span><br><span class=\"line\"> CloudBase Framework  info     Validate config file success.</span><br><span class=\"line\"> CloudBase Framework  info     AppName <span class=\"built_in\">test</span></span><br><span class=\"line\"> CloudBase Framework  info     📦 install plugins</span><br><span class=\"line\"> CloudBase Framework  info     callHooks <span class=\"string\">&#x27;preDeploy&#x27;</span> </span><br><span class=\"line\"> CloudBase Framework  info     🔧 init: vue...</span><br><span class=\"line\"> CloudBase Framework  info     Website 插件会自动开启静态网页托管能力，需要当前环境为 [按量计费] 模式</span><br><span class=\"line\"> CloudBase Framework  info     Website 插件会部署应用资源到当前静态托管的 / 目录下</span><br><span class=\"line\"> CloudBase Framework  info     🔨 build: vue...</span><br><span class=\"line\"> CloudBase Framework  info     running <span class=\"string\">&#x27;npm install --prefer-offline --no-audit --progress=false&#x27;</span> </span><br><span class=\"line\"></span><br><span class=\"line\">up to <span class=\"built_in\">date</span> <span class=\"keyword\">in</span> 594ms</span><br><span class=\"line\"></span><br><span class=\"line\">11 packages are looking <span class=\"keyword\">for</span> funding</span><br><span class=\"line\">  run `npm fund` <span class=\"keyword\">for</span> details</span><br><span class=\"line\"> CloudBase Framework  info     running <span class=\"string\">&#x27;npm run build&#x27;</span> </span><br><span class=\"line\"></span><br><span class=\"line\">&gt; vue-hello-world1@0.1.0 build</span><br><span class=\"line\">&gt; vue-cli-service build</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"> DONE  Compiled successfully <span class=\"keyword\">in</span> 1669ms                                                                                      下午2:34:11</span><br><span class=\"line\"></span><br><span class=\"line\">  File                                 Size                                           Gzipped</span><br><span class=\"line\"></span><br><span class=\"line\">  dist/js/chunk-vendors.4102dc7c.js    94.96 KiB                                      34.02 KiB</span><br><span class=\"line\">  dist/js/app.ecf66627.js              4.58 KiB                                       1.63 KiB</span><br><span class=\"line\">  dist/css/app.fb0c6e1c.css            0.33 KiB                                       0.23 KiB</span><br><span class=\"line\"></span><br><span class=\"line\">  Images and other types of assets omitted.</span><br><span class=\"line\"></span><br><span class=\"line\"> DONE  Build complete. The dist directory is ready to be deployed.</span><br><span class=\"line\"> INFO  Check out deployment instructions at https://cli.vuejs.org/guide/deployment.html</span><br><span class=\"line\">      </span><br><span class=\"line\"> CloudBase Framework  info     🧬 compile: vue...</span><br><span class=\"line\"> CloudBase Framework  info     callHooks <span class=\"string\">&#x27;postCompile&#x27;</span> </span><br><span class=\"line\">正在部署[░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░] 100% 100.2 s</span><br><span class=\"line\"> CloudBase Framework  info     🚀 deploy: vue...</span><br><span class=\"line\"> CloudBase Framework  info     🚀 网站部署成功</span><br><span class=\"line\"> CloudBase Framework  info     callHooks <span class=\"string\">&#x27;postDeploy&#x27;</span> </span><br><span class=\"line\"> CloudBase Framework  info     🌐 应用入口信息:</span><br><span class=\"line\">🔗 网站入口: https://test-4g5kb8yja12f81fb-1256759236.tcloudbaseapp.com/</span><br><span class=\"line\"> CloudBase Framework  info     ✨ <span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n\n<p>部署结束后会生成一个访问地址：🔗 网站入口: <a href=\"https://test-4g5kb8yja12f81fb-1256759236.tcloudbaseapp.com/\">https://test-4g5kb8yja12f81fb-1256759236.tcloudbaseapp.com/</a></p>\n<p>复制到浏览器地址栏就直接能访问啦~</p>\n<p><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/image_1643352051889.png\" alt=\"image.png\"></p>\n<h3 id=\"三、配置数据库\"><a href=\"#三、配置数据库\" class=\"headerlink\" title=\"三、配置数据库\"></a>三、配置数据库</h3><p><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/image_1643352786244.png\" alt=\"image.png\"></p>\n<p>新建一个名为test的集合数据库；</p>\n<p><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/image_1643352881859.png\" alt=\"image.png\"></p>\n<p>添加文档(创建表)、添加字段</p>\n<h3 id=\"四、开发项目-前端操作数据库\"><a href=\"#四、开发项目-前端操作数据库\" class=\"headerlink\" title=\"四、开发项目(前端操作数据库)\"></a>四、开发项目(前端操作数据库)</h3><p>进入项目根目录，引入cloudbase依赖</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#npm</span><br><span class=\"line\">npm install @cloudbase/js-sdk -S</span><br><span class=\"line\"># yarn</span><br><span class=\"line\">yarn add @cloudbase/js-sdk</span><br></pre></td></tr></table></figure>\n\n<p>编写查询和新增方法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;insert&quot;</span>&gt;</span>插入一条数据<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\">  <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;search&quot;</span>&gt;</span>查询数据<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\">  <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">v-if</span>=<span class=\"string\">&quot;result&quot;</span>&gt;</span>&#123;&#123;result&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span></span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> cloudbase <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@cloudbase/js-sdk&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> app = cloudbase.<span class=\"title function_\">init</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">env</span>: <span class=\"string\">&quot;test-4g5kb8yja12f81fb&quot;</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"keyword\">const</span> db = app.<span class=\"title function_\">database</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">methods</span>: &#123;</span><br><span class=\"line\">     <span class=\"title function_\">search</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> _this = <span class=\"variable language_\">this</span></span><br><span class=\"line\">      db.<span class=\"title function_\">collection</span>(<span class=\"string\">&quot;test&quot;</span>) <span class=\"comment\">// collection() 方法获取一个集合的引用</span></span><br><span class=\"line\">      .<span class=\"title function_\">get</span>() <span class=\"comment\">// get() 方法会触发网络请求，往数据库取数据</span></span><br><span class=\"line\">      .<span class=\"title function_\">then</span>(<span class=\"keyword\">function</span> (<span class=\"params\">res</span>) &#123;</span><br><span class=\"line\">        _this.<span class=\"property\">result</span> = res</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;,\t\t</span><br><span class=\"line\">    <span class=\"title function_\">insert</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">      db.<span class=\"title function_\">collection</span>(<span class=\"string\">&quot;test&quot;</span>).<span class=\"title function_\">add</span>(&#123;</span><br><span class=\"line\">        <span class=\"attr\">name</span>: <span class=\"string\">&#x27;test&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">password</span>: <span class=\"string\">&#x27;123456&#x27;</span></span><br><span class=\"line\">      &#125;).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">res</span>=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"title function_\">alert</span>( <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(res),<span class=\"string\">&quot;插入成功&quot;</span>)</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<p>本地测试接口调用，发现没有权限 Permission denied</p>\n<p><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/image_1643353831460.png\" alt=\"image.png\"></p>\n<h4 id=\"配置权限\"><a href=\"#配置权限\" class=\"headerlink\" title=\"配置权限\"></a>配置权限</h4><p>进入控制台登录授权<br>官方提供了几种<a href=\"https://docs.cloudbase.net/authentication/auth/introduce\">登录授权</a><br>当前我们使用未登录模式</p>\n<p><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/image_1643354158012.png\" alt=\"image.png\"></p>\n<p>在根目录下public&#x2F;index.html 初始化cloudbase</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;//imgcache.qq.com/qcloud/cloudbase-js-sdk/1.6.0/cloudbase.full.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">const</span> app = cloudbase.<span class=\"title function_\">init</span>(&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"attr\">env</span>: <span class=\"string\">&#x27;test-4g5kb8yja12f81fb&#x27;</span> <span class=\"comment\">// 您的环境id</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>但是这样做还是不能访问到数据库，因为还需要配置数据库的读写权限。<br>进入数据库权限设置。</p>\n<p><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/image_1643354016007.png\" alt=\"image.png\"></p>\n<p>点击右上角切换到安全规则权限设置，按照如下配置</p>\n<p><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/image_1643354464046.png\" alt=\"image.png\"></p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;read&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;doc._openid == auth.uid || auth == null&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;write&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;doc._openid == auth.uid || auth == null&quot;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>此时点击查询数据和查询，就能够顺利调用接口查询到数据了。</p>\n<p><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/image_1643354621900.png\" alt=\"image.png\"></p>\n<h3 id=\"五、发布项目及配置域名\"><a href=\"#五、发布项目及配置域名\" class=\"headerlink\" title=\"五、发布项目及配置域名\"></a>五、发布项目及配置域名</h3><p>在根目录下再次输入命令 cloudbase framework deploy</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cloudbase framework deploy</span><br></pre></td></tr></table></figure>\n<p>cloudbase 又会执行npm run build 打包并发布部署到线上环境。</p>\n<h4 id=\"自定义域名\"><a href=\"#自定义域名\" class=\"headerlink\" title=\"自定义域名\"></a>自定义域名</h4><p>进入静态网站托管，进入详细配置。</p>\n<p><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/image_1643355011560.png\" alt=\"image.png\"></p>\n<p>点击添加域名</p>\n<p><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/image_1643355403629.png\" alt=\"image.png\"></p>\n<p>域名必须为https协议，所以提前准备好带有证书的域名。</p>\n<p><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/image_1643355559005.png\" alt=\"image.png\"></p>\n<p><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/image_1643355656598.png\" alt=\"image.png\"></p>\n<p>还需要配置DNS CNAME记录。</p>\n<p>等待部署成功就可以访问啦~<br><a href=\"https://test.vanterc.com/\">https://test.vanterc.com/</a></p>\n<p><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/image_1643356325651.png\" alt=\"image.png\"></p>\n"},{"title":"vue项目启用压缩gzip","date":"2021-04-06T03:19:00.000Z","_content":"## 1、项目中配置\nVue-cli3.0项目\n安装依赖：compression-webpack-plugin\n```bash\nnpm install compression-webpack-plugin --save-dev\n```\n\n```javascript\nconst CompressionPlugin = require('compression-webpack-plugin');  \nconst productionGzipExtensions = /\\.(js|css|json|txt|html|ico|svg)(\\?.*)?$/i;  \nmodule.exports = {\n    publicPath: './',\n    productionSourceMap: false,\n    configureWebpack: {...},\n    chainWebpack: config => {\n        config.resolve.alias.set('@', resolve('src'));\n        if (process.env.NODE_ENV === 'production') {\n            config.plugin('compressionPlugin')\n            .use(new CompressionPlugin({\n                filename: '[path].gz[query]',\n                algorithm: 'gzip',\n                test: productionGzipExtensions,\n                threshold: 10240,\n                minRatio: 0.8,\n                deleteOriginalAssets: true\n            }));\n        }\n    },\n};\n\n```\n## 2、nginx配置\n服务器启用gzip\n/etc/nginx/nginx.config\n```bash\ngzip on;  \ngzip_static on;  \ngzip_min_length 1k;  \ngzip_buffers 4 32k;  \ngzip_http_version 1.1;  \ngzip_comp_level 2;  \ngzip_types text/plain application/x-javascript text/css application/xml;  \ngzip_vary on;  \ngzip_disable \"MSIE [1-6].\";\n\n```\n然后重启服务器 nginx -s reload\ngzip使用环境:http,server,location,if(x),一般把它定义在nginx.conf的http{…..}之间\n　　gzip on\n　　on为启用，off为关闭\n　　gzip_min_length 1k\n　　设置允许压缩的页面最小字节数，页面字节数从header头中的Content-Length中进行获取。默认值是0，不管页面多大都压缩。建议设置成大于1k的字节数，小于1k可能会越压越大。\n　　gzip_buffers 4 16k\n　　获取多少内存用于缓存压缩结果，‘4 16k’表示以16k*4为单位获得\n　　gzip_comp_level 5\n　　gzip压缩比（1~9），越小压缩效果越差，但是越大处理越慢，所以一般取中间值;\n　　gzip_types text/plain application/x-javascript text/css application/xml text/javascript application/x-httpd-php\n　　对特定的MIME类型生效,其中'text/html’被系统强制启用\n　　gzip_http_version 1.1\n　　识别http协议的版本,早起浏览器可能不支持gzip自解压,用户会看到乱码\n　　gzip_vary on\n　　启用应答头\"Vary: Accept-Encoding\"\n　　gzip_proxied off\n　　nginx做为反向代理时启用,off(关闭所有代理结果的数据的压缩),expired(启用压缩,如果header头中包括\"Expires\"头信息),no-cache(启用压缩,header头中包含\"Cache-Control:no-cache\"),no-store(启用压缩,header头中包含\"Cache-Control:no-store\"),private(启用压缩,header头中包含\"Cache-Control:private\"),no_last_modefied(启用压缩,header头中不包含\"Last-Modified\"),no_etag(启用压缩,如果header头中不包含\"Etag\"头信息),auth(启用压缩,如果header头中包含\"Authorization\"头信息)\n　　gzip_disable msie6\n　　IE5.5和IE6 SP1使用msie6参数来禁止gzip压缩 )指定哪些不需要gzip压缩的浏览器(将和User-Agents进行匹配),依赖于PCRE库\n注：（gzip_static on）Nginx的动态压缩是对每个请求先压缩再输出，这样造成虚拟机浪费了很多cpu，解决这个问题可以利用nginx模块Gzip Precompression，这个模块的作用是对于需要压缩的文件，直接读取已经压缩好的文件(文件名为加.gz)，而不是动态压缩，对于不支持gzip的请求则读取原文件。\n　　1.文件可以使用 gzip 命令来进行压缩，或任何其他兼容的命令。\n　　2.gzip_static配置优先级高于gzip。\n　　3.开启nginx_static后，对于任何文件都会先查找是否有对应的gz文件。\n　　4.gzip_types设置对gzip_static无效。\n　　5.gzip static默认适用HTTP 1.1。\n参考：https://www.cnblogs.com/zigood/p/12504401.html","source":"_posts/vue项目启用压缩gzip.md","raw":"---\ntitle: vue项目启用压缩gzip\ndate: 2021-04-06 11:19\ntags:\n---\n## 1、项目中配置\nVue-cli3.0项目\n安装依赖：compression-webpack-plugin\n```bash\nnpm install compression-webpack-plugin --save-dev\n```\n\n```javascript\nconst CompressionPlugin = require('compression-webpack-plugin');  \nconst productionGzipExtensions = /\\.(js|css|json|txt|html|ico|svg)(\\?.*)?$/i;  \nmodule.exports = {\n    publicPath: './',\n    productionSourceMap: false,\n    configureWebpack: {...},\n    chainWebpack: config => {\n        config.resolve.alias.set('@', resolve('src'));\n        if (process.env.NODE_ENV === 'production') {\n            config.plugin('compressionPlugin')\n            .use(new CompressionPlugin({\n                filename: '[path].gz[query]',\n                algorithm: 'gzip',\n                test: productionGzipExtensions,\n                threshold: 10240,\n                minRatio: 0.8,\n                deleteOriginalAssets: true\n            }));\n        }\n    },\n};\n\n```\n## 2、nginx配置\n服务器启用gzip\n/etc/nginx/nginx.config\n```bash\ngzip on;  \ngzip_static on;  \ngzip_min_length 1k;  \ngzip_buffers 4 32k;  \ngzip_http_version 1.1;  \ngzip_comp_level 2;  \ngzip_types text/plain application/x-javascript text/css application/xml;  \ngzip_vary on;  \ngzip_disable \"MSIE [1-6].\";\n\n```\n然后重启服务器 nginx -s reload\ngzip使用环境:http,server,location,if(x),一般把它定义在nginx.conf的http{…..}之间\n　　gzip on\n　　on为启用，off为关闭\n　　gzip_min_length 1k\n　　设置允许压缩的页面最小字节数，页面字节数从header头中的Content-Length中进行获取。默认值是0，不管页面多大都压缩。建议设置成大于1k的字节数，小于1k可能会越压越大。\n　　gzip_buffers 4 16k\n　　获取多少内存用于缓存压缩结果，‘4 16k’表示以16k*4为单位获得\n　　gzip_comp_level 5\n　　gzip压缩比（1~9），越小压缩效果越差，但是越大处理越慢，所以一般取中间值;\n　　gzip_types text/plain application/x-javascript text/css application/xml text/javascript application/x-httpd-php\n　　对特定的MIME类型生效,其中'text/html’被系统强制启用\n　　gzip_http_version 1.1\n　　识别http协议的版本,早起浏览器可能不支持gzip自解压,用户会看到乱码\n　　gzip_vary on\n　　启用应答头\"Vary: Accept-Encoding\"\n　　gzip_proxied off\n　　nginx做为反向代理时启用,off(关闭所有代理结果的数据的压缩),expired(启用压缩,如果header头中包括\"Expires\"头信息),no-cache(启用压缩,header头中包含\"Cache-Control:no-cache\"),no-store(启用压缩,header头中包含\"Cache-Control:no-store\"),private(启用压缩,header头中包含\"Cache-Control:private\"),no_last_modefied(启用压缩,header头中不包含\"Last-Modified\"),no_etag(启用压缩,如果header头中不包含\"Etag\"头信息),auth(启用压缩,如果header头中包含\"Authorization\"头信息)\n　　gzip_disable msie6\n　　IE5.5和IE6 SP1使用msie6参数来禁止gzip压缩 )指定哪些不需要gzip压缩的浏览器(将和User-Agents进行匹配),依赖于PCRE库\n注：（gzip_static on）Nginx的动态压缩是对每个请求先压缩再输出，这样造成虚拟机浪费了很多cpu，解决这个问题可以利用nginx模块Gzip Precompression，这个模块的作用是对于需要压缩的文件，直接读取已经压缩好的文件(文件名为加.gz)，而不是动态压缩，对于不支持gzip的请求则读取原文件。\n　　1.文件可以使用 gzip 命令来进行压缩，或任何其他兼容的命令。\n　　2.gzip_static配置优先级高于gzip。\n　　3.开启nginx_static后，对于任何文件都会先查找是否有对应的gz文件。\n　　4.gzip_types设置对gzip_static无效。\n　　5.gzip static默认适用HTTP 1.1。\n参考：https://www.cnblogs.com/zigood/p/12504401.html","slug":"vue项目启用压缩gzip","published":1,"updated":"2022-08-30T07:40:20.341Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7g2c7fz00047qu59ex030sj","content":"<h2 id=\"1、项目中配置\"><a href=\"#1、项目中配置\" class=\"headerlink\" title=\"1、项目中配置\"></a>1、项目中配置</h2><p>Vue-cli3.0项目<br>安装依赖：compression-webpack-plugin</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install compression-webpack-plugin --save-dev</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">CompressionPlugin</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;compression-webpack-plugin&#x27;</span>);  </span><br><span class=\"line\"><span class=\"keyword\">const</span> productionGzipExtensions = <span class=\"regexp\">/\\.(js|css|json|txt|html|ico|svg)(\\?.*)?$/i</span>;  </span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">publicPath</span>: <span class=\"string\">&#x27;./&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">productionSourceMap</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"attr\">configureWebpack</span>: &#123;...&#125;,</span><br><span class=\"line\">    <span class=\"attr\">chainWebpack</span>: <span class=\"function\"><span class=\"params\">config</span> =&gt;</span> &#123;</span><br><span class=\"line\">        config.<span class=\"property\">resolve</span>.<span class=\"property\">alias</span>.<span class=\"title function_\">set</span>(<span class=\"string\">&#x27;@&#x27;</span>, <span class=\"title function_\">resolve</span>(<span class=\"string\">&#x27;src&#x27;</span>));</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (process.<span class=\"property\">env</span>.<span class=\"property\">NODE_ENV</span> === <span class=\"string\">&#x27;production&#x27;</span>) &#123;</span><br><span class=\"line\">            config.<span class=\"title function_\">plugin</span>(<span class=\"string\">&#x27;compressionPlugin&#x27;</span>)</span><br><span class=\"line\">            .<span class=\"title function_\">use</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">CompressionPlugin</span>(&#123;</span><br><span class=\"line\">                <span class=\"attr\">filename</span>: <span class=\"string\">&#x27;[path].gz[query]&#x27;</span>,</span><br><span class=\"line\">                <span class=\"attr\">algorithm</span>: <span class=\"string\">&#x27;gzip&#x27;</span>,</span><br><span class=\"line\">                <span class=\"attr\">test</span>: productionGzipExtensions,</span><br><span class=\"line\">                <span class=\"attr\">threshold</span>: <span class=\"number\">10240</span>,</span><br><span class=\"line\">                <span class=\"attr\">minRatio</span>: <span class=\"number\">0.8</span>,</span><br><span class=\"line\">                <span class=\"attr\">deleteOriginalAssets</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">            &#125;));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"2、nginx配置\"><a href=\"#2、nginx配置\" class=\"headerlink\" title=\"2、nginx配置\"></a>2、nginx配置</h2><p>服务器启用gzip<br>&#x2F;etc&#x2F;nginx&#x2F;nginx.config</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gzip on;  </span><br><span class=\"line\">gzip_static on;  </span><br><span class=\"line\">gzip_min_length 1k;  </span><br><span class=\"line\">gzip_buffers 4 32k;  </span><br><span class=\"line\">gzip_http_version 1.1;  </span><br><span class=\"line\">gzip_comp_level 2;  </span><br><span class=\"line\">gzip_types text/plain application/x-javascript text/css application/xml;  </span><br><span class=\"line\">gzip_vary on;  </span><br><span class=\"line\">gzip_disable <span class=\"string\">&quot;MSIE [1-6].&quot;</span>;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>然后重启服务器 nginx -s reload<br>gzip使用环境:http,server,location,if(x),一般把它定义在nginx.conf的http{…..}之间<br>　　gzip on<br>　　on为启用，off为关闭<br>　　gzip_min_length 1k<br>　　设置允许压缩的页面最小字节数，页面字节数从header头中的Content-Length中进行获取。默认值是0，不管页面多大都压缩。建议设置成大于1k的字节数，小于1k可能会越压越大。<br>　　gzip_buffers 4 16k<br>　　获取多少内存用于缓存压缩结果，‘4 16k’表示以16k*4为单位获得<br>　　gzip_comp_level 5<br>　　gzip压缩比（1~9），越小压缩效果越差，但是越大处理越慢，所以一般取中间值;<br>　　gzip_types text&#x2F;plain application&#x2F;x-javascript text&#x2F;css application&#x2F;xml text&#x2F;javascript application&#x2F;x-httpd-php<br>　　对特定的MIME类型生效,其中’text&#x2F;html’被系统强制启用<br>　　gzip_http_version 1.1<br>　　识别http协议的版本,早起浏览器可能不支持gzip自解压,用户会看到乱码<br>　　gzip_vary on<br>　　启用应答头”Vary: Accept-Encoding”<br>　　gzip_proxied off<br>　　nginx做为反向代理时启用,off(关闭所有代理结果的数据的压缩),expired(启用压缩,如果header头中包括”Expires”头信息),no-cache(启用压缩,header头中包含”Cache-Control:no-cache”),no-store(启用压缩,header头中包含”Cache-Control:no-store”),private(启用压缩,header头中包含”Cache-Control:private”),no_last_modefied(启用压缩,header头中不包含”Last-Modified”),no_etag(启用压缩,如果header头中不包含”Etag”头信息),auth(启用压缩,如果header头中包含”Authorization”头信息)<br>　　gzip_disable msie6<br>　　IE5.5和IE6 SP1使用msie6参数来禁止gzip压缩 )指定哪些不需要gzip压缩的浏览器(将和User-Agents进行匹配),依赖于PCRE库<br>注：（gzip_static on）Nginx的动态压缩是对每个请求先压缩再输出，这样造成虚拟机浪费了很多cpu，解决这个问题可以利用nginx模块Gzip Precompression，这个模块的作用是对于需要压缩的文件，直接读取已经压缩好的文件(文件名为加.gz)，而不是动态压缩，对于不支持gzip的请求则读取原文件。<br>　　1.文件可以使用 gzip 命令来进行压缩，或任何其他兼容的命令。<br>　　2.gzip_static配置优先级高于gzip。<br>　　3.开启nginx_static后，对于任何文件都会先查找是否有对应的gz文件。<br>　　4.gzip_types设置对gzip_static无效。<br>　　5.gzip static默认适用HTTP 1.1。<br>参考：<a href=\"https://www.cnblogs.com/zigood/p/12504401.html\">https://www.cnblogs.com/zigood/p/12504401.html</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1、项目中配置\"><a href=\"#1、项目中配置\" class=\"headerlink\" title=\"1、项目中配置\"></a>1、项目中配置</h2><p>Vue-cli3.0项目<br>安装依赖：compression-webpack-plugin</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install compression-webpack-plugin --save-dev</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">CompressionPlugin</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;compression-webpack-plugin&#x27;</span>);  </span><br><span class=\"line\"><span class=\"keyword\">const</span> productionGzipExtensions = <span class=\"regexp\">/\\.(js|css|json|txt|html|ico|svg)(\\?.*)?$/i</span>;  </span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">publicPath</span>: <span class=\"string\">&#x27;./&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">productionSourceMap</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"attr\">configureWebpack</span>: &#123;...&#125;,</span><br><span class=\"line\">    <span class=\"attr\">chainWebpack</span>: <span class=\"function\"><span class=\"params\">config</span> =&gt;</span> &#123;</span><br><span class=\"line\">        config.<span class=\"property\">resolve</span>.<span class=\"property\">alias</span>.<span class=\"title function_\">set</span>(<span class=\"string\">&#x27;@&#x27;</span>, <span class=\"title function_\">resolve</span>(<span class=\"string\">&#x27;src&#x27;</span>));</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (process.<span class=\"property\">env</span>.<span class=\"property\">NODE_ENV</span> === <span class=\"string\">&#x27;production&#x27;</span>) &#123;</span><br><span class=\"line\">            config.<span class=\"title function_\">plugin</span>(<span class=\"string\">&#x27;compressionPlugin&#x27;</span>)</span><br><span class=\"line\">            .<span class=\"title function_\">use</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">CompressionPlugin</span>(&#123;</span><br><span class=\"line\">                <span class=\"attr\">filename</span>: <span class=\"string\">&#x27;[path].gz[query]&#x27;</span>,</span><br><span class=\"line\">                <span class=\"attr\">algorithm</span>: <span class=\"string\">&#x27;gzip&#x27;</span>,</span><br><span class=\"line\">                <span class=\"attr\">test</span>: productionGzipExtensions,</span><br><span class=\"line\">                <span class=\"attr\">threshold</span>: <span class=\"number\">10240</span>,</span><br><span class=\"line\">                <span class=\"attr\">minRatio</span>: <span class=\"number\">0.8</span>,</span><br><span class=\"line\">                <span class=\"attr\">deleteOriginalAssets</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">            &#125;));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"2、nginx配置\"><a href=\"#2、nginx配置\" class=\"headerlink\" title=\"2、nginx配置\"></a>2、nginx配置</h2><p>服务器启用gzip<br>&#x2F;etc&#x2F;nginx&#x2F;nginx.config</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gzip on;  </span><br><span class=\"line\">gzip_static on;  </span><br><span class=\"line\">gzip_min_length 1k;  </span><br><span class=\"line\">gzip_buffers 4 32k;  </span><br><span class=\"line\">gzip_http_version 1.1;  </span><br><span class=\"line\">gzip_comp_level 2;  </span><br><span class=\"line\">gzip_types text/plain application/x-javascript text/css application/xml;  </span><br><span class=\"line\">gzip_vary on;  </span><br><span class=\"line\">gzip_disable <span class=\"string\">&quot;MSIE [1-6].&quot;</span>;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>然后重启服务器 nginx -s reload<br>gzip使用环境:http,server,location,if(x),一般把它定义在nginx.conf的http{…..}之间<br>　　gzip on<br>　　on为启用，off为关闭<br>　　gzip_min_length 1k<br>　　设置允许压缩的页面最小字节数，页面字节数从header头中的Content-Length中进行获取。默认值是0，不管页面多大都压缩。建议设置成大于1k的字节数，小于1k可能会越压越大。<br>　　gzip_buffers 4 16k<br>　　获取多少内存用于缓存压缩结果，‘4 16k’表示以16k*4为单位获得<br>　　gzip_comp_level 5<br>　　gzip压缩比（1~9），越小压缩效果越差，但是越大处理越慢，所以一般取中间值;<br>　　gzip_types text&#x2F;plain application&#x2F;x-javascript text&#x2F;css application&#x2F;xml text&#x2F;javascript application&#x2F;x-httpd-php<br>　　对特定的MIME类型生效,其中’text&#x2F;html’被系统强制启用<br>　　gzip_http_version 1.1<br>　　识别http协议的版本,早起浏览器可能不支持gzip自解压,用户会看到乱码<br>　　gzip_vary on<br>　　启用应答头”Vary: Accept-Encoding”<br>　　gzip_proxied off<br>　　nginx做为反向代理时启用,off(关闭所有代理结果的数据的压缩),expired(启用压缩,如果header头中包括”Expires”头信息),no-cache(启用压缩,header头中包含”Cache-Control:no-cache”),no-store(启用压缩,header头中包含”Cache-Control:no-store”),private(启用压缩,header头中包含”Cache-Control:private”),no_last_modefied(启用压缩,header头中不包含”Last-Modified”),no_etag(启用压缩,如果header头中不包含”Etag”头信息),auth(启用压缩,如果header头中包含”Authorization”头信息)<br>　　gzip_disable msie6<br>　　IE5.5和IE6 SP1使用msie6参数来禁止gzip压缩 )指定哪些不需要gzip压缩的浏览器(将和User-Agents进行匹配),依赖于PCRE库<br>注：（gzip_static on）Nginx的动态压缩是对每个请求先压缩再输出，这样造成虚拟机浪费了很多cpu，解决这个问题可以利用nginx模块Gzip Precompression，这个模块的作用是对于需要压缩的文件，直接读取已经压缩好的文件(文件名为加.gz)，而不是动态压缩，对于不支持gzip的请求则读取原文件。<br>　　1.文件可以使用 gzip 命令来进行压缩，或任何其他兼容的命令。<br>　　2.gzip_static配置优先级高于gzip。<br>　　3.开启nginx_static后，对于任何文件都会先查找是否有对应的gz文件。<br>　　4.gzip_types设置对gzip_static无效。<br>　　5.gzip static默认适用HTTP 1.1。<br>参考：<a href=\"https://www.cnblogs.com/zigood/p/12504401.html\">https://www.cnblogs.com/zigood/p/12504401.html</a></p>\n"},{"title":"egg 写一个最简单的token登陆验证","date":"2021-02-25T10:32:00.000Z","_content":"\n# egg 写一个最简单的token登陆验证\n\n首先看完整的目录结构\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/egg1.png)\n主要实现的功能是通过账号密码登录获取token，再通过token来获取用户信息，一共两个接口：登陆接口和获取用户信息接口。\n上一篇文章已经写到了如何写一个最简单的获取mysql用户信息的接口，现在直接在上一篇文章的基础上做token验证登陆。\n\n\nmysql数据库准备好数据\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/egg2.png)\n\n\n\n\n1、安装jwt依赖和解决跨域、白名单egg-cors\n```bash\nnpm i egg-jwt --save\nnpm i egg-cors --save\n```\n2、config/config.default.js\n```javascript\n\nmodule.exports = {\n  // 配置需要的中间件，数组顺序即为中间件的加载顺序\n  // middleware: [ 'jwt' ],\n\n  keys: '123456790',\n  mysql: {\n    // 单数据库信息配置\n    client: {\n      // host\n      host: '38.130.21.169',\n      // 端口号\n      port: '3306',\n      // 用户名\n      user: 'root',\n      // 密码\n      password: 'yourpassword',\n      // 数据库名\n      database: 'database',\n    },\n    // 是否加载到 app 上，默认开启\n    app: true,\n    // 是否加载到 agent 上，默认关闭\n    agent: false,\n  },\n  jwt: {\n    secret: \"123456\"\n  },\n  security: {\n    csrf: {\n      enable: false,\n      ignoreJSON: true\n    },\n    domainWhiteList: ['http://localhost:7001'],//允许访问接口的白名单\n  },\n  cors: {\n    origin:'*', // 解决跨域问题\n    allowMethods: 'GET,HEAD,PUT,POST,DELETE,PATCH'\n  },\n  cluster: {\n    listen: {\n      port: 7001, // 监听端口\n      // hostname: '127.0.0.1', // 不建议设置 hostname 为 '0.0.0.0'，它将允许来自外部网络和来源的连接，请在知晓风险的情况下使用\n      // path: '/var/run/egg.sock',\n    }\n  }\n};\n```\n3、config/plugin.js\n```javascript\nmodule.exports = {\n  mysql: {\n    enable: true,\n    package: 'egg-mysql',\n  },\n  jwt: {\n    enable: true,\n    package: 'egg-jwt',\n  },\n  cors: {\n    enable: true,\n    package: 'egg-cors',\n  },\n};\n```\n4、app/router.js 定义登陆路由\n```javascript\nmodule.exports = app => {\n  const { router, controller, middleware} = app;\n  const jwtErr = middleware.jwtErr(app.config.jwt)\n  \n  router.get('/api/getUser', jwtErr, controller.user.getUser);\n  router.post('/api/login', controller.login.login);\n};\n```\n在获取用户信息接口上使用中间件\n\n\n5、middleware/jwtErr.js 定义一个jwt中间件 访问路由的时候会通过这个中间件来处理\n```javascript\nmodule.exports = (options, app) => {\n  return async function jwtErr(ctx, next) {\n    const token = ctx.request.header.token;\n    if(token){\n      try {\n        ctx.app.jwt.verify(token, options.secret); // 验证token \n        await next();\n      } catch (error) {\n        ctx.status = 401;\n          ctx.body = {\n              massage: 'token已过期，请重新登录',\n              code: -1,\n          }\n          return;\n      }\n    } else {\n      ctx.status = 401;\n      ctx.body = {\n        message: 'token不存在',\n      };\n      return;\n    }\n  }\n}\n```\n接口先去header判断是否存在token，存在就验证，不存在就返回信息。\n\n\n6、controller/login.js 登陆控制器 \n```javascript\nconst Controller = require('egg').Controller;\n\nclass LoginController extends Controller {\n  async login() {\n    const { ctx, app } = this;\n    const { userName, password } = ctx.request.body;\n    const { result } = await ctx.service.login.login(userName, password);\n\n    if(result.length>0){\n      \n      const token = app.jwt.sign({\n        'userName': userName, //需要存储的 token 数据\n      }, app.config.jwt.secret, { expiresIn: '2m' }); // 2分钟token过期\n      \n      ctx.set({'token':token})//设置headers\n      ctx.body = {\n        code: '200',\n        data: [{\n          token: token,\n          userName: result[0].userName,\n          userId: result[0].userId\n        }],\n        message: 'success'\n      };\n\n    }else{\n\n      ctx.body = {\n        code: '401',\n        data: result,\n        message: '账号或密码错误'\n      };\n\n    }\n  }\n}\n\nmodule.exports = LoginController;\n```\n将用户名信息存储在token数据中，并且设置2分钟token过期。当token和用户名密码验证成功，返回token和用户信息。\n\n\n7、service/login.js \n```javascript\nconst Service = require('egg').Service;\nconst crypto = require('crypto');\n\nclass LoginService extends Service {\n  getMd5Data(data) {\n    return crypto.createHash('md5').update(data).digest('hex');\n  }\n\n  async login(username,password) {\n    const psd = this.getMd5Data(password)\n    const data = await this.app.mysql.query(`SELECT * FROM user WHERE userName='${username}' and password='${psd}'`);\n    const result = JSON.parse( JSON.stringify(data)); // 去除node中mysql查询数据产生的RowDataPacket\n    return { result };\n  }\n}\n\nmodule.exports = LoginService;\n```\nmd5加密后查询匹配数据库密码。\n# 验证\npostman调用 post请求 填写用户名和密码获取token\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/egg3.png)\n通过拿到的token放入header请求用户信息\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/egg4.png)\ntoken不存在的情况\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/egg5.png)\n\n\ntoken过期的情况\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/egg6.png)\n\n\n账号密码错误的情况\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/egg7.png)\n","source":"_posts/egg写一个最简单的token登陆验证.md","raw":"---\ntitle: egg 写一个最简单的token登陆验证\ndate: 2021-02-25 18:32\ntags:\n---\n\n# egg 写一个最简单的token登陆验证\n\n首先看完整的目录结构\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/egg1.png)\n主要实现的功能是通过账号密码登录获取token，再通过token来获取用户信息，一共两个接口：登陆接口和获取用户信息接口。\n上一篇文章已经写到了如何写一个最简单的获取mysql用户信息的接口，现在直接在上一篇文章的基础上做token验证登陆。\n\n\nmysql数据库准备好数据\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/egg2.png)\n\n\n\n\n1、安装jwt依赖和解决跨域、白名单egg-cors\n```bash\nnpm i egg-jwt --save\nnpm i egg-cors --save\n```\n2、config/config.default.js\n```javascript\n\nmodule.exports = {\n  // 配置需要的中间件，数组顺序即为中间件的加载顺序\n  // middleware: [ 'jwt' ],\n\n  keys: '123456790',\n  mysql: {\n    // 单数据库信息配置\n    client: {\n      // host\n      host: '38.130.21.169',\n      // 端口号\n      port: '3306',\n      // 用户名\n      user: 'root',\n      // 密码\n      password: 'yourpassword',\n      // 数据库名\n      database: 'database',\n    },\n    // 是否加载到 app 上，默认开启\n    app: true,\n    // 是否加载到 agent 上，默认关闭\n    agent: false,\n  },\n  jwt: {\n    secret: \"123456\"\n  },\n  security: {\n    csrf: {\n      enable: false,\n      ignoreJSON: true\n    },\n    domainWhiteList: ['http://localhost:7001'],//允许访问接口的白名单\n  },\n  cors: {\n    origin:'*', // 解决跨域问题\n    allowMethods: 'GET,HEAD,PUT,POST,DELETE,PATCH'\n  },\n  cluster: {\n    listen: {\n      port: 7001, // 监听端口\n      // hostname: '127.0.0.1', // 不建议设置 hostname 为 '0.0.0.0'，它将允许来自外部网络和来源的连接，请在知晓风险的情况下使用\n      // path: '/var/run/egg.sock',\n    }\n  }\n};\n```\n3、config/plugin.js\n```javascript\nmodule.exports = {\n  mysql: {\n    enable: true,\n    package: 'egg-mysql',\n  },\n  jwt: {\n    enable: true,\n    package: 'egg-jwt',\n  },\n  cors: {\n    enable: true,\n    package: 'egg-cors',\n  },\n};\n```\n4、app/router.js 定义登陆路由\n```javascript\nmodule.exports = app => {\n  const { router, controller, middleware} = app;\n  const jwtErr = middleware.jwtErr(app.config.jwt)\n  \n  router.get('/api/getUser', jwtErr, controller.user.getUser);\n  router.post('/api/login', controller.login.login);\n};\n```\n在获取用户信息接口上使用中间件\n\n\n5、middleware/jwtErr.js 定义一个jwt中间件 访问路由的时候会通过这个中间件来处理\n```javascript\nmodule.exports = (options, app) => {\n  return async function jwtErr(ctx, next) {\n    const token = ctx.request.header.token;\n    if(token){\n      try {\n        ctx.app.jwt.verify(token, options.secret); // 验证token \n        await next();\n      } catch (error) {\n        ctx.status = 401;\n          ctx.body = {\n              massage: 'token已过期，请重新登录',\n              code: -1,\n          }\n          return;\n      }\n    } else {\n      ctx.status = 401;\n      ctx.body = {\n        message: 'token不存在',\n      };\n      return;\n    }\n  }\n}\n```\n接口先去header判断是否存在token，存在就验证，不存在就返回信息。\n\n\n6、controller/login.js 登陆控制器 \n```javascript\nconst Controller = require('egg').Controller;\n\nclass LoginController extends Controller {\n  async login() {\n    const { ctx, app } = this;\n    const { userName, password } = ctx.request.body;\n    const { result } = await ctx.service.login.login(userName, password);\n\n    if(result.length>0){\n      \n      const token = app.jwt.sign({\n        'userName': userName, //需要存储的 token 数据\n      }, app.config.jwt.secret, { expiresIn: '2m' }); // 2分钟token过期\n      \n      ctx.set({'token':token})//设置headers\n      ctx.body = {\n        code: '200',\n        data: [{\n          token: token,\n          userName: result[0].userName,\n          userId: result[0].userId\n        }],\n        message: 'success'\n      };\n\n    }else{\n\n      ctx.body = {\n        code: '401',\n        data: result,\n        message: '账号或密码错误'\n      };\n\n    }\n  }\n}\n\nmodule.exports = LoginController;\n```\n将用户名信息存储在token数据中，并且设置2分钟token过期。当token和用户名密码验证成功，返回token和用户信息。\n\n\n7、service/login.js \n```javascript\nconst Service = require('egg').Service;\nconst crypto = require('crypto');\n\nclass LoginService extends Service {\n  getMd5Data(data) {\n    return crypto.createHash('md5').update(data).digest('hex');\n  }\n\n  async login(username,password) {\n    const psd = this.getMd5Data(password)\n    const data = await this.app.mysql.query(`SELECT * FROM user WHERE userName='${username}' and password='${psd}'`);\n    const result = JSON.parse( JSON.stringify(data)); // 去除node中mysql查询数据产生的RowDataPacket\n    return { result };\n  }\n}\n\nmodule.exports = LoginService;\n```\nmd5加密后查询匹配数据库密码。\n# 验证\npostman调用 post请求 填写用户名和密码获取token\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/egg3.png)\n通过拿到的token放入header请求用户信息\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/egg4.png)\ntoken不存在的情况\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/egg5.png)\n\n\ntoken过期的情况\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/egg6.png)\n\n\n账号密码错误的情况\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/egg7.png)\n","slug":"egg写一个最简单的token登陆验证","published":1,"updated":"2022-08-30T07:23:28.617Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7g2c7g000057qu594188etp","content":"<h1 id=\"egg-写一个最简单的token登陆验证\"><a href=\"#egg-写一个最简单的token登陆验证\" class=\"headerlink\" title=\"egg 写一个最简单的token登陆验证\"></a>egg 写一个最简单的token登陆验证</h1><p>首先看完整的目录结构<br><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/egg1.png\" alt=\"image.png\"><br>主要实现的功能是通过账号密码登录获取token，再通过token来获取用户信息，一共两个接口：登陆接口和获取用户信息接口。<br>上一篇文章已经写到了如何写一个最简单的获取mysql用户信息的接口，现在直接在上一篇文章的基础上做token验证登陆。</p>\n<p>mysql数据库准备好数据<br><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/egg2.png\" alt=\"image.png\"></p>\n<p>1、安装jwt依赖和解决跨域、白名单egg-cors</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i egg-jwt --save</span><br><span class=\"line\">npm i egg-cors --save</span><br></pre></td></tr></table></figure>\n<p>2、config&#x2F;config.default.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 配置需要的中间件，数组顺序即为中间件的加载顺序</span></span><br><span class=\"line\">  <span class=\"comment\">// middleware: [ &#x27;jwt&#x27; ],</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">keys</span>: <span class=\"string\">&#x27;123456790&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">mysql</span>: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 单数据库信息配置</span></span><br><span class=\"line\">    <span class=\"attr\">client</span>: &#123;</span><br><span class=\"line\">      <span class=\"comment\">// host</span></span><br><span class=\"line\">      <span class=\"attr\">host</span>: <span class=\"string\">&#x27;38.130.21.169&#x27;</span>,</span><br><span class=\"line\">      <span class=\"comment\">// 端口号</span></span><br><span class=\"line\">      <span class=\"attr\">port</span>: <span class=\"string\">&#x27;3306&#x27;</span>,</span><br><span class=\"line\">      <span class=\"comment\">// 用户名</span></span><br><span class=\"line\">      <span class=\"attr\">user</span>: <span class=\"string\">&#x27;root&#x27;</span>,</span><br><span class=\"line\">      <span class=\"comment\">// 密码</span></span><br><span class=\"line\">      <span class=\"attr\">password</span>: <span class=\"string\">&#x27;yourpassword&#x27;</span>,</span><br><span class=\"line\">      <span class=\"comment\">// 数据库名</span></span><br><span class=\"line\">      <span class=\"attr\">database</span>: <span class=\"string\">&#x27;database&#x27;</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// 是否加载到 app 上，默认开启</span></span><br><span class=\"line\">    <span class=\"attr\">app</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 是否加载到 agent 上，默认关闭</span></span><br><span class=\"line\">    <span class=\"attr\">agent</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">jwt</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">secret</span>: <span class=\"string\">&quot;123456&quot;</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">security</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">csrf</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">enable</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">      <span class=\"attr\">ignoreJSON</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">domainWhiteList</span>: [<span class=\"string\">&#x27;http://localhost:7001&#x27;</span>],<span class=\"comment\">//允许访问接口的白名单</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">cors</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">origin</span>:<span class=\"string\">&#x27;*&#x27;</span>, <span class=\"comment\">// 解决跨域问题</span></span><br><span class=\"line\">    <span class=\"attr\">allowMethods</span>: <span class=\"string\">&#x27;GET,HEAD,PUT,POST,DELETE,PATCH&#x27;</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">cluster</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">listen</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">port</span>: <span class=\"number\">7001</span>, <span class=\"comment\">// 监听端口</span></span><br><span class=\"line\">      <span class=\"comment\">// hostname: &#x27;127.0.0.1&#x27;, // 不建议设置 hostname 为 &#x27;0.0.0.0&#x27;，它将允许来自外部网络和来源的连接，请在知晓风险的情况下使用</span></span><br><span class=\"line\">      <span class=\"comment\">// path: &#x27;/var/run/egg.sock&#x27;,</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>3、config&#x2F;plugin.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">mysql</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">enable</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">package</span>: <span class=\"string\">&#x27;egg-mysql&#x27;</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">jwt</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">enable</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">package</span>: <span class=\"string\">&#x27;egg-jwt&#x27;</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">cors</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">enable</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">package</span>: <span class=\"string\">&#x27;egg-cors&#x27;</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>4、app&#x2F;router.js 定义登陆路由</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = <span class=\"function\"><span class=\"params\">app</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123; router, controller, middleware&#125; = app;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> jwtErr = middleware.<span class=\"title function_\">jwtErr</span>(app.<span class=\"property\">config</span>.<span class=\"property\">jwt</span>)</span><br><span class=\"line\">  </span><br><span class=\"line\">  router.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;/api/getUser&#x27;</span>, jwtErr, controller.<span class=\"property\">user</span>.<span class=\"property\">getUser</span>);</span><br><span class=\"line\">  router.<span class=\"title function_\">post</span>(<span class=\"string\">&#x27;/api/login&#x27;</span>, controller.<span class=\"property\">login</span>.<span class=\"property\">login</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>在获取用户信息接口上使用中间件</p>\n<p>5、middleware&#x2F;jwtErr.js 定义一个jwt中间件 访问路由的时候会通过这个中间件来处理</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = <span class=\"function\">(<span class=\"params\">options, app</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">jwtErr</span>(<span class=\"params\">ctx, next</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> token = ctx.<span class=\"property\">request</span>.<span class=\"property\">header</span>.<span class=\"property\">token</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(token)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        ctx.<span class=\"property\">app</span>.<span class=\"property\">jwt</span>.<span class=\"title function_\">verify</span>(token, options.<span class=\"property\">secret</span>); <span class=\"comment\">// 验证token </span></span><br><span class=\"line\">        <span class=\"keyword\">await</span> <span class=\"title function_\">next</span>();</span><br><span class=\"line\">      &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">        ctx.<span class=\"property\">status</span> = <span class=\"number\">401</span>;</span><br><span class=\"line\">          ctx.<span class=\"property\">body</span> = &#123;</span><br><span class=\"line\">              <span class=\"attr\">massage</span>: <span class=\"string\">&#x27;token已过期，请重新登录&#x27;</span>,</span><br><span class=\"line\">              <span class=\"attr\">code</span>: -<span class=\"number\">1</span>,</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">return</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      ctx.<span class=\"property\">status</span> = <span class=\"number\">401</span>;</span><br><span class=\"line\">      ctx.<span class=\"property\">body</span> = &#123;</span><br><span class=\"line\">        <span class=\"attr\">message</span>: <span class=\"string\">&#x27;token不存在&#x27;</span>,</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>接口先去header判断是否存在token，存在就验证，不存在就返回信息。</p>\n<p>6、controller&#x2F;login.js 登陆控制器 </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">Controller</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;egg&#x27;</span>).<span class=\"property\">Controller</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">LoginController</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Controller</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">async</span> <span class=\"title function_\">login</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; ctx, app &#125; = <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; userName, password &#125; = ctx.<span class=\"property\">request</span>.<span class=\"property\">body</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; result &#125; = <span class=\"keyword\">await</span> ctx.<span class=\"property\">service</span>.<span class=\"property\">login</span>.<span class=\"title function_\">login</span>(userName, password);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(result.<span class=\"property\">length</span>&gt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">      </span><br><span class=\"line\">      <span class=\"keyword\">const</span> token = app.<span class=\"property\">jwt</span>.<span class=\"title function_\">sign</span>(&#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;userName&#x27;</span>: userName, <span class=\"comment\">//需要存储的 token 数据</span></span><br><span class=\"line\">      &#125;, app.<span class=\"property\">config</span>.<span class=\"property\">jwt</span>.<span class=\"property\">secret</span>, &#123; <span class=\"attr\">expiresIn</span>: <span class=\"string\">&#x27;2m&#x27;</span> &#125;); <span class=\"comment\">// 2分钟token过期</span></span><br><span class=\"line\">      </span><br><span class=\"line\">      ctx.<span class=\"title function_\">set</span>(&#123;<span class=\"string\">&#x27;token&#x27;</span>:token&#125;)<span class=\"comment\">//设置headers</span></span><br><span class=\"line\">      ctx.<span class=\"property\">body</span> = &#123;</span><br><span class=\"line\">        <span class=\"attr\">code</span>: <span class=\"string\">&#x27;200&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">data</span>: [&#123;</span><br><span class=\"line\">          <span class=\"attr\">token</span>: token,</span><br><span class=\"line\">          <span class=\"attr\">userName</span>: result[<span class=\"number\">0</span>].<span class=\"property\">userName</span>,</span><br><span class=\"line\">          <span class=\"attr\">userId</span>: result[<span class=\"number\">0</span>].<span class=\"property\">userId</span></span><br><span class=\"line\">        &#125;],</span><br><span class=\"line\">        <span class=\"attr\">message</span>: <span class=\"string\">&#x27;success&#x27;</span></span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">      ctx.<span class=\"property\">body</span> = &#123;</span><br><span class=\"line\">        <span class=\"attr\">code</span>: <span class=\"string\">&#x27;401&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">data</span>: result,</span><br><span class=\"line\">        <span class=\"attr\">message</span>: <span class=\"string\">&#x27;账号或密码错误&#x27;</span></span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = <span class=\"title class_\">LoginController</span>;</span><br></pre></td></tr></table></figure>\n<p>将用户名信息存储在token数据中，并且设置2分钟token过期。当token和用户名密码验证成功，返回token和用户信息。</p>\n<p>7、service&#x2F;login.js </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">Service</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;egg&#x27;</span>).<span class=\"property\">Service</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> crypto = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;crypto&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">LoginService</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Service</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">getMd5Data</span>(<span class=\"params\">data</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> crypto.<span class=\"title function_\">createHash</span>(<span class=\"string\">&#x27;md5&#x27;</span>).<span class=\"title function_\">update</span>(data).<span class=\"title function_\">digest</span>(<span class=\"string\">&#x27;hex&#x27;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">async</span> <span class=\"title function_\">login</span>(<span class=\"params\">username,password</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> psd = <span class=\"variable language_\">this</span>.<span class=\"title function_\">getMd5Data</span>(password)</span><br><span class=\"line\">    <span class=\"keyword\">const</span> data = <span class=\"keyword\">await</span> <span class=\"variable language_\">this</span>.<span class=\"property\">app</span>.<span class=\"property\">mysql</span>.<span class=\"title function_\">query</span>(<span class=\"string\">`SELECT * FROM user WHERE userName=&#x27;<span class=\"subst\">$&#123;username&#125;</span>&#x27; and password=&#x27;<span class=\"subst\">$&#123;psd&#125;</span>&#x27;`</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> result = <span class=\"title class_\">JSON</span>.<span class=\"title function_\">parse</span>( <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(data)); <span class=\"comment\">// 去除node中mysql查询数据产生的RowDataPacket</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123; result &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = <span class=\"title class_\">LoginService</span>;</span><br></pre></td></tr></table></figure>\n<p>md5加密后查询匹配数据库密码。</p>\n<h1 id=\"验证\"><a href=\"#验证\" class=\"headerlink\" title=\"验证\"></a>验证</h1><p>postman调用 post请求 填写用户名和密码获取token<br><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/egg3.png\" alt=\"image.png\"><br>通过拿到的token放入header请求用户信息<br><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/egg4.png\" alt=\"image.png\"><br>token不存在的情况<br><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/egg5.png\" alt=\"image.png\"></p>\n<p>token过期的情况<br><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/egg6.png\" alt=\"image.png\"></p>\n<p>账号密码错误的情况<br><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/egg7.png\" alt=\"image.png\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"egg-写一个最简单的token登陆验证\"><a href=\"#egg-写一个最简单的token登陆验证\" class=\"headerlink\" title=\"egg 写一个最简单的token登陆验证\"></a>egg 写一个最简单的token登陆验证</h1><p>首先看完整的目录结构<br><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/egg1.png\" alt=\"image.png\"><br>主要实现的功能是通过账号密码登录获取token，再通过token来获取用户信息，一共两个接口：登陆接口和获取用户信息接口。<br>上一篇文章已经写到了如何写一个最简单的获取mysql用户信息的接口，现在直接在上一篇文章的基础上做token验证登陆。</p>\n<p>mysql数据库准备好数据<br><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/egg2.png\" alt=\"image.png\"></p>\n<p>1、安装jwt依赖和解决跨域、白名单egg-cors</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i egg-jwt --save</span><br><span class=\"line\">npm i egg-cors --save</span><br></pre></td></tr></table></figure>\n<p>2、config&#x2F;config.default.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 配置需要的中间件，数组顺序即为中间件的加载顺序</span></span><br><span class=\"line\">  <span class=\"comment\">// middleware: [ &#x27;jwt&#x27; ],</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">keys</span>: <span class=\"string\">&#x27;123456790&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">mysql</span>: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 单数据库信息配置</span></span><br><span class=\"line\">    <span class=\"attr\">client</span>: &#123;</span><br><span class=\"line\">      <span class=\"comment\">// host</span></span><br><span class=\"line\">      <span class=\"attr\">host</span>: <span class=\"string\">&#x27;38.130.21.169&#x27;</span>,</span><br><span class=\"line\">      <span class=\"comment\">// 端口号</span></span><br><span class=\"line\">      <span class=\"attr\">port</span>: <span class=\"string\">&#x27;3306&#x27;</span>,</span><br><span class=\"line\">      <span class=\"comment\">// 用户名</span></span><br><span class=\"line\">      <span class=\"attr\">user</span>: <span class=\"string\">&#x27;root&#x27;</span>,</span><br><span class=\"line\">      <span class=\"comment\">// 密码</span></span><br><span class=\"line\">      <span class=\"attr\">password</span>: <span class=\"string\">&#x27;yourpassword&#x27;</span>,</span><br><span class=\"line\">      <span class=\"comment\">// 数据库名</span></span><br><span class=\"line\">      <span class=\"attr\">database</span>: <span class=\"string\">&#x27;database&#x27;</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// 是否加载到 app 上，默认开启</span></span><br><span class=\"line\">    <span class=\"attr\">app</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 是否加载到 agent 上，默认关闭</span></span><br><span class=\"line\">    <span class=\"attr\">agent</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">jwt</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">secret</span>: <span class=\"string\">&quot;123456&quot;</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">security</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">csrf</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">enable</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">      <span class=\"attr\">ignoreJSON</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">domainWhiteList</span>: [<span class=\"string\">&#x27;http://localhost:7001&#x27;</span>],<span class=\"comment\">//允许访问接口的白名单</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">cors</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">origin</span>:<span class=\"string\">&#x27;*&#x27;</span>, <span class=\"comment\">// 解决跨域问题</span></span><br><span class=\"line\">    <span class=\"attr\">allowMethods</span>: <span class=\"string\">&#x27;GET,HEAD,PUT,POST,DELETE,PATCH&#x27;</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">cluster</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">listen</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">port</span>: <span class=\"number\">7001</span>, <span class=\"comment\">// 监听端口</span></span><br><span class=\"line\">      <span class=\"comment\">// hostname: &#x27;127.0.0.1&#x27;, // 不建议设置 hostname 为 &#x27;0.0.0.0&#x27;，它将允许来自外部网络和来源的连接，请在知晓风险的情况下使用</span></span><br><span class=\"line\">      <span class=\"comment\">// path: &#x27;/var/run/egg.sock&#x27;,</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>3、config&#x2F;plugin.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">mysql</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">enable</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">package</span>: <span class=\"string\">&#x27;egg-mysql&#x27;</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">jwt</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">enable</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">package</span>: <span class=\"string\">&#x27;egg-jwt&#x27;</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">cors</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">enable</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">package</span>: <span class=\"string\">&#x27;egg-cors&#x27;</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>4、app&#x2F;router.js 定义登陆路由</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = <span class=\"function\"><span class=\"params\">app</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123; router, controller, middleware&#125; = app;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> jwtErr = middleware.<span class=\"title function_\">jwtErr</span>(app.<span class=\"property\">config</span>.<span class=\"property\">jwt</span>)</span><br><span class=\"line\">  </span><br><span class=\"line\">  router.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;/api/getUser&#x27;</span>, jwtErr, controller.<span class=\"property\">user</span>.<span class=\"property\">getUser</span>);</span><br><span class=\"line\">  router.<span class=\"title function_\">post</span>(<span class=\"string\">&#x27;/api/login&#x27;</span>, controller.<span class=\"property\">login</span>.<span class=\"property\">login</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>在获取用户信息接口上使用中间件</p>\n<p>5、middleware&#x2F;jwtErr.js 定义一个jwt中间件 访问路由的时候会通过这个中间件来处理</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = <span class=\"function\">(<span class=\"params\">options, app</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">jwtErr</span>(<span class=\"params\">ctx, next</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> token = ctx.<span class=\"property\">request</span>.<span class=\"property\">header</span>.<span class=\"property\">token</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(token)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        ctx.<span class=\"property\">app</span>.<span class=\"property\">jwt</span>.<span class=\"title function_\">verify</span>(token, options.<span class=\"property\">secret</span>); <span class=\"comment\">// 验证token </span></span><br><span class=\"line\">        <span class=\"keyword\">await</span> <span class=\"title function_\">next</span>();</span><br><span class=\"line\">      &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">        ctx.<span class=\"property\">status</span> = <span class=\"number\">401</span>;</span><br><span class=\"line\">          ctx.<span class=\"property\">body</span> = &#123;</span><br><span class=\"line\">              <span class=\"attr\">massage</span>: <span class=\"string\">&#x27;token已过期，请重新登录&#x27;</span>,</span><br><span class=\"line\">              <span class=\"attr\">code</span>: -<span class=\"number\">1</span>,</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">return</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      ctx.<span class=\"property\">status</span> = <span class=\"number\">401</span>;</span><br><span class=\"line\">      ctx.<span class=\"property\">body</span> = &#123;</span><br><span class=\"line\">        <span class=\"attr\">message</span>: <span class=\"string\">&#x27;token不存在&#x27;</span>,</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>接口先去header判断是否存在token，存在就验证，不存在就返回信息。</p>\n<p>6、controller&#x2F;login.js 登陆控制器 </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">Controller</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;egg&#x27;</span>).<span class=\"property\">Controller</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">LoginController</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Controller</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">async</span> <span class=\"title function_\">login</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; ctx, app &#125; = <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; userName, password &#125; = ctx.<span class=\"property\">request</span>.<span class=\"property\">body</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; result &#125; = <span class=\"keyword\">await</span> ctx.<span class=\"property\">service</span>.<span class=\"property\">login</span>.<span class=\"title function_\">login</span>(userName, password);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(result.<span class=\"property\">length</span>&gt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">      </span><br><span class=\"line\">      <span class=\"keyword\">const</span> token = app.<span class=\"property\">jwt</span>.<span class=\"title function_\">sign</span>(&#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;userName&#x27;</span>: userName, <span class=\"comment\">//需要存储的 token 数据</span></span><br><span class=\"line\">      &#125;, app.<span class=\"property\">config</span>.<span class=\"property\">jwt</span>.<span class=\"property\">secret</span>, &#123; <span class=\"attr\">expiresIn</span>: <span class=\"string\">&#x27;2m&#x27;</span> &#125;); <span class=\"comment\">// 2分钟token过期</span></span><br><span class=\"line\">      </span><br><span class=\"line\">      ctx.<span class=\"title function_\">set</span>(&#123;<span class=\"string\">&#x27;token&#x27;</span>:token&#125;)<span class=\"comment\">//设置headers</span></span><br><span class=\"line\">      ctx.<span class=\"property\">body</span> = &#123;</span><br><span class=\"line\">        <span class=\"attr\">code</span>: <span class=\"string\">&#x27;200&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">data</span>: [&#123;</span><br><span class=\"line\">          <span class=\"attr\">token</span>: token,</span><br><span class=\"line\">          <span class=\"attr\">userName</span>: result[<span class=\"number\">0</span>].<span class=\"property\">userName</span>,</span><br><span class=\"line\">          <span class=\"attr\">userId</span>: result[<span class=\"number\">0</span>].<span class=\"property\">userId</span></span><br><span class=\"line\">        &#125;],</span><br><span class=\"line\">        <span class=\"attr\">message</span>: <span class=\"string\">&#x27;success&#x27;</span></span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">      ctx.<span class=\"property\">body</span> = &#123;</span><br><span class=\"line\">        <span class=\"attr\">code</span>: <span class=\"string\">&#x27;401&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">data</span>: result,</span><br><span class=\"line\">        <span class=\"attr\">message</span>: <span class=\"string\">&#x27;账号或密码错误&#x27;</span></span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = <span class=\"title class_\">LoginController</span>;</span><br></pre></td></tr></table></figure>\n<p>将用户名信息存储在token数据中，并且设置2分钟token过期。当token和用户名密码验证成功，返回token和用户信息。</p>\n<p>7、service&#x2F;login.js </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">Service</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;egg&#x27;</span>).<span class=\"property\">Service</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> crypto = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;crypto&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">LoginService</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Service</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">getMd5Data</span>(<span class=\"params\">data</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> crypto.<span class=\"title function_\">createHash</span>(<span class=\"string\">&#x27;md5&#x27;</span>).<span class=\"title function_\">update</span>(data).<span class=\"title function_\">digest</span>(<span class=\"string\">&#x27;hex&#x27;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">async</span> <span class=\"title function_\">login</span>(<span class=\"params\">username,password</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> psd = <span class=\"variable language_\">this</span>.<span class=\"title function_\">getMd5Data</span>(password)</span><br><span class=\"line\">    <span class=\"keyword\">const</span> data = <span class=\"keyword\">await</span> <span class=\"variable language_\">this</span>.<span class=\"property\">app</span>.<span class=\"property\">mysql</span>.<span class=\"title function_\">query</span>(<span class=\"string\">`SELECT * FROM user WHERE userName=&#x27;<span class=\"subst\">$&#123;username&#125;</span>&#x27; and password=&#x27;<span class=\"subst\">$&#123;psd&#125;</span>&#x27;`</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> result = <span class=\"title class_\">JSON</span>.<span class=\"title function_\">parse</span>( <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(data)); <span class=\"comment\">// 去除node中mysql查询数据产生的RowDataPacket</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123; result &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = <span class=\"title class_\">LoginService</span>;</span><br></pre></td></tr></table></figure>\n<p>md5加密后查询匹配数据库密码。</p>\n<h1 id=\"验证\"><a href=\"#验证\" class=\"headerlink\" title=\"验证\"></a>验证</h1><p>postman调用 post请求 填写用户名和密码获取token<br><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/egg3.png\" alt=\"image.png\"><br>通过拿到的token放入header请求用户信息<br><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/egg4.png\" alt=\"image.png\"><br>token不存在的情况<br><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/egg5.png\" alt=\"image.png\"></p>\n<p>token过期的情况<br><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/egg6.png\" alt=\"image.png\"></p>\n<p>账号密码错误的情况<br><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/egg7.png\" alt=\"image.png\"></p>\n"},{"title":"理解vue3组合式API  Setup（二）","date":"2021-07-05T06:27:00.000Z","_content":"### Props\n![carbon 11.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/carbon%20(11)_1625540082237.png)\n创建一个子组件，在子组件内监听父组件计数器。\n子组件props只能通过toRefs进行解构，否则组件将无法响应式传递参数。\n如果content是可选的，在未传入content的情况下，toRefs是不会为它创建ref，所以需要使用toRef来处理。\n### Context\n![carbon 12.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/carbon%20(12)_1625541122747.png)\ncontext就显而易见了，这个参数能访问到之前vue2上this可访问到的三个属性，原因setup在创建时，dom还未被创建，所以this访问不到，通过上下文的方式来传递这三个属性:\n``` js\nthis.$attrs  \nthis.$slots  \nthis.$emit \n```\n\n### reactive\n![carbon 14.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/carbon%20(14)_1625542582030.png)\n\nreactive其实和toRef类似，都是将数据变为响应式，不同是reactive一般用来处理复杂对象数据之类。\n### 转换写法\n![carbon 16.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/carbon%20(16)_1625555312208.png)\n将setup移到script标签内，这样整个script内就都是setup的天下，引入defineProps定义属性，此时就不需要再将变量方法通过return来返回出去了，然后我们再通过reactive定义一个user对象，让setUserAge按钮来修改对象内age值，点击按钮来查看ui的更新变化。\n### 子组件调用父组件方法\n![carbon 18.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/carbon%20(18)_1625558127998.png)\n在父组件内定义fatherClick方法并且有个age参数，在子组件内引入defineEmit，通过defineEmit(['fatherClick']) 来触发父组件方法并传递参数，如果是多个方法，在此数组里['fatherClick']添加即可。\n![carbon 19.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/carbon%20(19)_1625558863142.png)\n同样我们也可以通过context来调用父组件方法，但是需要引入useContext函数。\n#### 总结\nvue3的新特性还有很多，同时也在不断更新优化，当前官方部分api并不全面，许多问题在官网也查询不到，所以不建议用在生产环境。组合式api还有大量要学习的地方，对于vue2是一种延续又是一种大变革；有一定vue开发经验的同学可能上手相对好一点，但对于新手，vue3的变化不是很友好，很多特征的理解相比2来说更加有深度，但是不代表vue3不好，一门语言的发展，势必要取其精华，去其糟粕，在性能和优化上vue3确实比vue2更上一个阶梯，包括新的构建工具vite，但是学习的成本也是在的，拥抱ts，也让vue不再像之前那么友好新手了，但是ts势必是个大趋势，未来的大环境，所以还是好好学习，与时俱进吧！","source":"_posts/理解vue3组合式API-Setup（二）.md","raw":"---\ntitle: 理解vue3组合式API  Setup（二）\ndate: 2021-07-05 14:27\ntags:\n---\n### Props\n![carbon 11.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/carbon%20(11)_1625540082237.png)\n创建一个子组件，在子组件内监听父组件计数器。\n子组件props只能通过toRefs进行解构，否则组件将无法响应式传递参数。\n如果content是可选的，在未传入content的情况下，toRefs是不会为它创建ref，所以需要使用toRef来处理。\n### Context\n![carbon 12.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/carbon%20(12)_1625541122747.png)\ncontext就显而易见了，这个参数能访问到之前vue2上this可访问到的三个属性，原因setup在创建时，dom还未被创建，所以this访问不到，通过上下文的方式来传递这三个属性:\n``` js\nthis.$attrs  \nthis.$slots  \nthis.$emit \n```\n\n### reactive\n![carbon 14.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/carbon%20(14)_1625542582030.png)\n\nreactive其实和toRef类似，都是将数据变为响应式，不同是reactive一般用来处理复杂对象数据之类。\n### 转换写法\n![carbon 16.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/carbon%20(16)_1625555312208.png)\n将setup移到script标签内，这样整个script内就都是setup的天下，引入defineProps定义属性，此时就不需要再将变量方法通过return来返回出去了，然后我们再通过reactive定义一个user对象，让setUserAge按钮来修改对象内age值，点击按钮来查看ui的更新变化。\n### 子组件调用父组件方法\n![carbon 18.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/carbon%20(18)_1625558127998.png)\n在父组件内定义fatherClick方法并且有个age参数，在子组件内引入defineEmit，通过defineEmit(['fatherClick']) 来触发父组件方法并传递参数，如果是多个方法，在此数组里['fatherClick']添加即可。\n![carbon 19.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/carbon%20(19)_1625558863142.png)\n同样我们也可以通过context来调用父组件方法，但是需要引入useContext函数。\n#### 总结\nvue3的新特性还有很多，同时也在不断更新优化，当前官方部分api并不全面，许多问题在官网也查询不到，所以不建议用在生产环境。组合式api还有大量要学习的地方，对于vue2是一种延续又是一种大变革；有一定vue开发经验的同学可能上手相对好一点，但对于新手，vue3的变化不是很友好，很多特征的理解相比2来说更加有深度，但是不代表vue3不好，一门语言的发展，势必要取其精华，去其糟粕，在性能和优化上vue3确实比vue2更上一个阶梯，包括新的构建工具vite，但是学习的成本也是在的，拥抱ts，也让vue不再像之前那么友好新手了，但是ts势必是个大趋势，未来的大环境，所以还是好好学习，与时俱进吧！","slug":"理解vue3组合式API-Setup（二）","published":1,"updated":"2022-08-30T07:39:59.178Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7g2c7g000067qu51yvjeuzi","content":"<h3 id=\"Props\"><a href=\"#Props\" class=\"headerlink\" title=\"Props\"></a>Props</h3><p><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/carbon%20(11)_1625540082237.png\" alt=\"carbon 11.png\"><br>创建一个子组件，在子组件内监听父组件计数器。<br>子组件props只能通过toRefs进行解构，否则组件将无法响应式传递参数。<br>如果content是可选的，在未传入content的情况下，toRefs是不会为它创建ref，所以需要使用toRef来处理。</p>\n<h3 id=\"Context\"><a href=\"#Context\" class=\"headerlink\" title=\"Context\"></a>Context</h3><p><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/carbon%20(12)_1625541122747.png\" alt=\"carbon 12.png\"><br>context就显而易见了，这个参数能访问到之前vue2上this可访问到的三个属性，原因setup在创建时，dom还未被创建，所以this访问不到，通过上下文的方式来传递这三个属性:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">$attrs</span>  </span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">$slots</span>  </span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">$emit</span> </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"reactive\"><a href=\"#reactive\" class=\"headerlink\" title=\"reactive\"></a>reactive</h3><p><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/carbon%20(14)_1625542582030.png\" alt=\"carbon 14.png\"></p>\n<p>reactive其实和toRef类似，都是将数据变为响应式，不同是reactive一般用来处理复杂对象数据之类。</p>\n<h3 id=\"转换写法\"><a href=\"#转换写法\" class=\"headerlink\" title=\"转换写法\"></a>转换写法</h3><p><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/carbon%20(16)_1625555312208.png\" alt=\"carbon 16.png\"><br>将setup移到script标签内，这样整个script内就都是setup的天下，引入defineProps定义属性，此时就不需要再将变量方法通过return来返回出去了，然后我们再通过reactive定义一个user对象，让setUserAge按钮来修改对象内age值，点击按钮来查看ui的更新变化。</p>\n<h3 id=\"子组件调用父组件方法\"><a href=\"#子组件调用父组件方法\" class=\"headerlink\" title=\"子组件调用父组件方法\"></a>子组件调用父组件方法</h3><p><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/carbon%20(18)_1625558127998.png\" alt=\"carbon 18.png\"><br>在父组件内定义fatherClick方法并且有个age参数，在子组件内引入defineEmit，通过defineEmit([‘fatherClick’]) 来触发父组件方法并传递参数，如果是多个方法，在此数组里[‘fatherClick’]添加即可。<br><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/carbon%20(19)_1625558863142.png\" alt=\"carbon 19.png\"><br>同样我们也可以通过context来调用父组件方法，但是需要引入useContext函数。</p>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>vue3的新特性还有很多，同时也在不断更新优化，当前官方部分api并不全面，许多问题在官网也查询不到，所以不建议用在生产环境。组合式api还有大量要学习的地方，对于vue2是一种延续又是一种大变革；有一定vue开发经验的同学可能上手相对好一点，但对于新手，vue3的变化不是很友好，很多特征的理解相比2来说更加有深度，但是不代表vue3不好，一门语言的发展，势必要取其精华，去其糟粕，在性能和优化上vue3确实比vue2更上一个阶梯，包括新的构建工具vite，但是学习的成本也是在的，拥抱ts，也让vue不再像之前那么友好新手了，但是ts势必是个大趋势，未来的大环境，所以还是好好学习，与时俱进吧！</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"Props\"><a href=\"#Props\" class=\"headerlink\" title=\"Props\"></a>Props</h3><p><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/carbon%20(11)_1625540082237.png\" alt=\"carbon 11.png\"><br>创建一个子组件，在子组件内监听父组件计数器。<br>子组件props只能通过toRefs进行解构，否则组件将无法响应式传递参数。<br>如果content是可选的，在未传入content的情况下，toRefs是不会为它创建ref，所以需要使用toRef来处理。</p>\n<h3 id=\"Context\"><a href=\"#Context\" class=\"headerlink\" title=\"Context\"></a>Context</h3><p><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/carbon%20(12)_1625541122747.png\" alt=\"carbon 12.png\"><br>context就显而易见了，这个参数能访问到之前vue2上this可访问到的三个属性，原因setup在创建时，dom还未被创建，所以this访问不到，通过上下文的方式来传递这三个属性:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">$attrs</span>  </span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">$slots</span>  </span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">$emit</span> </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"reactive\"><a href=\"#reactive\" class=\"headerlink\" title=\"reactive\"></a>reactive</h3><p><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/carbon%20(14)_1625542582030.png\" alt=\"carbon 14.png\"></p>\n<p>reactive其实和toRef类似，都是将数据变为响应式，不同是reactive一般用来处理复杂对象数据之类。</p>\n<h3 id=\"转换写法\"><a href=\"#转换写法\" class=\"headerlink\" title=\"转换写法\"></a>转换写法</h3><p><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/carbon%20(16)_1625555312208.png\" alt=\"carbon 16.png\"><br>将setup移到script标签内，这样整个script内就都是setup的天下，引入defineProps定义属性，此时就不需要再将变量方法通过return来返回出去了，然后我们再通过reactive定义一个user对象，让setUserAge按钮来修改对象内age值，点击按钮来查看ui的更新变化。</p>\n<h3 id=\"子组件调用父组件方法\"><a href=\"#子组件调用父组件方法\" class=\"headerlink\" title=\"子组件调用父组件方法\"></a>子组件调用父组件方法</h3><p><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/carbon%20(18)_1625558127998.png\" alt=\"carbon 18.png\"><br>在父组件内定义fatherClick方法并且有个age参数，在子组件内引入defineEmit，通过defineEmit([‘fatherClick’]) 来触发父组件方法并传递参数，如果是多个方法，在此数组里[‘fatherClick’]添加即可。<br><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/carbon%20(19)_1625558863142.png\" alt=\"carbon 19.png\"><br>同样我们也可以通过context来调用父组件方法，但是需要引入useContext函数。</p>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>vue3的新特性还有很多，同时也在不断更新优化，当前官方部分api并不全面，许多问题在官网也查询不到，所以不建议用在生产环境。组合式api还有大量要学习的地方，对于vue2是一种延续又是一种大变革；有一定vue开发经验的同学可能上手相对好一点，但对于新手，vue3的变化不是很友好，很多特征的理解相比2来说更加有深度，但是不代表vue3不好，一门语言的发展，势必要取其精华，去其糟粕，在性能和优化上vue3确实比vue2更上一个阶梯，包括新的构建工具vite，但是学习的成本也是在的，拥抱ts，也让vue不再像之前那么友好新手了，但是ts势必是个大趋势，未来的大环境，所以还是好好学习，与时俱进吧！</p>\n"},{"title":"vscode eslint 规则","date":"2021-02-25T10:01:00.000Z","_content":"\n```javascript\n\"no-alert\": 0,//禁止使用alert confirm prompt\n\"no-array-constructor\": 2,//禁止使用数组构造器\n\"no-bitwise\": 0,//禁止使用按位运算符\n\"no-caller\": 1,//禁止使用arguments.caller或arguments.callee\n\"no-catch-shadow\": 2,//禁止catch子句参数与外部作用域变量同名\n\"no-class-assign\": 2,//禁止给类赋值\n\"no-cond-assign\": 2,//禁止在条件表达式中使用赋值语句\n\"no-console\": 2,//禁止使用console\n\"no-const-assign\": 2,//禁止修改const声明的变量\n\"no-constant-condition\": 2,//禁止在条件中使用常量表达式 if(true) if(1)\n\"no-continue\": 0,//禁止使用continue\n\"no-control-regex\": 2,//禁止在正则表达式中使用控制字符\n\"no-debugger\": 2,//禁止使用debugger\n\"no-delete-var\": 2,//不能对var声明的变量使用delete操作符\n\"no-div-regex\": 1,//不能使用看起来像除法的正则表达式/=foo/\n\"no-dupe-keys\": 2,//在创建对象字面量时不允许键重复 {a:1,a:1}\n\"no-dupe-args\": 2,//函数参数不能重复\n\"no-duplicate-case\": 2,//switch中的case标签不能重复\n\"no-else-return\": 2,//如果if语句里面有return,后面不能跟else语句\n\"no-empty\": 2,//块语句中的内容不能为空\n\"no-empty-character-class\": 2,//正则表达式中的[]内容不能为空\n\"no-empty-label\": 2,//禁止使用空label\n\"no-eq-null\": 2,//禁止对null使用==或!=运算符\n\"no-eval\": 1,//禁止使用eval\n\"no-ex-assign\": 2,//禁止给catch语句中的异常参数赋值\n\"no-extend-native\": 2,//禁止扩展native对象\n\"no-extra-bind\": 2,//禁止不必要的函数绑定\n\"no-extra-boolean-cast\": 2,//禁止不必要的bool转换\n\"no-extra-parens\": 2,//禁止非必要的括号\n\"no-extra-semi\": 2,//禁止多余的冒号\n\"no-fallthrough\": 1,//禁止switch穿透\n\"no-floating-decimal\": 2,//禁止省略浮点数中的0 .5 3.\n\"no-func-assign\": 2,//禁止重复的函数声明\n\"no-implicit-coercion\": 1,//禁止隐式转换\n\"no-implied-eval\": 2,//禁止使用隐式eval\n\"no-inline-comments\": 0,//禁止行内备注\n\"no-inner-declarations\": [2, \"functions\"],//禁止在块语句中使用声明（变量或函数）\n\"no-invalid-regexp\": 2,//禁止无效的正则表达式\n\"no-invalid-this\": 2,//禁止无效的this，只能用在构造器，类，对象字面量\n\"no-irregular-whitespace\": 2,//不能有不规则的空格\n\"no-iterator\": 2,//禁止使用__iterator__ 属性\n\"no-label-var\": 2,//label名不能与var声明的变量名相同\n\"no-labels\": 2,//禁止标签声明\n\"no-lone-blocks\": 2,//禁止不必要的嵌套块\n\"no-lonely-if\": 2,//禁止else语句内只有if语句\n\"no-loop-func\": 1,//禁止在循环中使用函数（如果没有引用外部变量不形成闭包就可以）\n\"no-mixed-requires\": [0, false],//声明时不能混用声明类型\n\"no-mixed-spaces-and-tabs\": [2, false],//禁止混用tab和空格\n\"linebreak-style\": [0, \"windows\"],//换行风格\n\"no-multi-spaces\": 1,//不能用多余的空格\n\"no-multi-str\": 2,//字符串不能用\\换行\n\"no-multiple-empty-lines\": [1, {\"max\": 2}],//空行最多不能超过2行\n\"no-native-reassign\": 2,//不能重写native对象\n\"no-negated-in-lhs\": 2,//in 操作符的左边不能有!\n\"no-nested-ternary\": 0,//禁止使用嵌套的三目运算\n\"no-new\": 1,//禁止在使用new构造一个实例后不赋值\n\"no-new-func\": 1,//禁止使用new Function\n\"no-new-object\": 2,//禁止使用new Object()\n\"no-new-require\": 2,//禁止使用new require\n\"no-new-wrappers\": 2,//禁止使用new创建包装实例，new String new Boolean new Number\n\"no-obj-calls\": 2,//不能调用内置的全局对象，比如Math() JSON()\n\"no-octal\": 2,//禁止使用八进制数字\n\"no-octal-escape\": 2,//禁止使用八进制转义序列\n\"no-param-reassign\": 2,//禁止给参数重新赋值\n\"no-path-concat\": 0,//node中不能使用__dirname或__filename做路径拼接\n\"no-plusplus\": 0,//禁止使用++，--\n\"no-process-env\": 0,//禁止使用process.env\n\"no-process-exit\": 0,//禁止使用process.exit()\n\"no-proto\": 2,//禁止使用__proto__属性\n\"no-redeclare\": 2,//禁止重复声明变量\n\"no-regex-spaces\": 2,//禁止在正则表达式字面量中使用多个空格 /foo bar/\n\"no-restricted-modules\": 0,//如果禁用了指定模块，使用就会报错\n\"no-return-assign\": 1,//return 语句中不能有赋值表达式\n\"no-script-url\": 0,//禁止使用javascript:void(0)\n\"no-self-compare\": 2,//不能比较自身\n\"no-sequences\": 0,//禁止使用逗号运算符\n\"no-shadow\": 2,//外部作用域中的变量不能与它所包含的作用域中的变量或参数同名\n\"no-shadow-restricted-names\": 2,//严格模式中规定的限制标识符不能作为声明时的变量名使用\n\"no-spaced-func\": 2,//函数调用时 函数名与()之间不能有空格\n\"no-sparse-arrays\": 2,//禁止稀疏数组， [1,,2]\n\"no-sync\": 0,//nodejs 禁止同步方法\n\"no-ternary\": 0,//禁止使用三目运算符\n\"no-trailing-spaces\": 1,//一行结束后面不要有空格\n\"no-this-before-super\": 0,//在调用super()之前不能使用this或super\n\"no-throw-literal\": 2,//禁止抛出字面量错误 throw \"error\";\n\"no-undef\": 1,//不能有未定义的变量\n\"no-undef-init\": 2,//变量初始化时不能直接给它赋值为undefined\n\"no-undefined\": 2,//不能使用undefined\n\"no-unexpected-multiline\": 2,//避免多行表达式\n\"no-underscore-dangle\": 1,//标识符不能以_开头或结尾\n\"no-unneeded-ternary\": 2,//禁止不必要的嵌套 var isYes = answer === 1 ? true : false;\n\"no-unreachable\": 2,//不能有无法执行的代码\n\"no-unused-expressions\": 2,//禁止无用的表达式\n\"no-unused-vars\": [2, {\"vars\": \"all\", \"args\": \"after-used\"}],//不能有声明后未被使用的变量或参数\n\"no-use-before-define\": 2,//未定义前不能使用\n\"no-useless-call\": 2,//禁止不必要的call和apply\n\"no-void\": 2,//禁用void操作符\n\"no-var\": 0,//禁用var，用let和const代替\n\"no-warning-comments\": [1, { \"terms\": [\"todo\", \"fixme\", \"xxx\"], \"location\": \"start\" }],//不能有警告备注\n\"no-with\": 2,//禁用with\n\"array-bracket-spacing\": [2, \"never\"],//是否允许非空数组里面有多余的空格\n\"arrow-parens\": 0,//箭头函数用小括号括起来\n\"arrow-spacing\": 0,//=>的前/后括号\n\"accessor-pairs\": 0,//在对象中使用getter/setter\n\"block-scoped-var\": 0,//块语句中使用var\n\"brace-style\": [1, \"1tbs\"],//大括号风格\n\"callback-return\": 1,//避免多次调用回调什么的\n\"camelcase\": 2,//强制驼峰法命名\n\"comma-dangle\": [2, \"never\"],//对象字面量项尾不能有逗号\n\"comma-spacing\": 0,//逗号前后的空格\n\"comma-style\": [2, \"last\"],//逗号风格，换行时在行首还是行尾\n\"complexity\": [0, 11],//循环复杂度\n\"computed-property-spacing\": [0, \"never\"],//是否允许计算后的键名什么的\n\"consistent-return\": 0,//return 后面是否允许省略\n\"consistent-this\": [2, \"that\"],//this别名\n\"constructor-super\": 0,//非派生类不能调用super，派生类必须调用super\n\"curly\": [2, \"all\"],//必须使用 if(){} 中的{}\n\"default-case\": 2,//switch语句最后必须有default\n\"dot-location\": 0,//对象访问符的位置，换行的时候在行首还是行尾\n\"dot-notation\": [0, { \"allowKeywords\": true }],//避免不必要的方括号\n\"eol-last\": 0,//文件以单一的换行符结束\n\"eqeqeq\": 2,//必须使用全等\n\"func-names\": 0,//函数表达式必须有名字\n\"func-style\": [0, \"declaration\"],//函数风格，规定只能使用函数声明/函数表达式\n\"generator-star-spacing\": 0,//生成器函数*的前后空格\n\"guard-for-in\": 0,//for in循环要用if语句过滤\n\"handle-callback-err\": 0,//nodejs 处理错误\n\"id-length\": 0,//变量名长度\n\"indent\": [2, 4],//缩进风格\n\"init-declarations\": 0,//声明时必须赋初值\n\"key-spacing\": [0, { \"beforeColon\": false, \"afterColon\": true }],//对象字面量中冒号的前后空格\n\"lines-around-comment\": 0,//行前/行后备注\n\"max-depth\": [0, 4],//嵌套块深度\n\"max-len\": [0, 80, 4],//字符串最大长度\n\"max-nested-callbacks\": [0, 2],//回调嵌套深度\n\"max-params\": [0, 3],//函数最多只能有3个参数\n\"max-statements\": [0, 10],//函数内最多有几个声明\n\"new-cap\": 2,//函数名首行大写必须使用new方式调用，首行小写必须用不带new方式调用\n\"new-parens\": 2,//new时必须加小括号\n\"newline-after-var\": 2,//变量声明后是否需要空一行\n\"object-curly-spacing\": [0, \"never\"],//大括号内是否允许不必要的空格\n\"object-shorthand\": 0,//强制对象字面量缩写语法\n\"one-var\": 1,//连续声明\n\"operator-assignment\": [0, \"always\"],//赋值运算符 += -=什么的\n\"operator-linebreak\": [2, \"after\"],//换行时运算符在行尾还是行首\n\"padded-blocks\": 0,//块语句内行首行尾是否要空行\n\"prefer-const\": 0,//首选const\n\"prefer-spread\": 0,//首选展开运算\n\"prefer-reflect\": 0,//首选Reflect的方法\n\"quotes\": [1, \"single\"],//引号类型 `` \"\" ''\n\"quote-props\":[2, \"always\"],//对象字面量中的属性名是否强制双引号\n\"radix\": 2,//parseInt必须指定第二个参数\n\"id-match\": 0,//命名检测\n\"require-yield\": 0,//生成器函数必须有yield\n\"semi\": [2, \"always\"],//语句强制分号结尾\n\"semi-spacing\": [0, {\"before\": false, \"after\": true}],//分号前后空格\n\"sort-vars\": 0,//变量声明时排序\n\"space-after-keywords\": [0, \"always\"],//关键字后面是否要空一格\n\"space-before-blocks\": [0, \"always\"],//不以新行开始的块{前面要不要有空格\n\"space-before-function-paren\": [0, \"always\"],//函数定义时括号前面要不要有空格\n\"space-in-parens\": [0, \"never\"],//小括号里面要不要有空格\n\"space-infix-ops\": 0,//中缀操作符周围要不要有空格\n\"space-return-throw-case\": 2,//return throw case后面要不要加空格\n\"space-unary-ops\": [0, { \"words\": true, \"nonwords\": false }],//一元运算符的前/后要不要加空格\n\"spaced-comment\": 0,//注释风格要不要有空格什么的\n\"strict\": 2,//使用严格模式\n\"use-isnan\": 2,//禁止比较时使用NaN，只能用isNaN()\n\"valid-jsdoc\": 0,//jsdoc规则\n\"valid-typeof\": 2,//必须使用合法的typeof的值\n\"vars-on-top\": 2,//var必须放在作用域顶部\n\"wrap-iife\": [2, \"inside\"],//立即执行函数表达式的小括号风格\n\"wrap-regex\": 0,//正则表达式字面量用小括号包起来\n\"yoda\": [2, \"never\"]//禁止尤达条件\n```\n","source":"_posts/vscode-eslint-规则.md","raw":"---\ntitle: vscode eslint 规则\ndate: 2021-02-25 18:01\ntags:\n---\n\n```javascript\n\"no-alert\": 0,//禁止使用alert confirm prompt\n\"no-array-constructor\": 2,//禁止使用数组构造器\n\"no-bitwise\": 0,//禁止使用按位运算符\n\"no-caller\": 1,//禁止使用arguments.caller或arguments.callee\n\"no-catch-shadow\": 2,//禁止catch子句参数与外部作用域变量同名\n\"no-class-assign\": 2,//禁止给类赋值\n\"no-cond-assign\": 2,//禁止在条件表达式中使用赋值语句\n\"no-console\": 2,//禁止使用console\n\"no-const-assign\": 2,//禁止修改const声明的变量\n\"no-constant-condition\": 2,//禁止在条件中使用常量表达式 if(true) if(1)\n\"no-continue\": 0,//禁止使用continue\n\"no-control-regex\": 2,//禁止在正则表达式中使用控制字符\n\"no-debugger\": 2,//禁止使用debugger\n\"no-delete-var\": 2,//不能对var声明的变量使用delete操作符\n\"no-div-regex\": 1,//不能使用看起来像除法的正则表达式/=foo/\n\"no-dupe-keys\": 2,//在创建对象字面量时不允许键重复 {a:1,a:1}\n\"no-dupe-args\": 2,//函数参数不能重复\n\"no-duplicate-case\": 2,//switch中的case标签不能重复\n\"no-else-return\": 2,//如果if语句里面有return,后面不能跟else语句\n\"no-empty\": 2,//块语句中的内容不能为空\n\"no-empty-character-class\": 2,//正则表达式中的[]内容不能为空\n\"no-empty-label\": 2,//禁止使用空label\n\"no-eq-null\": 2,//禁止对null使用==或!=运算符\n\"no-eval\": 1,//禁止使用eval\n\"no-ex-assign\": 2,//禁止给catch语句中的异常参数赋值\n\"no-extend-native\": 2,//禁止扩展native对象\n\"no-extra-bind\": 2,//禁止不必要的函数绑定\n\"no-extra-boolean-cast\": 2,//禁止不必要的bool转换\n\"no-extra-parens\": 2,//禁止非必要的括号\n\"no-extra-semi\": 2,//禁止多余的冒号\n\"no-fallthrough\": 1,//禁止switch穿透\n\"no-floating-decimal\": 2,//禁止省略浮点数中的0 .5 3.\n\"no-func-assign\": 2,//禁止重复的函数声明\n\"no-implicit-coercion\": 1,//禁止隐式转换\n\"no-implied-eval\": 2,//禁止使用隐式eval\n\"no-inline-comments\": 0,//禁止行内备注\n\"no-inner-declarations\": [2, \"functions\"],//禁止在块语句中使用声明（变量或函数）\n\"no-invalid-regexp\": 2,//禁止无效的正则表达式\n\"no-invalid-this\": 2,//禁止无效的this，只能用在构造器，类，对象字面量\n\"no-irregular-whitespace\": 2,//不能有不规则的空格\n\"no-iterator\": 2,//禁止使用__iterator__ 属性\n\"no-label-var\": 2,//label名不能与var声明的变量名相同\n\"no-labels\": 2,//禁止标签声明\n\"no-lone-blocks\": 2,//禁止不必要的嵌套块\n\"no-lonely-if\": 2,//禁止else语句内只有if语句\n\"no-loop-func\": 1,//禁止在循环中使用函数（如果没有引用外部变量不形成闭包就可以）\n\"no-mixed-requires\": [0, false],//声明时不能混用声明类型\n\"no-mixed-spaces-and-tabs\": [2, false],//禁止混用tab和空格\n\"linebreak-style\": [0, \"windows\"],//换行风格\n\"no-multi-spaces\": 1,//不能用多余的空格\n\"no-multi-str\": 2,//字符串不能用\\换行\n\"no-multiple-empty-lines\": [1, {\"max\": 2}],//空行最多不能超过2行\n\"no-native-reassign\": 2,//不能重写native对象\n\"no-negated-in-lhs\": 2,//in 操作符的左边不能有!\n\"no-nested-ternary\": 0,//禁止使用嵌套的三目运算\n\"no-new\": 1,//禁止在使用new构造一个实例后不赋值\n\"no-new-func\": 1,//禁止使用new Function\n\"no-new-object\": 2,//禁止使用new Object()\n\"no-new-require\": 2,//禁止使用new require\n\"no-new-wrappers\": 2,//禁止使用new创建包装实例，new String new Boolean new Number\n\"no-obj-calls\": 2,//不能调用内置的全局对象，比如Math() JSON()\n\"no-octal\": 2,//禁止使用八进制数字\n\"no-octal-escape\": 2,//禁止使用八进制转义序列\n\"no-param-reassign\": 2,//禁止给参数重新赋值\n\"no-path-concat\": 0,//node中不能使用__dirname或__filename做路径拼接\n\"no-plusplus\": 0,//禁止使用++，--\n\"no-process-env\": 0,//禁止使用process.env\n\"no-process-exit\": 0,//禁止使用process.exit()\n\"no-proto\": 2,//禁止使用__proto__属性\n\"no-redeclare\": 2,//禁止重复声明变量\n\"no-regex-spaces\": 2,//禁止在正则表达式字面量中使用多个空格 /foo bar/\n\"no-restricted-modules\": 0,//如果禁用了指定模块，使用就会报错\n\"no-return-assign\": 1,//return 语句中不能有赋值表达式\n\"no-script-url\": 0,//禁止使用javascript:void(0)\n\"no-self-compare\": 2,//不能比较自身\n\"no-sequences\": 0,//禁止使用逗号运算符\n\"no-shadow\": 2,//外部作用域中的变量不能与它所包含的作用域中的变量或参数同名\n\"no-shadow-restricted-names\": 2,//严格模式中规定的限制标识符不能作为声明时的变量名使用\n\"no-spaced-func\": 2,//函数调用时 函数名与()之间不能有空格\n\"no-sparse-arrays\": 2,//禁止稀疏数组， [1,,2]\n\"no-sync\": 0,//nodejs 禁止同步方法\n\"no-ternary\": 0,//禁止使用三目运算符\n\"no-trailing-spaces\": 1,//一行结束后面不要有空格\n\"no-this-before-super\": 0,//在调用super()之前不能使用this或super\n\"no-throw-literal\": 2,//禁止抛出字面量错误 throw \"error\";\n\"no-undef\": 1,//不能有未定义的变量\n\"no-undef-init\": 2,//变量初始化时不能直接给它赋值为undefined\n\"no-undefined\": 2,//不能使用undefined\n\"no-unexpected-multiline\": 2,//避免多行表达式\n\"no-underscore-dangle\": 1,//标识符不能以_开头或结尾\n\"no-unneeded-ternary\": 2,//禁止不必要的嵌套 var isYes = answer === 1 ? true : false;\n\"no-unreachable\": 2,//不能有无法执行的代码\n\"no-unused-expressions\": 2,//禁止无用的表达式\n\"no-unused-vars\": [2, {\"vars\": \"all\", \"args\": \"after-used\"}],//不能有声明后未被使用的变量或参数\n\"no-use-before-define\": 2,//未定义前不能使用\n\"no-useless-call\": 2,//禁止不必要的call和apply\n\"no-void\": 2,//禁用void操作符\n\"no-var\": 0,//禁用var，用let和const代替\n\"no-warning-comments\": [1, { \"terms\": [\"todo\", \"fixme\", \"xxx\"], \"location\": \"start\" }],//不能有警告备注\n\"no-with\": 2,//禁用with\n\"array-bracket-spacing\": [2, \"never\"],//是否允许非空数组里面有多余的空格\n\"arrow-parens\": 0,//箭头函数用小括号括起来\n\"arrow-spacing\": 0,//=>的前/后括号\n\"accessor-pairs\": 0,//在对象中使用getter/setter\n\"block-scoped-var\": 0,//块语句中使用var\n\"brace-style\": [1, \"1tbs\"],//大括号风格\n\"callback-return\": 1,//避免多次调用回调什么的\n\"camelcase\": 2,//强制驼峰法命名\n\"comma-dangle\": [2, \"never\"],//对象字面量项尾不能有逗号\n\"comma-spacing\": 0,//逗号前后的空格\n\"comma-style\": [2, \"last\"],//逗号风格，换行时在行首还是行尾\n\"complexity\": [0, 11],//循环复杂度\n\"computed-property-spacing\": [0, \"never\"],//是否允许计算后的键名什么的\n\"consistent-return\": 0,//return 后面是否允许省略\n\"consistent-this\": [2, \"that\"],//this别名\n\"constructor-super\": 0,//非派生类不能调用super，派生类必须调用super\n\"curly\": [2, \"all\"],//必须使用 if(){} 中的{}\n\"default-case\": 2,//switch语句最后必须有default\n\"dot-location\": 0,//对象访问符的位置，换行的时候在行首还是行尾\n\"dot-notation\": [0, { \"allowKeywords\": true }],//避免不必要的方括号\n\"eol-last\": 0,//文件以单一的换行符结束\n\"eqeqeq\": 2,//必须使用全等\n\"func-names\": 0,//函数表达式必须有名字\n\"func-style\": [0, \"declaration\"],//函数风格，规定只能使用函数声明/函数表达式\n\"generator-star-spacing\": 0,//生成器函数*的前后空格\n\"guard-for-in\": 0,//for in循环要用if语句过滤\n\"handle-callback-err\": 0,//nodejs 处理错误\n\"id-length\": 0,//变量名长度\n\"indent\": [2, 4],//缩进风格\n\"init-declarations\": 0,//声明时必须赋初值\n\"key-spacing\": [0, { \"beforeColon\": false, \"afterColon\": true }],//对象字面量中冒号的前后空格\n\"lines-around-comment\": 0,//行前/行后备注\n\"max-depth\": [0, 4],//嵌套块深度\n\"max-len\": [0, 80, 4],//字符串最大长度\n\"max-nested-callbacks\": [0, 2],//回调嵌套深度\n\"max-params\": [0, 3],//函数最多只能有3个参数\n\"max-statements\": [0, 10],//函数内最多有几个声明\n\"new-cap\": 2,//函数名首行大写必须使用new方式调用，首行小写必须用不带new方式调用\n\"new-parens\": 2,//new时必须加小括号\n\"newline-after-var\": 2,//变量声明后是否需要空一行\n\"object-curly-spacing\": [0, \"never\"],//大括号内是否允许不必要的空格\n\"object-shorthand\": 0,//强制对象字面量缩写语法\n\"one-var\": 1,//连续声明\n\"operator-assignment\": [0, \"always\"],//赋值运算符 += -=什么的\n\"operator-linebreak\": [2, \"after\"],//换行时运算符在行尾还是行首\n\"padded-blocks\": 0,//块语句内行首行尾是否要空行\n\"prefer-const\": 0,//首选const\n\"prefer-spread\": 0,//首选展开运算\n\"prefer-reflect\": 0,//首选Reflect的方法\n\"quotes\": [1, \"single\"],//引号类型 `` \"\" ''\n\"quote-props\":[2, \"always\"],//对象字面量中的属性名是否强制双引号\n\"radix\": 2,//parseInt必须指定第二个参数\n\"id-match\": 0,//命名检测\n\"require-yield\": 0,//生成器函数必须有yield\n\"semi\": [2, \"always\"],//语句强制分号结尾\n\"semi-spacing\": [0, {\"before\": false, \"after\": true}],//分号前后空格\n\"sort-vars\": 0,//变量声明时排序\n\"space-after-keywords\": [0, \"always\"],//关键字后面是否要空一格\n\"space-before-blocks\": [0, \"always\"],//不以新行开始的块{前面要不要有空格\n\"space-before-function-paren\": [0, \"always\"],//函数定义时括号前面要不要有空格\n\"space-in-parens\": [0, \"never\"],//小括号里面要不要有空格\n\"space-infix-ops\": 0,//中缀操作符周围要不要有空格\n\"space-return-throw-case\": 2,//return throw case后面要不要加空格\n\"space-unary-ops\": [0, { \"words\": true, \"nonwords\": false }],//一元运算符的前/后要不要加空格\n\"spaced-comment\": 0,//注释风格要不要有空格什么的\n\"strict\": 2,//使用严格模式\n\"use-isnan\": 2,//禁止比较时使用NaN，只能用isNaN()\n\"valid-jsdoc\": 0,//jsdoc规则\n\"valid-typeof\": 2,//必须使用合法的typeof的值\n\"vars-on-top\": 2,//var必须放在作用域顶部\n\"wrap-iife\": [2, \"inside\"],//立即执行函数表达式的小括号风格\n\"wrap-regex\": 0,//正则表达式字面量用小括号包起来\n\"yoda\": [2, \"never\"]//禁止尤达条件\n```\n","slug":"vscode-eslint-规则","published":1,"updated":"2022-08-30T07:40:34.726Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7g2c7g000077qu5341v5vhu","content":"<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;no-alert&quot;</span>: <span class=\"number\">0</span>,<span class=\"comment\">//禁止使用alert confirm prompt</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-array-constructor&quot;</span>: <span class=\"number\">2</span>,<span class=\"comment\">//禁止使用数组构造器</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-bitwise&quot;</span>: <span class=\"number\">0</span>,<span class=\"comment\">//禁止使用按位运算符</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-caller&quot;</span>: <span class=\"number\">1</span>,<span class=\"comment\">//禁止使用arguments.caller或arguments.callee</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-catch-shadow&quot;</span>: <span class=\"number\">2</span>,<span class=\"comment\">//禁止catch子句参数与外部作用域变量同名</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-class-assign&quot;</span>: <span class=\"number\">2</span>,<span class=\"comment\">//禁止给类赋值</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-cond-assign&quot;</span>: <span class=\"number\">2</span>,<span class=\"comment\">//禁止在条件表达式中使用赋值语句</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-console&quot;</span>: <span class=\"number\">2</span>,<span class=\"comment\">//禁止使用console</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-const-assign&quot;</span>: <span class=\"number\">2</span>,<span class=\"comment\">//禁止修改const声明的变量</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-constant-condition&quot;</span>: <span class=\"number\">2</span>,<span class=\"comment\">//禁止在条件中使用常量表达式 if(true) if(1)</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-continue&quot;</span>: <span class=\"number\">0</span>,<span class=\"comment\">//禁止使用continue</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-control-regex&quot;</span>: <span class=\"number\">2</span>,<span class=\"comment\">//禁止在正则表达式中使用控制字符</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-debugger&quot;</span>: <span class=\"number\">2</span>,<span class=\"comment\">//禁止使用debugger</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-delete-var&quot;</span>: <span class=\"number\">2</span>,<span class=\"comment\">//不能对var声明的变量使用delete操作符</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-div-regex&quot;</span>: <span class=\"number\">1</span>,<span class=\"comment\">//不能使用看起来像除法的正则表达式/=foo/</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-dupe-keys&quot;</span>: <span class=\"number\">2</span>,<span class=\"comment\">//在创建对象字面量时不允许键重复 &#123;a:1,a:1&#125;</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-dupe-args&quot;</span>: <span class=\"number\">2</span>,<span class=\"comment\">//函数参数不能重复</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-duplicate-case&quot;</span>: <span class=\"number\">2</span>,<span class=\"comment\">//switch中的case标签不能重复</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-else-return&quot;</span>: <span class=\"number\">2</span>,<span class=\"comment\">//如果if语句里面有return,后面不能跟else语句</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-empty&quot;</span>: <span class=\"number\">2</span>,<span class=\"comment\">//块语句中的内容不能为空</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-empty-character-class&quot;</span>: <span class=\"number\">2</span>,<span class=\"comment\">//正则表达式中的[]内容不能为空</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-empty-label&quot;</span>: <span class=\"number\">2</span>,<span class=\"comment\">//禁止使用空label</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-eq-null&quot;</span>: <span class=\"number\">2</span>,<span class=\"comment\">//禁止对null使用==或!=运算符</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-eval&quot;</span>: <span class=\"number\">1</span>,<span class=\"comment\">//禁止使用eval</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-ex-assign&quot;</span>: <span class=\"number\">2</span>,<span class=\"comment\">//禁止给catch语句中的异常参数赋值</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-extend-native&quot;</span>: <span class=\"number\">2</span>,<span class=\"comment\">//禁止扩展native对象</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-extra-bind&quot;</span>: <span class=\"number\">2</span>,<span class=\"comment\">//禁止不必要的函数绑定</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-extra-boolean-cast&quot;</span>: <span class=\"number\">2</span>,<span class=\"comment\">//禁止不必要的bool转换</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-extra-parens&quot;</span>: <span class=\"number\">2</span>,<span class=\"comment\">//禁止非必要的括号</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-extra-semi&quot;</span>: <span class=\"number\">2</span>,<span class=\"comment\">//禁止多余的冒号</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-fallthrough&quot;</span>: <span class=\"number\">1</span>,<span class=\"comment\">//禁止switch穿透</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-floating-decimal&quot;</span>: <span class=\"number\">2</span>,<span class=\"comment\">//禁止省略浮点数中的0 .5 3.</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-func-assign&quot;</span>: <span class=\"number\">2</span>,<span class=\"comment\">//禁止重复的函数声明</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-implicit-coercion&quot;</span>: <span class=\"number\">1</span>,<span class=\"comment\">//禁止隐式转换</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-implied-eval&quot;</span>: <span class=\"number\">2</span>,<span class=\"comment\">//禁止使用隐式eval</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-inline-comments&quot;</span>: <span class=\"number\">0</span>,<span class=\"comment\">//禁止行内备注</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-inner-declarations&quot;</span>: [<span class=\"number\">2</span>, <span class=\"string\">&quot;functions&quot;</span>],<span class=\"comment\">//禁止在块语句中使用声明（变量或函数）</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-invalid-regexp&quot;</span>: <span class=\"number\">2</span>,<span class=\"comment\">//禁止无效的正则表达式</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-invalid-this&quot;</span>: <span class=\"number\">2</span>,<span class=\"comment\">//禁止无效的this，只能用在构造器，类，对象字面量</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-irregular-whitespace&quot;</span>: <span class=\"number\">2</span>,<span class=\"comment\">//不能有不规则的空格</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-iterator&quot;</span>: <span class=\"number\">2</span>,<span class=\"comment\">//禁止使用__iterator__ 属性</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-label-var&quot;</span>: <span class=\"number\">2</span>,<span class=\"comment\">//label名不能与var声明的变量名相同</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-labels&quot;</span>: <span class=\"number\">2</span>,<span class=\"comment\">//禁止标签声明</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-lone-blocks&quot;</span>: <span class=\"number\">2</span>,<span class=\"comment\">//禁止不必要的嵌套块</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-lonely-if&quot;</span>: <span class=\"number\">2</span>,<span class=\"comment\">//禁止else语句内只有if语句</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-loop-func&quot;</span>: <span class=\"number\">1</span>,<span class=\"comment\">//禁止在循环中使用函数（如果没有引用外部变量不形成闭包就可以）</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-mixed-requires&quot;</span>: [<span class=\"number\">0</span>, <span class=\"literal\">false</span>],<span class=\"comment\">//声明时不能混用声明类型</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-mixed-spaces-and-tabs&quot;</span>: [<span class=\"number\">2</span>, <span class=\"literal\">false</span>],<span class=\"comment\">//禁止混用tab和空格</span></span><br><span class=\"line\"><span class=\"string\">&quot;linebreak-style&quot;</span>: [<span class=\"number\">0</span>, <span class=\"string\">&quot;windows&quot;</span>],<span class=\"comment\">//换行风格</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-multi-spaces&quot;</span>: <span class=\"number\">1</span>,<span class=\"comment\">//不能用多余的空格</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-multi-str&quot;</span>: <span class=\"number\">2</span>,<span class=\"comment\">//字符串不能用\\换行</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-multiple-empty-lines&quot;</span>: [<span class=\"number\">1</span>, &#123;<span class=\"string\">&quot;max&quot;</span>: <span class=\"number\">2</span>&#125;],<span class=\"comment\">//空行最多不能超过2行</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-native-reassign&quot;</span>: <span class=\"number\">2</span>,<span class=\"comment\">//不能重写native对象</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-negated-in-lhs&quot;</span>: <span class=\"number\">2</span>,<span class=\"comment\">//in 操作符的左边不能有!</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-nested-ternary&quot;</span>: <span class=\"number\">0</span>,<span class=\"comment\">//禁止使用嵌套的三目运算</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-new&quot;</span>: <span class=\"number\">1</span>,<span class=\"comment\">//禁止在使用new构造一个实例后不赋值</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-new-func&quot;</span>: <span class=\"number\">1</span>,<span class=\"comment\">//禁止使用new Function</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-new-object&quot;</span>: <span class=\"number\">2</span>,<span class=\"comment\">//禁止使用new Object()</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-new-require&quot;</span>: <span class=\"number\">2</span>,<span class=\"comment\">//禁止使用new require</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-new-wrappers&quot;</span>: <span class=\"number\">2</span>,<span class=\"comment\">//禁止使用new创建包装实例，new String new Boolean new Number</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-obj-calls&quot;</span>: <span class=\"number\">2</span>,<span class=\"comment\">//不能调用内置的全局对象，比如Math() JSON()</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-octal&quot;</span>: <span class=\"number\">2</span>,<span class=\"comment\">//禁止使用八进制数字</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-octal-escape&quot;</span>: <span class=\"number\">2</span>,<span class=\"comment\">//禁止使用八进制转义序列</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-param-reassign&quot;</span>: <span class=\"number\">2</span>,<span class=\"comment\">//禁止给参数重新赋值</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-path-concat&quot;</span>: <span class=\"number\">0</span>,<span class=\"comment\">//node中不能使用__dirname或__filename做路径拼接</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-plusplus&quot;</span>: <span class=\"number\">0</span>,<span class=\"comment\">//禁止使用++，--</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-process-env&quot;</span>: <span class=\"number\">0</span>,<span class=\"comment\">//禁止使用process.env</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-process-exit&quot;</span>: <span class=\"number\">0</span>,<span class=\"comment\">//禁止使用process.exit()</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-proto&quot;</span>: <span class=\"number\">2</span>,<span class=\"comment\">//禁止使用__proto__属性</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-redeclare&quot;</span>: <span class=\"number\">2</span>,<span class=\"comment\">//禁止重复声明变量</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-regex-spaces&quot;</span>: <span class=\"number\">2</span>,<span class=\"comment\">//禁止在正则表达式字面量中使用多个空格 /foo bar/</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-restricted-modules&quot;</span>: <span class=\"number\">0</span>,<span class=\"comment\">//如果禁用了指定模块，使用就会报错</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-return-assign&quot;</span>: <span class=\"number\">1</span>,<span class=\"comment\">//return 语句中不能有赋值表达式</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-script-url&quot;</span>: <span class=\"number\">0</span>,<span class=\"comment\">//禁止使用javascript:void(0)</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-self-compare&quot;</span>: <span class=\"number\">2</span>,<span class=\"comment\">//不能比较自身</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-sequences&quot;</span>: <span class=\"number\">0</span>,<span class=\"comment\">//禁止使用逗号运算符</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-shadow&quot;</span>: <span class=\"number\">2</span>,<span class=\"comment\">//外部作用域中的变量不能与它所包含的作用域中的变量或参数同名</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-shadow-restricted-names&quot;</span>: <span class=\"number\">2</span>,<span class=\"comment\">//严格模式中规定的限制标识符不能作为声明时的变量名使用</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-spaced-func&quot;</span>: <span class=\"number\">2</span>,<span class=\"comment\">//函数调用时 函数名与()之间不能有空格</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-sparse-arrays&quot;</span>: <span class=\"number\">2</span>,<span class=\"comment\">//禁止稀疏数组， [1,,2]</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-sync&quot;</span>: <span class=\"number\">0</span>,<span class=\"comment\">//nodejs 禁止同步方法</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-ternary&quot;</span>: <span class=\"number\">0</span>,<span class=\"comment\">//禁止使用三目运算符</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-trailing-spaces&quot;</span>: <span class=\"number\">1</span>,<span class=\"comment\">//一行结束后面不要有空格</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-this-before-super&quot;</span>: <span class=\"number\">0</span>,<span class=\"comment\">//在调用super()之前不能使用this或super</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-throw-literal&quot;</span>: <span class=\"number\">2</span>,<span class=\"comment\">//禁止抛出字面量错误 throw &quot;error&quot;;</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-undef&quot;</span>: <span class=\"number\">1</span>,<span class=\"comment\">//不能有未定义的变量</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-undef-init&quot;</span>: <span class=\"number\">2</span>,<span class=\"comment\">//变量初始化时不能直接给它赋值为undefined</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-undefined&quot;</span>: <span class=\"number\">2</span>,<span class=\"comment\">//不能使用undefined</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-unexpected-multiline&quot;</span>: <span class=\"number\">2</span>,<span class=\"comment\">//避免多行表达式</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-underscore-dangle&quot;</span>: <span class=\"number\">1</span>,<span class=\"comment\">//标识符不能以_开头或结尾</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-unneeded-ternary&quot;</span>: <span class=\"number\">2</span>,<span class=\"comment\">//禁止不必要的嵌套 var isYes = answer === 1 ? true : false;</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-unreachable&quot;</span>: <span class=\"number\">2</span>,<span class=\"comment\">//不能有无法执行的代码</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-unused-expressions&quot;</span>: <span class=\"number\">2</span>,<span class=\"comment\">//禁止无用的表达式</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-unused-vars&quot;</span>: [<span class=\"number\">2</span>, &#123;<span class=\"string\">&quot;vars&quot;</span>: <span class=\"string\">&quot;all&quot;</span>, <span class=\"string\">&quot;args&quot;</span>: <span class=\"string\">&quot;after-used&quot;</span>&#125;],<span class=\"comment\">//不能有声明后未被使用的变量或参数</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-use-before-define&quot;</span>: <span class=\"number\">2</span>,<span class=\"comment\">//未定义前不能使用</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-useless-call&quot;</span>: <span class=\"number\">2</span>,<span class=\"comment\">//禁止不必要的call和apply</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-void&quot;</span>: <span class=\"number\">2</span>,<span class=\"comment\">//禁用void操作符</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-var&quot;</span>: <span class=\"number\">0</span>,<span class=\"comment\">//禁用var，用let和const代替</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-warning-comments&quot;</span>: [<span class=\"number\">1</span>, &#123; <span class=\"string\">&quot;terms&quot;</span>: [<span class=\"string\">&quot;todo&quot;</span>, <span class=\"string\">&quot;fixme&quot;</span>, <span class=\"string\">&quot;xxx&quot;</span>], <span class=\"string\">&quot;location&quot;</span>: <span class=\"string\">&quot;start&quot;</span> &#125;],<span class=\"comment\">//不能有警告备注</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-with&quot;</span>: <span class=\"number\">2</span>,<span class=\"comment\">//禁用with</span></span><br><span class=\"line\"><span class=\"string\">&quot;array-bracket-spacing&quot;</span>: [<span class=\"number\">2</span>, <span class=\"string\">&quot;never&quot;</span>],<span class=\"comment\">//是否允许非空数组里面有多余的空格</span></span><br><span class=\"line\"><span class=\"string\">&quot;arrow-parens&quot;</span>: <span class=\"number\">0</span>,<span class=\"comment\">//箭头函数用小括号括起来</span></span><br><span class=\"line\"><span class=\"string\">&quot;arrow-spacing&quot;</span>: <span class=\"number\">0</span>,<span class=\"comment\">//=&gt;的前/后括号</span></span><br><span class=\"line\"><span class=\"string\">&quot;accessor-pairs&quot;</span>: <span class=\"number\">0</span>,<span class=\"comment\">//在对象中使用getter/setter</span></span><br><span class=\"line\"><span class=\"string\">&quot;block-scoped-var&quot;</span>: <span class=\"number\">0</span>,<span class=\"comment\">//块语句中使用var</span></span><br><span class=\"line\"><span class=\"string\">&quot;brace-style&quot;</span>: [<span class=\"number\">1</span>, <span class=\"string\">&quot;1tbs&quot;</span>],<span class=\"comment\">//大括号风格</span></span><br><span class=\"line\"><span class=\"string\">&quot;callback-return&quot;</span>: <span class=\"number\">1</span>,<span class=\"comment\">//避免多次调用回调什么的</span></span><br><span class=\"line\"><span class=\"string\">&quot;camelcase&quot;</span>: <span class=\"number\">2</span>,<span class=\"comment\">//强制驼峰法命名</span></span><br><span class=\"line\"><span class=\"string\">&quot;comma-dangle&quot;</span>: [<span class=\"number\">2</span>, <span class=\"string\">&quot;never&quot;</span>],<span class=\"comment\">//对象字面量项尾不能有逗号</span></span><br><span class=\"line\"><span class=\"string\">&quot;comma-spacing&quot;</span>: <span class=\"number\">0</span>,<span class=\"comment\">//逗号前后的空格</span></span><br><span class=\"line\"><span class=\"string\">&quot;comma-style&quot;</span>: [<span class=\"number\">2</span>, <span class=\"string\">&quot;last&quot;</span>],<span class=\"comment\">//逗号风格，换行时在行首还是行尾</span></span><br><span class=\"line\"><span class=\"string\">&quot;complexity&quot;</span>: [<span class=\"number\">0</span>, <span class=\"number\">11</span>],<span class=\"comment\">//循环复杂度</span></span><br><span class=\"line\"><span class=\"string\">&quot;computed-property-spacing&quot;</span>: [<span class=\"number\">0</span>, <span class=\"string\">&quot;never&quot;</span>],<span class=\"comment\">//是否允许计算后的键名什么的</span></span><br><span class=\"line\"><span class=\"string\">&quot;consistent-return&quot;</span>: <span class=\"number\">0</span>,<span class=\"comment\">//return 后面是否允许省略</span></span><br><span class=\"line\"><span class=\"string\">&quot;consistent-this&quot;</span>: [<span class=\"number\">2</span>, <span class=\"string\">&quot;that&quot;</span>],<span class=\"comment\">//this别名</span></span><br><span class=\"line\"><span class=\"string\">&quot;constructor-super&quot;</span>: <span class=\"number\">0</span>,<span class=\"comment\">//非派生类不能调用super，派生类必须调用super</span></span><br><span class=\"line\"><span class=\"string\">&quot;curly&quot;</span>: [<span class=\"number\">2</span>, <span class=\"string\">&quot;all&quot;</span>],<span class=\"comment\">//必须使用 if()&#123;&#125; 中的&#123;&#125;</span></span><br><span class=\"line\"><span class=\"string\">&quot;default-case&quot;</span>: <span class=\"number\">2</span>,<span class=\"comment\">//switch语句最后必须有default</span></span><br><span class=\"line\"><span class=\"string\">&quot;dot-location&quot;</span>: <span class=\"number\">0</span>,<span class=\"comment\">//对象访问符的位置，换行的时候在行首还是行尾</span></span><br><span class=\"line\"><span class=\"string\">&quot;dot-notation&quot;</span>: [<span class=\"number\">0</span>, &#123; <span class=\"string\">&quot;allowKeywords&quot;</span>: <span class=\"literal\">true</span> &#125;],<span class=\"comment\">//避免不必要的方括号</span></span><br><span class=\"line\"><span class=\"string\">&quot;eol-last&quot;</span>: <span class=\"number\">0</span>,<span class=\"comment\">//文件以单一的换行符结束</span></span><br><span class=\"line\"><span class=\"string\">&quot;eqeqeq&quot;</span>: <span class=\"number\">2</span>,<span class=\"comment\">//必须使用全等</span></span><br><span class=\"line\"><span class=\"string\">&quot;func-names&quot;</span>: <span class=\"number\">0</span>,<span class=\"comment\">//函数表达式必须有名字</span></span><br><span class=\"line\"><span class=\"string\">&quot;func-style&quot;</span>: [<span class=\"number\">0</span>, <span class=\"string\">&quot;declaration&quot;</span>],<span class=\"comment\">//函数风格，规定只能使用函数声明/函数表达式</span></span><br><span class=\"line\"><span class=\"string\">&quot;generator-star-spacing&quot;</span>: <span class=\"number\">0</span>,<span class=\"comment\">//生成器函数*的前后空格</span></span><br><span class=\"line\"><span class=\"string\">&quot;guard-for-in&quot;</span>: <span class=\"number\">0</span>,<span class=\"comment\">//for in循环要用if语句过滤</span></span><br><span class=\"line\"><span class=\"string\">&quot;handle-callback-err&quot;</span>: <span class=\"number\">0</span>,<span class=\"comment\">//nodejs 处理错误</span></span><br><span class=\"line\"><span class=\"string\">&quot;id-length&quot;</span>: <span class=\"number\">0</span>,<span class=\"comment\">//变量名长度</span></span><br><span class=\"line\"><span class=\"string\">&quot;indent&quot;</span>: [<span class=\"number\">2</span>, <span class=\"number\">4</span>],<span class=\"comment\">//缩进风格</span></span><br><span class=\"line\"><span class=\"string\">&quot;init-declarations&quot;</span>: <span class=\"number\">0</span>,<span class=\"comment\">//声明时必须赋初值</span></span><br><span class=\"line\"><span class=\"string\">&quot;key-spacing&quot;</span>: [<span class=\"number\">0</span>, &#123; <span class=\"string\">&quot;beforeColon&quot;</span>: <span class=\"literal\">false</span>, <span class=\"string\">&quot;afterColon&quot;</span>: <span class=\"literal\">true</span> &#125;],<span class=\"comment\">//对象字面量中冒号的前后空格</span></span><br><span class=\"line\"><span class=\"string\">&quot;lines-around-comment&quot;</span>: <span class=\"number\">0</span>,<span class=\"comment\">//行前/行后备注</span></span><br><span class=\"line\"><span class=\"string\">&quot;max-depth&quot;</span>: [<span class=\"number\">0</span>, <span class=\"number\">4</span>],<span class=\"comment\">//嵌套块深度</span></span><br><span class=\"line\"><span class=\"string\">&quot;max-len&quot;</span>: [<span class=\"number\">0</span>, <span class=\"number\">80</span>, <span class=\"number\">4</span>],<span class=\"comment\">//字符串最大长度</span></span><br><span class=\"line\"><span class=\"string\">&quot;max-nested-callbacks&quot;</span>: [<span class=\"number\">0</span>, <span class=\"number\">2</span>],<span class=\"comment\">//回调嵌套深度</span></span><br><span class=\"line\"><span class=\"string\">&quot;max-params&quot;</span>: [<span class=\"number\">0</span>, <span class=\"number\">3</span>],<span class=\"comment\">//函数最多只能有3个参数</span></span><br><span class=\"line\"><span class=\"string\">&quot;max-statements&quot;</span>: [<span class=\"number\">0</span>, <span class=\"number\">10</span>],<span class=\"comment\">//函数内最多有几个声明</span></span><br><span class=\"line\"><span class=\"string\">&quot;new-cap&quot;</span>: <span class=\"number\">2</span>,<span class=\"comment\">//函数名首行大写必须使用new方式调用，首行小写必须用不带new方式调用</span></span><br><span class=\"line\"><span class=\"string\">&quot;new-parens&quot;</span>: <span class=\"number\">2</span>,<span class=\"comment\">//new时必须加小括号</span></span><br><span class=\"line\"><span class=\"string\">&quot;newline-after-var&quot;</span>: <span class=\"number\">2</span>,<span class=\"comment\">//变量声明后是否需要空一行</span></span><br><span class=\"line\"><span class=\"string\">&quot;object-curly-spacing&quot;</span>: [<span class=\"number\">0</span>, <span class=\"string\">&quot;never&quot;</span>],<span class=\"comment\">//大括号内是否允许不必要的空格</span></span><br><span class=\"line\"><span class=\"string\">&quot;object-shorthand&quot;</span>: <span class=\"number\">0</span>,<span class=\"comment\">//强制对象字面量缩写语法</span></span><br><span class=\"line\"><span class=\"string\">&quot;one-var&quot;</span>: <span class=\"number\">1</span>,<span class=\"comment\">//连续声明</span></span><br><span class=\"line\"><span class=\"string\">&quot;operator-assignment&quot;</span>: [<span class=\"number\">0</span>, <span class=\"string\">&quot;always&quot;</span>],<span class=\"comment\">//赋值运算符 += -=什么的</span></span><br><span class=\"line\"><span class=\"string\">&quot;operator-linebreak&quot;</span>: [<span class=\"number\">2</span>, <span class=\"string\">&quot;after&quot;</span>],<span class=\"comment\">//换行时运算符在行尾还是行首</span></span><br><span class=\"line\"><span class=\"string\">&quot;padded-blocks&quot;</span>: <span class=\"number\">0</span>,<span class=\"comment\">//块语句内行首行尾是否要空行</span></span><br><span class=\"line\"><span class=\"string\">&quot;prefer-const&quot;</span>: <span class=\"number\">0</span>,<span class=\"comment\">//首选const</span></span><br><span class=\"line\"><span class=\"string\">&quot;prefer-spread&quot;</span>: <span class=\"number\">0</span>,<span class=\"comment\">//首选展开运算</span></span><br><span class=\"line\"><span class=\"string\">&quot;prefer-reflect&quot;</span>: <span class=\"number\">0</span>,<span class=\"comment\">//首选Reflect的方法</span></span><br><span class=\"line\"><span class=\"string\">&quot;quotes&quot;</span>: [<span class=\"number\">1</span>, <span class=\"string\">&quot;single&quot;</span>],<span class=\"comment\">//引号类型 `` &quot;&quot; &#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">&quot;quote-props&quot;</span>:[<span class=\"number\">2</span>, <span class=\"string\">&quot;always&quot;</span>],<span class=\"comment\">//对象字面量中的属性名是否强制双引号</span></span><br><span class=\"line\"><span class=\"string\">&quot;radix&quot;</span>: <span class=\"number\">2</span>,<span class=\"comment\">//parseInt必须指定第二个参数</span></span><br><span class=\"line\"><span class=\"string\">&quot;id-match&quot;</span>: <span class=\"number\">0</span>,<span class=\"comment\">//命名检测</span></span><br><span class=\"line\"><span class=\"string\">&quot;require-yield&quot;</span>: <span class=\"number\">0</span>,<span class=\"comment\">//生成器函数必须有yield</span></span><br><span class=\"line\"><span class=\"string\">&quot;semi&quot;</span>: [<span class=\"number\">2</span>, <span class=\"string\">&quot;always&quot;</span>],<span class=\"comment\">//语句强制分号结尾</span></span><br><span class=\"line\"><span class=\"string\">&quot;semi-spacing&quot;</span>: [<span class=\"number\">0</span>, &#123;<span class=\"string\">&quot;before&quot;</span>: <span class=\"literal\">false</span>, <span class=\"string\">&quot;after&quot;</span>: <span class=\"literal\">true</span>&#125;],<span class=\"comment\">//分号前后空格</span></span><br><span class=\"line\"><span class=\"string\">&quot;sort-vars&quot;</span>: <span class=\"number\">0</span>,<span class=\"comment\">//变量声明时排序</span></span><br><span class=\"line\"><span class=\"string\">&quot;space-after-keywords&quot;</span>: [<span class=\"number\">0</span>, <span class=\"string\">&quot;always&quot;</span>],<span class=\"comment\">//关键字后面是否要空一格</span></span><br><span class=\"line\"><span class=\"string\">&quot;space-before-blocks&quot;</span>: [<span class=\"number\">0</span>, <span class=\"string\">&quot;always&quot;</span>],<span class=\"comment\">//不以新行开始的块&#123;前面要不要有空格</span></span><br><span class=\"line\"><span class=\"string\">&quot;space-before-function-paren&quot;</span>: [<span class=\"number\">0</span>, <span class=\"string\">&quot;always&quot;</span>],<span class=\"comment\">//函数定义时括号前面要不要有空格</span></span><br><span class=\"line\"><span class=\"string\">&quot;space-in-parens&quot;</span>: [<span class=\"number\">0</span>, <span class=\"string\">&quot;never&quot;</span>],<span class=\"comment\">//小括号里面要不要有空格</span></span><br><span class=\"line\"><span class=\"string\">&quot;space-infix-ops&quot;</span>: <span class=\"number\">0</span>,<span class=\"comment\">//中缀操作符周围要不要有空格</span></span><br><span class=\"line\"><span class=\"string\">&quot;space-return-throw-case&quot;</span>: <span class=\"number\">2</span>,<span class=\"comment\">//return throw case后面要不要加空格</span></span><br><span class=\"line\"><span class=\"string\">&quot;space-unary-ops&quot;</span>: [<span class=\"number\">0</span>, &#123; <span class=\"string\">&quot;words&quot;</span>: <span class=\"literal\">true</span>, <span class=\"string\">&quot;nonwords&quot;</span>: <span class=\"literal\">false</span> &#125;],<span class=\"comment\">//一元运算符的前/后要不要加空格</span></span><br><span class=\"line\"><span class=\"string\">&quot;spaced-comment&quot;</span>: <span class=\"number\">0</span>,<span class=\"comment\">//注释风格要不要有空格什么的</span></span><br><span class=\"line\"><span class=\"string\">&quot;strict&quot;</span>: <span class=\"number\">2</span>,<span class=\"comment\">//使用严格模式</span></span><br><span class=\"line\"><span class=\"string\">&quot;use-isnan&quot;</span>: <span class=\"number\">2</span>,<span class=\"comment\">//禁止比较时使用NaN，只能用isNaN()</span></span><br><span class=\"line\"><span class=\"string\">&quot;valid-jsdoc&quot;</span>: <span class=\"number\">0</span>,<span class=\"comment\">//jsdoc规则</span></span><br><span class=\"line\"><span class=\"string\">&quot;valid-typeof&quot;</span>: <span class=\"number\">2</span>,<span class=\"comment\">//必须使用合法的typeof的值</span></span><br><span class=\"line\"><span class=\"string\">&quot;vars-on-top&quot;</span>: <span class=\"number\">2</span>,<span class=\"comment\">//var必须放在作用域顶部</span></span><br><span class=\"line\"><span class=\"string\">&quot;wrap-iife&quot;</span>: [<span class=\"number\">2</span>, <span class=\"string\">&quot;inside&quot;</span>],<span class=\"comment\">//立即执行函数表达式的小括号风格</span></span><br><span class=\"line\"><span class=\"string\">&quot;wrap-regex&quot;</span>: <span class=\"number\">0</span>,<span class=\"comment\">//正则表达式字面量用小括号包起来</span></span><br><span class=\"line\"><span class=\"string\">&quot;yoda&quot;</span>: [<span class=\"number\">2</span>, <span class=\"string\">&quot;never&quot;</span>]<span class=\"comment\">//禁止尤达条件</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;no-alert&quot;</span>: <span class=\"number\">0</span>,<span class=\"comment\">//禁止使用alert confirm prompt</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-array-constructor&quot;</span>: <span class=\"number\">2</span>,<span class=\"comment\">//禁止使用数组构造器</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-bitwise&quot;</span>: <span class=\"number\">0</span>,<span class=\"comment\">//禁止使用按位运算符</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-caller&quot;</span>: <span class=\"number\">1</span>,<span class=\"comment\">//禁止使用arguments.caller或arguments.callee</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-catch-shadow&quot;</span>: <span class=\"number\">2</span>,<span class=\"comment\">//禁止catch子句参数与外部作用域变量同名</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-class-assign&quot;</span>: <span class=\"number\">2</span>,<span class=\"comment\">//禁止给类赋值</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-cond-assign&quot;</span>: <span class=\"number\">2</span>,<span class=\"comment\">//禁止在条件表达式中使用赋值语句</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-console&quot;</span>: <span class=\"number\">2</span>,<span class=\"comment\">//禁止使用console</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-const-assign&quot;</span>: <span class=\"number\">2</span>,<span class=\"comment\">//禁止修改const声明的变量</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-constant-condition&quot;</span>: <span class=\"number\">2</span>,<span class=\"comment\">//禁止在条件中使用常量表达式 if(true) if(1)</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-continue&quot;</span>: <span class=\"number\">0</span>,<span class=\"comment\">//禁止使用continue</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-control-regex&quot;</span>: <span class=\"number\">2</span>,<span class=\"comment\">//禁止在正则表达式中使用控制字符</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-debugger&quot;</span>: <span class=\"number\">2</span>,<span class=\"comment\">//禁止使用debugger</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-delete-var&quot;</span>: <span class=\"number\">2</span>,<span class=\"comment\">//不能对var声明的变量使用delete操作符</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-div-regex&quot;</span>: <span class=\"number\">1</span>,<span class=\"comment\">//不能使用看起来像除法的正则表达式/=foo/</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-dupe-keys&quot;</span>: <span class=\"number\">2</span>,<span class=\"comment\">//在创建对象字面量时不允许键重复 &#123;a:1,a:1&#125;</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-dupe-args&quot;</span>: <span class=\"number\">2</span>,<span class=\"comment\">//函数参数不能重复</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-duplicate-case&quot;</span>: <span class=\"number\">2</span>,<span class=\"comment\">//switch中的case标签不能重复</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-else-return&quot;</span>: <span class=\"number\">2</span>,<span class=\"comment\">//如果if语句里面有return,后面不能跟else语句</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-empty&quot;</span>: <span class=\"number\">2</span>,<span class=\"comment\">//块语句中的内容不能为空</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-empty-character-class&quot;</span>: <span class=\"number\">2</span>,<span class=\"comment\">//正则表达式中的[]内容不能为空</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-empty-label&quot;</span>: <span class=\"number\">2</span>,<span class=\"comment\">//禁止使用空label</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-eq-null&quot;</span>: <span class=\"number\">2</span>,<span class=\"comment\">//禁止对null使用==或!=运算符</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-eval&quot;</span>: <span class=\"number\">1</span>,<span class=\"comment\">//禁止使用eval</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-ex-assign&quot;</span>: <span class=\"number\">2</span>,<span class=\"comment\">//禁止给catch语句中的异常参数赋值</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-extend-native&quot;</span>: <span class=\"number\">2</span>,<span class=\"comment\">//禁止扩展native对象</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-extra-bind&quot;</span>: <span class=\"number\">2</span>,<span class=\"comment\">//禁止不必要的函数绑定</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-extra-boolean-cast&quot;</span>: <span class=\"number\">2</span>,<span class=\"comment\">//禁止不必要的bool转换</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-extra-parens&quot;</span>: <span class=\"number\">2</span>,<span class=\"comment\">//禁止非必要的括号</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-extra-semi&quot;</span>: <span class=\"number\">2</span>,<span class=\"comment\">//禁止多余的冒号</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-fallthrough&quot;</span>: <span class=\"number\">1</span>,<span class=\"comment\">//禁止switch穿透</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-floating-decimal&quot;</span>: <span class=\"number\">2</span>,<span class=\"comment\">//禁止省略浮点数中的0 .5 3.</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-func-assign&quot;</span>: <span class=\"number\">2</span>,<span class=\"comment\">//禁止重复的函数声明</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-implicit-coercion&quot;</span>: <span class=\"number\">1</span>,<span class=\"comment\">//禁止隐式转换</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-implied-eval&quot;</span>: <span class=\"number\">2</span>,<span class=\"comment\">//禁止使用隐式eval</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-inline-comments&quot;</span>: <span class=\"number\">0</span>,<span class=\"comment\">//禁止行内备注</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-inner-declarations&quot;</span>: [<span class=\"number\">2</span>, <span class=\"string\">&quot;functions&quot;</span>],<span class=\"comment\">//禁止在块语句中使用声明（变量或函数）</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-invalid-regexp&quot;</span>: <span class=\"number\">2</span>,<span class=\"comment\">//禁止无效的正则表达式</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-invalid-this&quot;</span>: <span class=\"number\">2</span>,<span class=\"comment\">//禁止无效的this，只能用在构造器，类，对象字面量</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-irregular-whitespace&quot;</span>: <span class=\"number\">2</span>,<span class=\"comment\">//不能有不规则的空格</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-iterator&quot;</span>: <span class=\"number\">2</span>,<span class=\"comment\">//禁止使用__iterator__ 属性</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-label-var&quot;</span>: <span class=\"number\">2</span>,<span class=\"comment\">//label名不能与var声明的变量名相同</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-labels&quot;</span>: <span class=\"number\">2</span>,<span class=\"comment\">//禁止标签声明</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-lone-blocks&quot;</span>: <span class=\"number\">2</span>,<span class=\"comment\">//禁止不必要的嵌套块</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-lonely-if&quot;</span>: <span class=\"number\">2</span>,<span class=\"comment\">//禁止else语句内只有if语句</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-loop-func&quot;</span>: <span class=\"number\">1</span>,<span class=\"comment\">//禁止在循环中使用函数（如果没有引用外部变量不形成闭包就可以）</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-mixed-requires&quot;</span>: [<span class=\"number\">0</span>, <span class=\"literal\">false</span>],<span class=\"comment\">//声明时不能混用声明类型</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-mixed-spaces-and-tabs&quot;</span>: [<span class=\"number\">2</span>, <span class=\"literal\">false</span>],<span class=\"comment\">//禁止混用tab和空格</span></span><br><span class=\"line\"><span class=\"string\">&quot;linebreak-style&quot;</span>: [<span class=\"number\">0</span>, <span class=\"string\">&quot;windows&quot;</span>],<span class=\"comment\">//换行风格</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-multi-spaces&quot;</span>: <span class=\"number\">1</span>,<span class=\"comment\">//不能用多余的空格</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-multi-str&quot;</span>: <span class=\"number\">2</span>,<span class=\"comment\">//字符串不能用\\换行</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-multiple-empty-lines&quot;</span>: [<span class=\"number\">1</span>, &#123;<span class=\"string\">&quot;max&quot;</span>: <span class=\"number\">2</span>&#125;],<span class=\"comment\">//空行最多不能超过2行</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-native-reassign&quot;</span>: <span class=\"number\">2</span>,<span class=\"comment\">//不能重写native对象</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-negated-in-lhs&quot;</span>: <span class=\"number\">2</span>,<span class=\"comment\">//in 操作符的左边不能有!</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-nested-ternary&quot;</span>: <span class=\"number\">0</span>,<span class=\"comment\">//禁止使用嵌套的三目运算</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-new&quot;</span>: <span class=\"number\">1</span>,<span class=\"comment\">//禁止在使用new构造一个实例后不赋值</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-new-func&quot;</span>: <span class=\"number\">1</span>,<span class=\"comment\">//禁止使用new Function</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-new-object&quot;</span>: <span class=\"number\">2</span>,<span class=\"comment\">//禁止使用new Object()</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-new-require&quot;</span>: <span class=\"number\">2</span>,<span class=\"comment\">//禁止使用new require</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-new-wrappers&quot;</span>: <span class=\"number\">2</span>,<span class=\"comment\">//禁止使用new创建包装实例，new String new Boolean new Number</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-obj-calls&quot;</span>: <span class=\"number\">2</span>,<span class=\"comment\">//不能调用内置的全局对象，比如Math() JSON()</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-octal&quot;</span>: <span class=\"number\">2</span>,<span class=\"comment\">//禁止使用八进制数字</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-octal-escape&quot;</span>: <span class=\"number\">2</span>,<span class=\"comment\">//禁止使用八进制转义序列</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-param-reassign&quot;</span>: <span class=\"number\">2</span>,<span class=\"comment\">//禁止给参数重新赋值</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-path-concat&quot;</span>: <span class=\"number\">0</span>,<span class=\"comment\">//node中不能使用__dirname或__filename做路径拼接</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-plusplus&quot;</span>: <span class=\"number\">0</span>,<span class=\"comment\">//禁止使用++，--</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-process-env&quot;</span>: <span class=\"number\">0</span>,<span class=\"comment\">//禁止使用process.env</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-process-exit&quot;</span>: <span class=\"number\">0</span>,<span class=\"comment\">//禁止使用process.exit()</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-proto&quot;</span>: <span class=\"number\">2</span>,<span class=\"comment\">//禁止使用__proto__属性</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-redeclare&quot;</span>: <span class=\"number\">2</span>,<span class=\"comment\">//禁止重复声明变量</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-regex-spaces&quot;</span>: <span class=\"number\">2</span>,<span class=\"comment\">//禁止在正则表达式字面量中使用多个空格 /foo bar/</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-restricted-modules&quot;</span>: <span class=\"number\">0</span>,<span class=\"comment\">//如果禁用了指定模块，使用就会报错</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-return-assign&quot;</span>: <span class=\"number\">1</span>,<span class=\"comment\">//return 语句中不能有赋值表达式</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-script-url&quot;</span>: <span class=\"number\">0</span>,<span class=\"comment\">//禁止使用javascript:void(0)</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-self-compare&quot;</span>: <span class=\"number\">2</span>,<span class=\"comment\">//不能比较自身</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-sequences&quot;</span>: <span class=\"number\">0</span>,<span class=\"comment\">//禁止使用逗号运算符</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-shadow&quot;</span>: <span class=\"number\">2</span>,<span class=\"comment\">//外部作用域中的变量不能与它所包含的作用域中的变量或参数同名</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-shadow-restricted-names&quot;</span>: <span class=\"number\">2</span>,<span class=\"comment\">//严格模式中规定的限制标识符不能作为声明时的变量名使用</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-spaced-func&quot;</span>: <span class=\"number\">2</span>,<span class=\"comment\">//函数调用时 函数名与()之间不能有空格</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-sparse-arrays&quot;</span>: <span class=\"number\">2</span>,<span class=\"comment\">//禁止稀疏数组， [1,,2]</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-sync&quot;</span>: <span class=\"number\">0</span>,<span class=\"comment\">//nodejs 禁止同步方法</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-ternary&quot;</span>: <span class=\"number\">0</span>,<span class=\"comment\">//禁止使用三目运算符</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-trailing-spaces&quot;</span>: <span class=\"number\">1</span>,<span class=\"comment\">//一行结束后面不要有空格</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-this-before-super&quot;</span>: <span class=\"number\">0</span>,<span class=\"comment\">//在调用super()之前不能使用this或super</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-throw-literal&quot;</span>: <span class=\"number\">2</span>,<span class=\"comment\">//禁止抛出字面量错误 throw &quot;error&quot;;</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-undef&quot;</span>: <span class=\"number\">1</span>,<span class=\"comment\">//不能有未定义的变量</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-undef-init&quot;</span>: <span class=\"number\">2</span>,<span class=\"comment\">//变量初始化时不能直接给它赋值为undefined</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-undefined&quot;</span>: <span class=\"number\">2</span>,<span class=\"comment\">//不能使用undefined</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-unexpected-multiline&quot;</span>: <span class=\"number\">2</span>,<span class=\"comment\">//避免多行表达式</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-underscore-dangle&quot;</span>: <span class=\"number\">1</span>,<span class=\"comment\">//标识符不能以_开头或结尾</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-unneeded-ternary&quot;</span>: <span class=\"number\">2</span>,<span class=\"comment\">//禁止不必要的嵌套 var isYes = answer === 1 ? true : false;</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-unreachable&quot;</span>: <span class=\"number\">2</span>,<span class=\"comment\">//不能有无法执行的代码</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-unused-expressions&quot;</span>: <span class=\"number\">2</span>,<span class=\"comment\">//禁止无用的表达式</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-unused-vars&quot;</span>: [<span class=\"number\">2</span>, &#123;<span class=\"string\">&quot;vars&quot;</span>: <span class=\"string\">&quot;all&quot;</span>, <span class=\"string\">&quot;args&quot;</span>: <span class=\"string\">&quot;after-used&quot;</span>&#125;],<span class=\"comment\">//不能有声明后未被使用的变量或参数</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-use-before-define&quot;</span>: <span class=\"number\">2</span>,<span class=\"comment\">//未定义前不能使用</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-useless-call&quot;</span>: <span class=\"number\">2</span>,<span class=\"comment\">//禁止不必要的call和apply</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-void&quot;</span>: <span class=\"number\">2</span>,<span class=\"comment\">//禁用void操作符</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-var&quot;</span>: <span class=\"number\">0</span>,<span class=\"comment\">//禁用var，用let和const代替</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-warning-comments&quot;</span>: [<span class=\"number\">1</span>, &#123; <span class=\"string\">&quot;terms&quot;</span>: [<span class=\"string\">&quot;todo&quot;</span>, <span class=\"string\">&quot;fixme&quot;</span>, <span class=\"string\">&quot;xxx&quot;</span>], <span class=\"string\">&quot;location&quot;</span>: <span class=\"string\">&quot;start&quot;</span> &#125;],<span class=\"comment\">//不能有警告备注</span></span><br><span class=\"line\"><span class=\"string\">&quot;no-with&quot;</span>: <span class=\"number\">2</span>,<span class=\"comment\">//禁用with</span></span><br><span class=\"line\"><span class=\"string\">&quot;array-bracket-spacing&quot;</span>: [<span class=\"number\">2</span>, <span class=\"string\">&quot;never&quot;</span>],<span class=\"comment\">//是否允许非空数组里面有多余的空格</span></span><br><span class=\"line\"><span class=\"string\">&quot;arrow-parens&quot;</span>: <span class=\"number\">0</span>,<span class=\"comment\">//箭头函数用小括号括起来</span></span><br><span class=\"line\"><span class=\"string\">&quot;arrow-spacing&quot;</span>: <span class=\"number\">0</span>,<span class=\"comment\">//=&gt;的前/后括号</span></span><br><span class=\"line\"><span class=\"string\">&quot;accessor-pairs&quot;</span>: <span class=\"number\">0</span>,<span class=\"comment\">//在对象中使用getter/setter</span></span><br><span class=\"line\"><span class=\"string\">&quot;block-scoped-var&quot;</span>: <span class=\"number\">0</span>,<span class=\"comment\">//块语句中使用var</span></span><br><span class=\"line\"><span class=\"string\">&quot;brace-style&quot;</span>: [<span class=\"number\">1</span>, <span class=\"string\">&quot;1tbs&quot;</span>],<span class=\"comment\">//大括号风格</span></span><br><span class=\"line\"><span class=\"string\">&quot;callback-return&quot;</span>: <span class=\"number\">1</span>,<span class=\"comment\">//避免多次调用回调什么的</span></span><br><span class=\"line\"><span class=\"string\">&quot;camelcase&quot;</span>: <span class=\"number\">2</span>,<span class=\"comment\">//强制驼峰法命名</span></span><br><span class=\"line\"><span class=\"string\">&quot;comma-dangle&quot;</span>: [<span class=\"number\">2</span>, <span class=\"string\">&quot;never&quot;</span>],<span class=\"comment\">//对象字面量项尾不能有逗号</span></span><br><span class=\"line\"><span class=\"string\">&quot;comma-spacing&quot;</span>: <span class=\"number\">0</span>,<span class=\"comment\">//逗号前后的空格</span></span><br><span class=\"line\"><span class=\"string\">&quot;comma-style&quot;</span>: [<span class=\"number\">2</span>, <span class=\"string\">&quot;last&quot;</span>],<span class=\"comment\">//逗号风格，换行时在行首还是行尾</span></span><br><span class=\"line\"><span class=\"string\">&quot;complexity&quot;</span>: [<span class=\"number\">0</span>, <span class=\"number\">11</span>],<span class=\"comment\">//循环复杂度</span></span><br><span class=\"line\"><span class=\"string\">&quot;computed-property-spacing&quot;</span>: [<span class=\"number\">0</span>, <span class=\"string\">&quot;never&quot;</span>],<span class=\"comment\">//是否允许计算后的键名什么的</span></span><br><span class=\"line\"><span class=\"string\">&quot;consistent-return&quot;</span>: <span class=\"number\">0</span>,<span class=\"comment\">//return 后面是否允许省略</span></span><br><span class=\"line\"><span class=\"string\">&quot;consistent-this&quot;</span>: [<span class=\"number\">2</span>, <span class=\"string\">&quot;that&quot;</span>],<span class=\"comment\">//this别名</span></span><br><span class=\"line\"><span class=\"string\">&quot;constructor-super&quot;</span>: <span class=\"number\">0</span>,<span class=\"comment\">//非派生类不能调用super，派生类必须调用super</span></span><br><span class=\"line\"><span class=\"string\">&quot;curly&quot;</span>: [<span class=\"number\">2</span>, <span class=\"string\">&quot;all&quot;</span>],<span class=\"comment\">//必须使用 if()&#123;&#125; 中的&#123;&#125;</span></span><br><span class=\"line\"><span class=\"string\">&quot;default-case&quot;</span>: <span class=\"number\">2</span>,<span class=\"comment\">//switch语句最后必须有default</span></span><br><span class=\"line\"><span class=\"string\">&quot;dot-location&quot;</span>: <span class=\"number\">0</span>,<span class=\"comment\">//对象访问符的位置，换行的时候在行首还是行尾</span></span><br><span class=\"line\"><span class=\"string\">&quot;dot-notation&quot;</span>: [<span class=\"number\">0</span>, &#123; <span class=\"string\">&quot;allowKeywords&quot;</span>: <span class=\"literal\">true</span> &#125;],<span class=\"comment\">//避免不必要的方括号</span></span><br><span class=\"line\"><span class=\"string\">&quot;eol-last&quot;</span>: <span class=\"number\">0</span>,<span class=\"comment\">//文件以单一的换行符结束</span></span><br><span class=\"line\"><span class=\"string\">&quot;eqeqeq&quot;</span>: <span class=\"number\">2</span>,<span class=\"comment\">//必须使用全等</span></span><br><span class=\"line\"><span class=\"string\">&quot;func-names&quot;</span>: <span class=\"number\">0</span>,<span class=\"comment\">//函数表达式必须有名字</span></span><br><span class=\"line\"><span class=\"string\">&quot;func-style&quot;</span>: [<span class=\"number\">0</span>, <span class=\"string\">&quot;declaration&quot;</span>],<span class=\"comment\">//函数风格，规定只能使用函数声明/函数表达式</span></span><br><span class=\"line\"><span class=\"string\">&quot;generator-star-spacing&quot;</span>: <span class=\"number\">0</span>,<span class=\"comment\">//生成器函数*的前后空格</span></span><br><span class=\"line\"><span class=\"string\">&quot;guard-for-in&quot;</span>: <span class=\"number\">0</span>,<span class=\"comment\">//for in循环要用if语句过滤</span></span><br><span class=\"line\"><span class=\"string\">&quot;handle-callback-err&quot;</span>: <span class=\"number\">0</span>,<span class=\"comment\">//nodejs 处理错误</span></span><br><span class=\"line\"><span class=\"string\">&quot;id-length&quot;</span>: <span class=\"number\">0</span>,<span class=\"comment\">//变量名长度</span></span><br><span class=\"line\"><span class=\"string\">&quot;indent&quot;</span>: [<span class=\"number\">2</span>, <span class=\"number\">4</span>],<span class=\"comment\">//缩进风格</span></span><br><span class=\"line\"><span class=\"string\">&quot;init-declarations&quot;</span>: <span class=\"number\">0</span>,<span class=\"comment\">//声明时必须赋初值</span></span><br><span class=\"line\"><span class=\"string\">&quot;key-spacing&quot;</span>: [<span class=\"number\">0</span>, &#123; <span class=\"string\">&quot;beforeColon&quot;</span>: <span class=\"literal\">false</span>, <span class=\"string\">&quot;afterColon&quot;</span>: <span class=\"literal\">true</span> &#125;],<span class=\"comment\">//对象字面量中冒号的前后空格</span></span><br><span class=\"line\"><span class=\"string\">&quot;lines-around-comment&quot;</span>: <span class=\"number\">0</span>,<span class=\"comment\">//行前/行后备注</span></span><br><span class=\"line\"><span class=\"string\">&quot;max-depth&quot;</span>: [<span class=\"number\">0</span>, <span class=\"number\">4</span>],<span class=\"comment\">//嵌套块深度</span></span><br><span class=\"line\"><span class=\"string\">&quot;max-len&quot;</span>: [<span class=\"number\">0</span>, <span class=\"number\">80</span>, <span class=\"number\">4</span>],<span class=\"comment\">//字符串最大长度</span></span><br><span class=\"line\"><span class=\"string\">&quot;max-nested-callbacks&quot;</span>: [<span class=\"number\">0</span>, <span class=\"number\">2</span>],<span class=\"comment\">//回调嵌套深度</span></span><br><span class=\"line\"><span class=\"string\">&quot;max-params&quot;</span>: [<span class=\"number\">0</span>, <span class=\"number\">3</span>],<span class=\"comment\">//函数最多只能有3个参数</span></span><br><span class=\"line\"><span class=\"string\">&quot;max-statements&quot;</span>: [<span class=\"number\">0</span>, <span class=\"number\">10</span>],<span class=\"comment\">//函数内最多有几个声明</span></span><br><span class=\"line\"><span class=\"string\">&quot;new-cap&quot;</span>: <span class=\"number\">2</span>,<span class=\"comment\">//函数名首行大写必须使用new方式调用，首行小写必须用不带new方式调用</span></span><br><span class=\"line\"><span class=\"string\">&quot;new-parens&quot;</span>: <span class=\"number\">2</span>,<span class=\"comment\">//new时必须加小括号</span></span><br><span class=\"line\"><span class=\"string\">&quot;newline-after-var&quot;</span>: <span class=\"number\">2</span>,<span class=\"comment\">//变量声明后是否需要空一行</span></span><br><span class=\"line\"><span class=\"string\">&quot;object-curly-spacing&quot;</span>: [<span class=\"number\">0</span>, <span class=\"string\">&quot;never&quot;</span>],<span class=\"comment\">//大括号内是否允许不必要的空格</span></span><br><span class=\"line\"><span class=\"string\">&quot;object-shorthand&quot;</span>: <span class=\"number\">0</span>,<span class=\"comment\">//强制对象字面量缩写语法</span></span><br><span class=\"line\"><span class=\"string\">&quot;one-var&quot;</span>: <span class=\"number\">1</span>,<span class=\"comment\">//连续声明</span></span><br><span class=\"line\"><span class=\"string\">&quot;operator-assignment&quot;</span>: [<span class=\"number\">0</span>, <span class=\"string\">&quot;always&quot;</span>],<span class=\"comment\">//赋值运算符 += -=什么的</span></span><br><span class=\"line\"><span class=\"string\">&quot;operator-linebreak&quot;</span>: [<span class=\"number\">2</span>, <span class=\"string\">&quot;after&quot;</span>],<span class=\"comment\">//换行时运算符在行尾还是行首</span></span><br><span class=\"line\"><span class=\"string\">&quot;padded-blocks&quot;</span>: <span class=\"number\">0</span>,<span class=\"comment\">//块语句内行首行尾是否要空行</span></span><br><span class=\"line\"><span class=\"string\">&quot;prefer-const&quot;</span>: <span class=\"number\">0</span>,<span class=\"comment\">//首选const</span></span><br><span class=\"line\"><span class=\"string\">&quot;prefer-spread&quot;</span>: <span class=\"number\">0</span>,<span class=\"comment\">//首选展开运算</span></span><br><span class=\"line\"><span class=\"string\">&quot;prefer-reflect&quot;</span>: <span class=\"number\">0</span>,<span class=\"comment\">//首选Reflect的方法</span></span><br><span class=\"line\"><span class=\"string\">&quot;quotes&quot;</span>: [<span class=\"number\">1</span>, <span class=\"string\">&quot;single&quot;</span>],<span class=\"comment\">//引号类型 `` &quot;&quot; &#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">&quot;quote-props&quot;</span>:[<span class=\"number\">2</span>, <span class=\"string\">&quot;always&quot;</span>],<span class=\"comment\">//对象字面量中的属性名是否强制双引号</span></span><br><span class=\"line\"><span class=\"string\">&quot;radix&quot;</span>: <span class=\"number\">2</span>,<span class=\"comment\">//parseInt必须指定第二个参数</span></span><br><span class=\"line\"><span class=\"string\">&quot;id-match&quot;</span>: <span class=\"number\">0</span>,<span class=\"comment\">//命名检测</span></span><br><span class=\"line\"><span class=\"string\">&quot;require-yield&quot;</span>: <span class=\"number\">0</span>,<span class=\"comment\">//生成器函数必须有yield</span></span><br><span class=\"line\"><span class=\"string\">&quot;semi&quot;</span>: [<span class=\"number\">2</span>, <span class=\"string\">&quot;always&quot;</span>],<span class=\"comment\">//语句强制分号结尾</span></span><br><span class=\"line\"><span class=\"string\">&quot;semi-spacing&quot;</span>: [<span class=\"number\">0</span>, &#123;<span class=\"string\">&quot;before&quot;</span>: <span class=\"literal\">false</span>, <span class=\"string\">&quot;after&quot;</span>: <span class=\"literal\">true</span>&#125;],<span class=\"comment\">//分号前后空格</span></span><br><span class=\"line\"><span class=\"string\">&quot;sort-vars&quot;</span>: <span class=\"number\">0</span>,<span class=\"comment\">//变量声明时排序</span></span><br><span class=\"line\"><span class=\"string\">&quot;space-after-keywords&quot;</span>: [<span class=\"number\">0</span>, <span class=\"string\">&quot;always&quot;</span>],<span class=\"comment\">//关键字后面是否要空一格</span></span><br><span class=\"line\"><span class=\"string\">&quot;space-before-blocks&quot;</span>: [<span class=\"number\">0</span>, <span class=\"string\">&quot;always&quot;</span>],<span class=\"comment\">//不以新行开始的块&#123;前面要不要有空格</span></span><br><span class=\"line\"><span class=\"string\">&quot;space-before-function-paren&quot;</span>: [<span class=\"number\">0</span>, <span class=\"string\">&quot;always&quot;</span>],<span class=\"comment\">//函数定义时括号前面要不要有空格</span></span><br><span class=\"line\"><span class=\"string\">&quot;space-in-parens&quot;</span>: [<span class=\"number\">0</span>, <span class=\"string\">&quot;never&quot;</span>],<span class=\"comment\">//小括号里面要不要有空格</span></span><br><span class=\"line\"><span class=\"string\">&quot;space-infix-ops&quot;</span>: <span class=\"number\">0</span>,<span class=\"comment\">//中缀操作符周围要不要有空格</span></span><br><span class=\"line\"><span class=\"string\">&quot;space-return-throw-case&quot;</span>: <span class=\"number\">2</span>,<span class=\"comment\">//return throw case后面要不要加空格</span></span><br><span class=\"line\"><span class=\"string\">&quot;space-unary-ops&quot;</span>: [<span class=\"number\">0</span>, &#123; <span class=\"string\">&quot;words&quot;</span>: <span class=\"literal\">true</span>, <span class=\"string\">&quot;nonwords&quot;</span>: <span class=\"literal\">false</span> &#125;],<span class=\"comment\">//一元运算符的前/后要不要加空格</span></span><br><span class=\"line\"><span class=\"string\">&quot;spaced-comment&quot;</span>: <span class=\"number\">0</span>,<span class=\"comment\">//注释风格要不要有空格什么的</span></span><br><span class=\"line\"><span class=\"string\">&quot;strict&quot;</span>: <span class=\"number\">2</span>,<span class=\"comment\">//使用严格模式</span></span><br><span class=\"line\"><span class=\"string\">&quot;use-isnan&quot;</span>: <span class=\"number\">2</span>,<span class=\"comment\">//禁止比较时使用NaN，只能用isNaN()</span></span><br><span class=\"line\"><span class=\"string\">&quot;valid-jsdoc&quot;</span>: <span class=\"number\">0</span>,<span class=\"comment\">//jsdoc规则</span></span><br><span class=\"line\"><span class=\"string\">&quot;valid-typeof&quot;</span>: <span class=\"number\">2</span>,<span class=\"comment\">//必须使用合法的typeof的值</span></span><br><span class=\"line\"><span class=\"string\">&quot;vars-on-top&quot;</span>: <span class=\"number\">2</span>,<span class=\"comment\">//var必须放在作用域顶部</span></span><br><span class=\"line\"><span class=\"string\">&quot;wrap-iife&quot;</span>: [<span class=\"number\">2</span>, <span class=\"string\">&quot;inside&quot;</span>],<span class=\"comment\">//立即执行函数表达式的小括号风格</span></span><br><span class=\"line\"><span class=\"string\">&quot;wrap-regex&quot;</span>: <span class=\"number\">0</span>,<span class=\"comment\">//正则表达式字面量用小括号包起来</span></span><br><span class=\"line\"><span class=\"string\">&quot;yoda&quot;</span>: [<span class=\"number\">2</span>, <span class=\"string\">&quot;never&quot;</span>]<span class=\"comment\">//禁止尤达条件</span></span><br></pre></td></tr></table></figure>\n"},{"title":"理解vue3组合式API  Setup（一）","date":"2021-06-25T08:18:00.000Z","_content":"[vue3.0](https://v3.cn.vuejs.org/)发布也有一段时间了，用了那么久vue，3.0相比较2.0最大的区别就在于引入了-----组合式API。\n尝试通过尤大最新发布的前端构建工具[Vite](https://cn.vitejs.dev/)(下一代前端编译构建工具)，新建了一个vue3.0的初始项目，很快就发现了与2.0的不同之处如下图：\n![carbon 2.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/carbon%20(2)_1624615490869.png)\n#### [Setup](https://v3.cn.vuejs.org/guide/composition-api-introduction.html#%E4%BB%80%E4%B9%88%E6%98%AF%E7%BB%84%E5%90%88%E5%BC%8F-api)  \n可以看到在script标签旁边多了setup，那么具体是做什么作用呢？\n首先我们要知道尤大引入组合式api的目的是什么？\n**目的是为了解决复杂业务下代码逻辑的碎片化，以便于更好的阅读和维护。**\n![carbon 1.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/carbon%20(1)_1624615396489.png)\n我们现将setup理解为一个用来存放你逻辑代码的地方,并且它有2个参数props和context\n需要注意的一点是：\nsetup在执行时，组件实例尚未被创建，setup 选项中是不存在this的\n### 在生命周期钩子中调用\n![carbon 4.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/carbon%20(4)_1625454437233.png)\n在setup中定义一个方法并将其return，然后就可以在mounted中调用，只有return出的变量或者函数，才可以在setup外部被this调用。\n![carbon 5.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/carbon%20(5)_1625454662080.png)\n同样我们也可以这么写，将生命周期函数放入setup中调用，前提是必须注册生命周期方法onMounted\n选项 API 生命周期选项和组合式 API 之间的映射，详情参加官方api\n- ~~beforeCreate~~ -> use setup()\n\n- ~~created~~ -> use setup()\n\n- beforeMount -> onBeforeMount\n\n- mounted -> onMounted\n\n- beforeUpdate -> onBeforeUpdate\n\n- updated -> onUpdated\n\n- beforeUnmount -> onBeforeUnmount\n\n- unmounted -> onUnmounted\n\n- errorCaptured -> onErrorCaptured\n\n- renderTracked -> onRenderTracked\n\n- renderTriggered -> onRenderTriggered\n\n- activated -> onActivated\n\n- deactivated -> onDeactivated\n\n这里要说的一点是setup内，相当于之前的created钩子，也就是说是最先执行的\n下面来引入一个新的函数\n### [ref](https://v3.cn.vuejs.org/guide/composition-api-introduction.html#%E5%B8%A6-ref-%E7%9A%84%E5%93%8D%E5%BA%94%E5%BC%8F%E5%8F%98%E9%87%8F)\n![carbon 7.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/carbon%20(7)_1625455356513.png)\nref 函数使任何响应式变量在任何地方起作用\n### watch监听\n![carbon 8.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/carbon%20(8)_1625456544045.png)\n我们用ref来定义一个计数器变量，在setup中用watch来监听计数变化\n### computed 计算属性\n![carbon 9.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/carbon%20(9)_1625464411330.png)\n计算属性twiceTheCounter，需要像ref 一样使用 .value 来获取值\n","source":"_posts/理解vue3组合式API-Setup（一）.md","raw":"---\ntitle: 理解vue3组合式API  Setup（一）\ndate: 2021-06-25 16:18\ntags:\n---\n[vue3.0](https://v3.cn.vuejs.org/)发布也有一段时间了，用了那么久vue，3.0相比较2.0最大的区别就在于引入了-----组合式API。\n尝试通过尤大最新发布的前端构建工具[Vite](https://cn.vitejs.dev/)(下一代前端编译构建工具)，新建了一个vue3.0的初始项目，很快就发现了与2.0的不同之处如下图：\n![carbon 2.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/carbon%20(2)_1624615490869.png)\n#### [Setup](https://v3.cn.vuejs.org/guide/composition-api-introduction.html#%E4%BB%80%E4%B9%88%E6%98%AF%E7%BB%84%E5%90%88%E5%BC%8F-api)  \n可以看到在script标签旁边多了setup，那么具体是做什么作用呢？\n首先我们要知道尤大引入组合式api的目的是什么？\n**目的是为了解决复杂业务下代码逻辑的碎片化，以便于更好的阅读和维护。**\n![carbon 1.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/carbon%20(1)_1624615396489.png)\n我们现将setup理解为一个用来存放你逻辑代码的地方,并且它有2个参数props和context\n需要注意的一点是：\nsetup在执行时，组件实例尚未被创建，setup 选项中是不存在this的\n### 在生命周期钩子中调用\n![carbon 4.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/carbon%20(4)_1625454437233.png)\n在setup中定义一个方法并将其return，然后就可以在mounted中调用，只有return出的变量或者函数，才可以在setup外部被this调用。\n![carbon 5.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/carbon%20(5)_1625454662080.png)\n同样我们也可以这么写，将生命周期函数放入setup中调用，前提是必须注册生命周期方法onMounted\n选项 API 生命周期选项和组合式 API 之间的映射，详情参加官方api\n- ~~beforeCreate~~ -> use setup()\n\n- ~~created~~ -> use setup()\n\n- beforeMount -> onBeforeMount\n\n- mounted -> onMounted\n\n- beforeUpdate -> onBeforeUpdate\n\n- updated -> onUpdated\n\n- beforeUnmount -> onBeforeUnmount\n\n- unmounted -> onUnmounted\n\n- errorCaptured -> onErrorCaptured\n\n- renderTracked -> onRenderTracked\n\n- renderTriggered -> onRenderTriggered\n\n- activated -> onActivated\n\n- deactivated -> onDeactivated\n\n这里要说的一点是setup内，相当于之前的created钩子，也就是说是最先执行的\n下面来引入一个新的函数\n### [ref](https://v3.cn.vuejs.org/guide/composition-api-introduction.html#%E5%B8%A6-ref-%E7%9A%84%E5%93%8D%E5%BA%94%E5%BC%8F%E5%8F%98%E9%87%8F)\n![carbon 7.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/carbon%20(7)_1625455356513.png)\nref 函数使任何响应式变量在任何地方起作用\n### watch监听\n![carbon 8.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/carbon%20(8)_1625456544045.png)\n我们用ref来定义一个计数器变量，在setup中用watch来监听计数变化\n### computed 计算属性\n![carbon 9.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/carbon%20(9)_1625464411330.png)\n计算属性twiceTheCounter，需要像ref 一样使用 .value 来获取值\n","slug":"理解vue3组合式API-Setup（一）","published":1,"updated":"2022-08-30T07:40:07.196Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7g2c7g000087qu52qwiecr9","content":"<p><a href=\"https://v3.cn.vuejs.org/\">vue3.0</a>发布也有一段时间了，用了那么久vue，3.0相比较2.0最大的区别就在于引入了—–组合式API。<br>尝试通过尤大最新发布的前端构建工具<a href=\"https://cn.vitejs.dev/\">Vite</a>(下一代前端编译构建工具)，新建了一个vue3.0的初始项目，很快就发现了与2.0的不同之处如下图：<br><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/carbon%20(2)_1624615490869.png\" alt=\"carbon 2.png\"></p>\n<h4 id=\"Setup\"><a href=\"#Setup\" class=\"headerlink\" title=\"Setup\"></a><a href=\"https://v3.cn.vuejs.org/guide/composition-api-introduction.html#%E4%BB%80%E4%B9%88%E6%98%AF%E7%BB%84%E5%90%88%E5%BC%8F-api\">Setup</a></h4><p>可以看到在script标签旁边多了setup，那么具体是做什么作用呢？<br>首先我们要知道尤大引入组合式api的目的是什么？<br><strong>目的是为了解决复杂业务下代码逻辑的碎片化，以便于更好的阅读和维护。</strong><br><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/carbon%20(1)_1624615396489.png\" alt=\"carbon 1.png\"><br>我们现将setup理解为一个用来存放你逻辑代码的地方,并且它有2个参数props和context<br>需要注意的一点是：<br>setup在执行时，组件实例尚未被创建，setup 选项中是不存在this的</p>\n<h3 id=\"在生命周期钩子中调用\"><a href=\"#在生命周期钩子中调用\" class=\"headerlink\" title=\"在生命周期钩子中调用\"></a>在生命周期钩子中调用</h3><p><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/carbon%20(4)_1625454437233.png\" alt=\"carbon 4.png\"><br>在setup中定义一个方法并将其return，然后就可以在mounted中调用，只有return出的变量或者函数，才可以在setup外部被this调用。<br><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/carbon%20(5)_1625454662080.png\" alt=\"carbon 5.png\"><br>同样我们也可以这么写，将生命周期函数放入setup中调用，前提是必须注册生命周期方法onMounted<br>选项 API 生命周期选项和组合式 API 之间的映射，详情参加官方api</p>\n<ul>\n<li><p><del>beforeCreate</del> -&gt; use setup()</p>\n</li>\n<li><p><del>created</del> -&gt; use setup()</p>\n</li>\n<li><p>beforeMount -&gt; onBeforeMount</p>\n</li>\n<li><p>mounted -&gt; onMounted</p>\n</li>\n<li><p>beforeUpdate -&gt; onBeforeUpdate</p>\n</li>\n<li><p>updated -&gt; onUpdated</p>\n</li>\n<li><p>beforeUnmount -&gt; onBeforeUnmount</p>\n</li>\n<li><p>unmounted -&gt; onUnmounted</p>\n</li>\n<li><p>errorCaptured -&gt; onErrorCaptured</p>\n</li>\n<li><p>renderTracked -&gt; onRenderTracked</p>\n</li>\n<li><p>renderTriggered -&gt; onRenderTriggered</p>\n</li>\n<li><p>activated -&gt; onActivated</p>\n</li>\n<li><p>deactivated -&gt; onDeactivated</p>\n</li>\n</ul>\n<p>这里要说的一点是setup内，相当于之前的created钩子，也就是说是最先执行的<br>下面来引入一个新的函数</p>\n<h3 id=\"ref\"><a href=\"#ref\" class=\"headerlink\" title=\"ref\"></a><a href=\"https://v3.cn.vuejs.org/guide/composition-api-introduction.html#%E5%B8%A6-ref-%E7%9A%84%E5%93%8D%E5%BA%94%E5%BC%8F%E5%8F%98%E9%87%8F\">ref</a></h3><p><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/carbon%20(7)_1625455356513.png\" alt=\"carbon 7.png\"><br>ref 函数使任何响应式变量在任何地方起作用</p>\n<h3 id=\"watch监听\"><a href=\"#watch监听\" class=\"headerlink\" title=\"watch监听\"></a>watch监听</h3><p><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/carbon%20(8)_1625456544045.png\" alt=\"carbon 8.png\"><br>我们用ref来定义一个计数器变量，在setup中用watch来监听计数变化</p>\n<h3 id=\"computed-计算属性\"><a href=\"#computed-计算属性\" class=\"headerlink\" title=\"computed 计算属性\"></a>computed 计算属性</h3><p><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/carbon%20(9)_1625464411330.png\" alt=\"carbon 9.png\"><br>计算属性twiceTheCounter，需要像ref 一样使用 .value 来获取值</p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://v3.cn.vuejs.org/\">vue3.0</a>发布也有一段时间了，用了那么久vue，3.0相比较2.0最大的区别就在于引入了—–组合式API。<br>尝试通过尤大最新发布的前端构建工具<a href=\"https://cn.vitejs.dev/\">Vite</a>(下一代前端编译构建工具)，新建了一个vue3.0的初始项目，很快就发现了与2.0的不同之处如下图：<br><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/carbon%20(2)_1624615490869.png\" alt=\"carbon 2.png\"></p>\n<h4 id=\"Setup\"><a href=\"#Setup\" class=\"headerlink\" title=\"Setup\"></a><a href=\"https://v3.cn.vuejs.org/guide/composition-api-introduction.html#%E4%BB%80%E4%B9%88%E6%98%AF%E7%BB%84%E5%90%88%E5%BC%8F-api\">Setup</a></h4><p>可以看到在script标签旁边多了setup，那么具体是做什么作用呢？<br>首先我们要知道尤大引入组合式api的目的是什么？<br><strong>目的是为了解决复杂业务下代码逻辑的碎片化，以便于更好的阅读和维护。</strong><br><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/carbon%20(1)_1624615396489.png\" alt=\"carbon 1.png\"><br>我们现将setup理解为一个用来存放你逻辑代码的地方,并且它有2个参数props和context<br>需要注意的一点是：<br>setup在执行时，组件实例尚未被创建，setup 选项中是不存在this的</p>\n<h3 id=\"在生命周期钩子中调用\"><a href=\"#在生命周期钩子中调用\" class=\"headerlink\" title=\"在生命周期钩子中调用\"></a>在生命周期钩子中调用</h3><p><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/carbon%20(4)_1625454437233.png\" alt=\"carbon 4.png\"><br>在setup中定义一个方法并将其return，然后就可以在mounted中调用，只有return出的变量或者函数，才可以在setup外部被this调用。<br><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/carbon%20(5)_1625454662080.png\" alt=\"carbon 5.png\"><br>同样我们也可以这么写，将生命周期函数放入setup中调用，前提是必须注册生命周期方法onMounted<br>选项 API 生命周期选项和组合式 API 之间的映射，详情参加官方api</p>\n<ul>\n<li><p><del>beforeCreate</del> -&gt; use setup()</p>\n</li>\n<li><p><del>created</del> -&gt; use setup()</p>\n</li>\n<li><p>beforeMount -&gt; onBeforeMount</p>\n</li>\n<li><p>mounted -&gt; onMounted</p>\n</li>\n<li><p>beforeUpdate -&gt; onBeforeUpdate</p>\n</li>\n<li><p>updated -&gt; onUpdated</p>\n</li>\n<li><p>beforeUnmount -&gt; onBeforeUnmount</p>\n</li>\n<li><p>unmounted -&gt; onUnmounted</p>\n</li>\n<li><p>errorCaptured -&gt; onErrorCaptured</p>\n</li>\n<li><p>renderTracked -&gt; onRenderTracked</p>\n</li>\n<li><p>renderTriggered -&gt; onRenderTriggered</p>\n</li>\n<li><p>activated -&gt; onActivated</p>\n</li>\n<li><p>deactivated -&gt; onDeactivated</p>\n</li>\n</ul>\n<p>这里要说的一点是setup内，相当于之前的created钩子，也就是说是最先执行的<br>下面来引入一个新的函数</p>\n<h3 id=\"ref\"><a href=\"#ref\" class=\"headerlink\" title=\"ref\"></a><a href=\"https://v3.cn.vuejs.org/guide/composition-api-introduction.html#%E5%B8%A6-ref-%E7%9A%84%E5%93%8D%E5%BA%94%E5%BC%8F%E5%8F%98%E9%87%8F\">ref</a></h3><p><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/carbon%20(7)_1625455356513.png\" alt=\"carbon 7.png\"><br>ref 函数使任何响应式变量在任何地方起作用</p>\n<h3 id=\"watch监听\"><a href=\"#watch监听\" class=\"headerlink\" title=\"watch监听\"></a>watch监听</h3><p><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/carbon%20(8)_1625456544045.png\" alt=\"carbon 8.png\"><br>我们用ref来定义一个计数器变量，在setup中用watch来监听计数变化</p>\n<h3 id=\"computed-计算属性\"><a href=\"#computed-计算属性\" class=\"headerlink\" title=\"computed 计算属性\"></a>computed 计算属性</h3><p><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/carbon%20(9)_1625464411330.png\" alt=\"carbon 9.png\"><br>计算属性twiceTheCounter，需要像ref 一样使用 .value 来获取值</p>\n"},{"title":"vscode漂亮的代码格式化prettier","date":"2021-04-25T09:57:00.000Z","_content":"\n首先在vscode内安装插件[Prettier - Code formatter](https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode)\n在你的项目里新建下面文件\n.prettierrc.js\n```javascript\nmodule.exports = {\n  trailingComma: 'none', // 在对象或数组最后一个元素后面是否加逗号\n  useTabs: false, // 缩进不使用tab，使用空格\n  printWidth: 80, // 最大列宽 默认80\n  tabWidth: 2, // 缩进字节数\n  semi: true, // 句尾添加分号\n  singleQuote: true, // 使用单引号代替双引号\n  bracketSpacing: true, // 在对象，数组括号与文字之间加空格 \"{ foo: bar }\"\n  jsxBracketSameLine: true, // 将>多行JSX元素的放在最后一行的末尾，而不是放在下一行\n  jsxSingleQuote: true, // 在JSX中使用单引号而不是双引号\n  arrowParens: 'always', // always:(x) => x  avoid: x => x\n  vueIndentScriptAndStyle: true, // 是否缩进Vue文件中的代码<script>和<style>标记\n  insertPragma: false // 顶部插入<!-- @format -->\n};\n\n```\n以上是我列举的我的配置，你也可以去[官网](https://prettier.io/docs/en/options.html)查看其它配置。\n\n\n","source":"_posts/vscode漂亮的代码格式化prettier.md","raw":"---\ntitle: vscode漂亮的代码格式化prettier\ndate: 2021-04-25 17:57\ntags:\n---\n\n首先在vscode内安装插件[Prettier - Code formatter](https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode)\n在你的项目里新建下面文件\n.prettierrc.js\n```javascript\nmodule.exports = {\n  trailingComma: 'none', // 在对象或数组最后一个元素后面是否加逗号\n  useTabs: false, // 缩进不使用tab，使用空格\n  printWidth: 80, // 最大列宽 默认80\n  tabWidth: 2, // 缩进字节数\n  semi: true, // 句尾添加分号\n  singleQuote: true, // 使用单引号代替双引号\n  bracketSpacing: true, // 在对象，数组括号与文字之间加空格 \"{ foo: bar }\"\n  jsxBracketSameLine: true, // 将>多行JSX元素的放在最后一行的末尾，而不是放在下一行\n  jsxSingleQuote: true, // 在JSX中使用单引号而不是双引号\n  arrowParens: 'always', // always:(x) => x  avoid: x => x\n  vueIndentScriptAndStyle: true, // 是否缩进Vue文件中的代码<script>和<style>标记\n  insertPragma: false // 顶部插入<!-- @format -->\n};\n\n```\n以上是我列举的我的配置，你也可以去[官网](https://prettier.io/docs/en/options.html)查看其它配置。\n\n\n","slug":"vscode漂亮的代码格式化prettier","published":1,"updated":"2022-08-30T07:41:15.184Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7g2c7g100097qu50toz98zt","content":"<p>首先在vscode内安装插件<a href=\"https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode\">Prettier - Code formatter</a><br>在你的项目里新建下面文件<br>.prettierrc.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">trailingComma</span>: <span class=\"string\">&#x27;none&#x27;</span>, <span class=\"comment\">// 在对象或数组最后一个元素后面是否加逗号</span></span><br><span class=\"line\">  <span class=\"attr\">useTabs</span>: <span class=\"literal\">false</span>, <span class=\"comment\">// 缩进不使用tab，使用空格</span></span><br><span class=\"line\">  <span class=\"attr\">printWidth</span>: <span class=\"number\">80</span>, <span class=\"comment\">// 最大列宽 默认80</span></span><br><span class=\"line\">  <span class=\"attr\">tabWidth</span>: <span class=\"number\">2</span>, <span class=\"comment\">// 缩进字节数</span></span><br><span class=\"line\">  <span class=\"attr\">semi</span>: <span class=\"literal\">true</span>, <span class=\"comment\">// 句尾添加分号</span></span><br><span class=\"line\">  <span class=\"attr\">singleQuote</span>: <span class=\"literal\">true</span>, <span class=\"comment\">// 使用单引号代替双引号</span></span><br><span class=\"line\">  <span class=\"attr\">bracketSpacing</span>: <span class=\"literal\">true</span>, <span class=\"comment\">// 在对象，数组括号与文字之间加空格 &quot;&#123; foo: bar &#125;&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">jsxBracketSameLine</span>: <span class=\"literal\">true</span>, <span class=\"comment\">// 将&gt;多行JSX元素的放在最后一行的末尾，而不是放在下一行</span></span><br><span class=\"line\">  <span class=\"attr\">jsxSingleQuote</span>: <span class=\"literal\">true</span>, <span class=\"comment\">// 在JSX中使用单引号而不是双引号</span></span><br><span class=\"line\">  <span class=\"attr\">arrowParens</span>: <span class=\"string\">&#x27;always&#x27;</span>, <span class=\"comment\">// always:(x) =&gt; x  avoid: x =&gt; x</span></span><br><span class=\"line\">  <span class=\"attr\">vueIndentScriptAndStyle</span>: <span class=\"literal\">true</span>, <span class=\"comment\">// 是否缩进Vue文件中的代码&lt;script&gt;和&lt;style&gt;标记</span></span><br><span class=\"line\">  <span class=\"attr\">insertPragma</span>: <span class=\"literal\">false</span> <span class=\"comment\">// 顶部插入&lt;!-- @format --&gt;</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>以上是我列举的我的配置，你也可以去<a href=\"https://prettier.io/docs/en/options.html\">官网</a>查看其它配置。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>首先在vscode内安装插件<a href=\"https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode\">Prettier - Code formatter</a><br>在你的项目里新建下面文件<br>.prettierrc.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">trailingComma</span>: <span class=\"string\">&#x27;none&#x27;</span>, <span class=\"comment\">// 在对象或数组最后一个元素后面是否加逗号</span></span><br><span class=\"line\">  <span class=\"attr\">useTabs</span>: <span class=\"literal\">false</span>, <span class=\"comment\">// 缩进不使用tab，使用空格</span></span><br><span class=\"line\">  <span class=\"attr\">printWidth</span>: <span class=\"number\">80</span>, <span class=\"comment\">// 最大列宽 默认80</span></span><br><span class=\"line\">  <span class=\"attr\">tabWidth</span>: <span class=\"number\">2</span>, <span class=\"comment\">// 缩进字节数</span></span><br><span class=\"line\">  <span class=\"attr\">semi</span>: <span class=\"literal\">true</span>, <span class=\"comment\">// 句尾添加分号</span></span><br><span class=\"line\">  <span class=\"attr\">singleQuote</span>: <span class=\"literal\">true</span>, <span class=\"comment\">// 使用单引号代替双引号</span></span><br><span class=\"line\">  <span class=\"attr\">bracketSpacing</span>: <span class=\"literal\">true</span>, <span class=\"comment\">// 在对象，数组括号与文字之间加空格 &quot;&#123; foo: bar &#125;&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">jsxBracketSameLine</span>: <span class=\"literal\">true</span>, <span class=\"comment\">// 将&gt;多行JSX元素的放在最后一行的末尾，而不是放在下一行</span></span><br><span class=\"line\">  <span class=\"attr\">jsxSingleQuote</span>: <span class=\"literal\">true</span>, <span class=\"comment\">// 在JSX中使用单引号而不是双引号</span></span><br><span class=\"line\">  <span class=\"attr\">arrowParens</span>: <span class=\"string\">&#x27;always&#x27;</span>, <span class=\"comment\">// always:(x) =&gt; x  avoid: x =&gt; x</span></span><br><span class=\"line\">  <span class=\"attr\">vueIndentScriptAndStyle</span>: <span class=\"literal\">true</span>, <span class=\"comment\">// 是否缩进Vue文件中的代码&lt;script&gt;和&lt;style&gt;标记</span></span><br><span class=\"line\">  <span class=\"attr\">insertPragma</span>: <span class=\"literal\">false</span> <span class=\"comment\">// 顶部插入&lt;!-- @format --&gt;</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>以上是我列举的我的配置，你也可以去<a href=\"https://prettier.io/docs/en/options.html\">官网</a>查看其它配置。</p>\n"},{"title":"解决vue keepAlive 二次进入页面显示首次缓存问题","date":"2021-07-26T06:04:00.000Z","_content":"问题场景：\n当某个带有筛选条件查询列表的页面需要进行缓存，以便不再需要重复进行选择或者输入筛选条件的时候，我们就可以利用keepAlive来进行缓存，但keepAlive也存在着一些坑，这是需要注意的地方。\n### 如何利用keepAlive进行缓存\n1、在路由meta内定义keepAlive，来设置需要被缓存的页面\n```js\nmeta: { keepAlive: true }\n```\nture: 需要缓存的路由；false:不需要缓存的路由\n\n2、判断router-view\n```js\n<keep-alive>\n  <router-view v-if=\"$route.meta.keepAlive\"/>\n</keep-alive>\n<router-view v-if=\"!$route.meta.keepAlive\"></router-view>\n```\n被keep-alive包裹的为需要缓存的页面，这样我们就可以通过keepAlive来切换哪些页面需要缓存，哪些不需要缓存。\n\n3、进入详情页面缓存，否则不缓存\n```js\nbeforeRouteLeave (to, from, next) {\n    if (to.path === '/index/page1/detail') {\n      from.meta.keepAlive = true\n      next()\n    } else {\n      from.meta.keepAlive = false\n      next()\n    }\n  }\n```\n路由守卫钩子 beforeRouteLeave 离开页面路由的时候出发；\n当离开缓存页面，进入详情页面的时候，我们将缓存页面keepAlive设置true，如果离开缓存页面，不是进入详情页面的时候，我们设置为false，不进行缓存。\n\n这是最基本的缓存设置，但是keepAlive也留下了一个大坑。\n\n## keepAlive二次进入页面显示首次缓存问题\n第一次从缓存页面进入详情页再返回到缓存页面的时候，页面条件能被正确的缓存下来，但是当我们切换到别的路由，再一次进入该缓存页修改查询条件，并进入详情后返回缓存页，此时缓存的是页面状态是第一次进入该页面的时候的状态，也就是说，第二次进入页面的时候，该缓存读取的是第一次的缓存，这就非常的坑了。\n所以通过下面的刷新缓存路由的方式来解决这个问题。\n\n1、调整 router-view\n```js\n// view\n<keep-alive v-if=\"isRouterAlive\">\n  <router-view v-if=\"$route.meta.keepAlive\"/>\n</keep-alive>\n<router-view v-if=\"!$route.meta.keepAlive\"></router-view>\n\n// js\ndata () {\n  return {\n    isRouterAlive: true\n  }\n},\nprovide () { return { reload: this.reload } },\n\nmethods: {\n  reload () {\n    this.isRouterAlive = false\n    this.$nextTick(() => (this.isRouterAlive = true))\n  }\n}\n```\n\n定义一个isRouterAlive变量，用来刷新keep-alive;通过provide向下面子孙组件们暴露一个reload方法，用来刷新缓存。\n\n2、设置缓存\n```js\nexport default {\n inject: ['reload'],\n data () {\n   return {\n    ....\n   },\n },\n beforeRouteEnter (to, from, next) {\n    to.meta.keepAlive = true\n    if (from.path !== '/index/page1/detail') {\n      next(vm => {\n        vm.reload()\n      })\n    } else {\n      next()\n    }\n  },\n  beforeRouteLeave (to, from, next) {\n    if (to.path === '/index/page1/detail') {\n      from.meta.keepAlive = true\n      next()\n    } else {\n      from.meta.keepAlive = false\n      next()\n    }\n  }\n}\n```\n\n子组件注册inject: ['reload'] 方法，beforeRouteEnter钩子在进入缓存页面的时候通过通过判断路由是否是来自详情页面，如果不是详情页，我们就刷新缓存，如果是详情页，就不做处理。\n这样就解决了，只要是路由进入过别的页面(非详情页面)，我们就刷新缓存，这样就不会出现二次进入的时候，显示的是第一次的缓存状态，同时从详情页返回后正常显示缓存数据。\n\n","source":"_posts/解决vue-keepAlive-二次进入页面显示首次缓存问题.md","raw":"---\ntitle: 解决vue keepAlive 二次进入页面显示首次缓存问题\ndate: 2021-07-26 14:04\ntags:\n---\n问题场景：\n当某个带有筛选条件查询列表的页面需要进行缓存，以便不再需要重复进行选择或者输入筛选条件的时候，我们就可以利用keepAlive来进行缓存，但keepAlive也存在着一些坑，这是需要注意的地方。\n### 如何利用keepAlive进行缓存\n1、在路由meta内定义keepAlive，来设置需要被缓存的页面\n```js\nmeta: { keepAlive: true }\n```\nture: 需要缓存的路由；false:不需要缓存的路由\n\n2、判断router-view\n```js\n<keep-alive>\n  <router-view v-if=\"$route.meta.keepAlive\"/>\n</keep-alive>\n<router-view v-if=\"!$route.meta.keepAlive\"></router-view>\n```\n被keep-alive包裹的为需要缓存的页面，这样我们就可以通过keepAlive来切换哪些页面需要缓存，哪些不需要缓存。\n\n3、进入详情页面缓存，否则不缓存\n```js\nbeforeRouteLeave (to, from, next) {\n    if (to.path === '/index/page1/detail') {\n      from.meta.keepAlive = true\n      next()\n    } else {\n      from.meta.keepAlive = false\n      next()\n    }\n  }\n```\n路由守卫钩子 beforeRouteLeave 离开页面路由的时候出发；\n当离开缓存页面，进入详情页面的时候，我们将缓存页面keepAlive设置true，如果离开缓存页面，不是进入详情页面的时候，我们设置为false，不进行缓存。\n\n这是最基本的缓存设置，但是keepAlive也留下了一个大坑。\n\n## keepAlive二次进入页面显示首次缓存问题\n第一次从缓存页面进入详情页再返回到缓存页面的时候，页面条件能被正确的缓存下来，但是当我们切换到别的路由，再一次进入该缓存页修改查询条件，并进入详情后返回缓存页，此时缓存的是页面状态是第一次进入该页面的时候的状态，也就是说，第二次进入页面的时候，该缓存读取的是第一次的缓存，这就非常的坑了。\n所以通过下面的刷新缓存路由的方式来解决这个问题。\n\n1、调整 router-view\n```js\n// view\n<keep-alive v-if=\"isRouterAlive\">\n  <router-view v-if=\"$route.meta.keepAlive\"/>\n</keep-alive>\n<router-view v-if=\"!$route.meta.keepAlive\"></router-view>\n\n// js\ndata () {\n  return {\n    isRouterAlive: true\n  }\n},\nprovide () { return { reload: this.reload } },\n\nmethods: {\n  reload () {\n    this.isRouterAlive = false\n    this.$nextTick(() => (this.isRouterAlive = true))\n  }\n}\n```\n\n定义一个isRouterAlive变量，用来刷新keep-alive;通过provide向下面子孙组件们暴露一个reload方法，用来刷新缓存。\n\n2、设置缓存\n```js\nexport default {\n inject: ['reload'],\n data () {\n   return {\n    ....\n   },\n },\n beforeRouteEnter (to, from, next) {\n    to.meta.keepAlive = true\n    if (from.path !== '/index/page1/detail') {\n      next(vm => {\n        vm.reload()\n      })\n    } else {\n      next()\n    }\n  },\n  beforeRouteLeave (to, from, next) {\n    if (to.path === '/index/page1/detail') {\n      from.meta.keepAlive = true\n      next()\n    } else {\n      from.meta.keepAlive = false\n      next()\n    }\n  }\n}\n```\n\n子组件注册inject: ['reload'] 方法，beforeRouteEnter钩子在进入缓存页面的时候通过通过判断路由是否是来自详情页面，如果不是详情页，我们就刷新缓存，如果是详情页，就不做处理。\n这样就解决了，只要是路由进入过别的页面(非详情页面)，我们就刷新缓存，这样就不会出现二次进入的时候，显示的是第一次的缓存状态，同时从详情页返回后正常显示缓存数据。\n\n","slug":"解决vue-keepAlive-二次进入页面显示首次缓存问题","published":1,"updated":"2022-08-30T07:39:47.862Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7g2c7g1000a7qu58bs3h18g","content":"<p>问题场景：<br>当某个带有筛选条件查询列表的页面需要进行缓存，以便不再需要重复进行选择或者输入筛选条件的时候，我们就可以利用keepAlive来进行缓存，但keepAlive也存在着一些坑，这是需要注意的地方。</p>\n<h3 id=\"如何利用keepAlive进行缓存\"><a href=\"#如何利用keepAlive进行缓存\" class=\"headerlink\" title=\"如何利用keepAlive进行缓存\"></a>如何利用keepAlive进行缓存</h3><p>1、在路由meta内定义keepAlive，来设置需要被缓存的页面</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">meta</span>: &#123; <span class=\"attr\">keepAlive</span>: <span class=\"literal\">true</span> &#125;</span><br></pre></td></tr></table></figure>\n<p>ture: 需要缓存的路由；false:不需要缓存的路由</p>\n<p>2、判断router-view</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;keep-alive&gt;</span><br><span class=\"line\">  <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">router-view</span> <span class=\"attr\">v-if</span>=<span class=\"string\">&quot;$route.meta.keepAlive&quot;</span>/&gt;</span></span></span><br><span class=\"line\">&lt;/keep-alive&gt;</span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">router-view</span> <span class=\"attr\">v-if</span>=<span class=\"string\">&quot;!$route.meta.keepAlive&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">router-view</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n<p>被keep-alive包裹的为需要缓存的页面，这样我们就可以通过keepAlive来切换哪些页面需要缓存，哪些不需要缓存。</p>\n<p>3、进入详情页面缓存，否则不缓存</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">beforeRouteLeave (to, <span class=\"keyword\">from</span>, next) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (to.<span class=\"property\">path</span> === <span class=\"string\">&#x27;/index/page1/detail&#x27;</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">from</span>.<span class=\"property\">meta</span>.<span class=\"property\">keepAlive</span> = <span class=\"literal\">true</span></span><br><span class=\"line\">      <span class=\"title function_\">next</span>()</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">from</span>.<span class=\"property\">meta</span>.<span class=\"property\">keepAlive</span> = <span class=\"literal\">false</span></span><br><span class=\"line\">      <span class=\"title function_\">next</span>()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>路由守卫钩子 beforeRouteLeave 离开页面路由的时候出发；<br>当离开缓存页面，进入详情页面的时候，我们将缓存页面keepAlive设置true，如果离开缓存页面，不是进入详情页面的时候，我们设置为false，不进行缓存。</p>\n<p>这是最基本的缓存设置，但是keepAlive也留下了一个大坑。</p>\n<h2 id=\"keepAlive二次进入页面显示首次缓存问题\"><a href=\"#keepAlive二次进入页面显示首次缓存问题\" class=\"headerlink\" title=\"keepAlive二次进入页面显示首次缓存问题\"></a>keepAlive二次进入页面显示首次缓存问题</h2><p>第一次从缓存页面进入详情页再返回到缓存页面的时候，页面条件能被正确的缓存下来，但是当我们切换到别的路由，再一次进入该缓存页修改查询条件，并进入详情后返回缓存页，此时缓存的是页面状态是第一次进入该页面的时候的状态，也就是说，第二次进入页面的时候，该缓存读取的是第一次的缓存，这就非常的坑了。<br>所以通过下面的刷新缓存路由的方式来解决这个问题。</p>\n<p>1、调整 router-view</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// view</span></span><br><span class=\"line\">&lt;keep-alive v-<span class=\"keyword\">if</span>=<span class=\"string\">&quot;isRouterAlive&quot;</span>&gt;</span><br><span class=\"line\">  <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">router-view</span> <span class=\"attr\">v-if</span>=<span class=\"string\">&quot;$route.meta.keepAlive&quot;</span>/&gt;</span></span></span><br><span class=\"line\">&lt;/keep-alive&gt;</span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">router-view</span> <span class=\"attr\">v-if</span>=<span class=\"string\">&quot;!$route.meta.keepAlive&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">router-view</span>&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// js</span></span><br><span class=\"line\">data () &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">isRouterAlive</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">provide () &#123; <span class=\"keyword\">return</span> &#123; <span class=\"attr\">reload</span>: <span class=\"variable language_\">this</span>.<span class=\"property\">reload</span> &#125; &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">methods</span>: &#123;</span><br><span class=\"line\">  reload () &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">isRouterAlive</span> = <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.$nextTick(<span class=\"function\">() =&gt;</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">isRouterAlive</span> = <span class=\"literal\">true</span>))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>定义一个isRouterAlive变量，用来刷新keep-alive;通过provide向下面子孙组件们暴露一个reload方法，用来刷新缓存。</p>\n<p>2、设置缓存</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\"> <span class=\"attr\">inject</span>: [<span class=\"string\">&#x27;reload&#x27;</span>],</span><br><span class=\"line\"> data () &#123;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    ....</span><br><span class=\"line\">   &#125;,</span><br><span class=\"line\"> &#125;,</span><br><span class=\"line\"> beforeRouteEnter (to, <span class=\"keyword\">from</span>, next) &#123;</span><br><span class=\"line\">    to.<span class=\"property\">meta</span>.<span class=\"property\">keepAlive</span> = <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">from</span>.<span class=\"property\">path</span> !== <span class=\"string\">&#x27;/index/page1/detail&#x27;</span>) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">next</span>(<span class=\"function\"><span class=\"params\">vm</span> =&gt;</span> &#123;</span><br><span class=\"line\">        vm.<span class=\"title function_\">reload</span>()</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"title function_\">next</span>()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  beforeRouteLeave (to, <span class=\"keyword\">from</span>, next) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (to.<span class=\"property\">path</span> === <span class=\"string\">&#x27;/index/page1/detail&#x27;</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">from</span>.<span class=\"property\">meta</span>.<span class=\"property\">keepAlive</span> = <span class=\"literal\">true</span></span><br><span class=\"line\">      <span class=\"title function_\">next</span>()</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">from</span>.<span class=\"property\">meta</span>.<span class=\"property\">keepAlive</span> = <span class=\"literal\">false</span></span><br><span class=\"line\">      <span class=\"title function_\">next</span>()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>子组件注册inject: [‘reload’] 方法，beforeRouteEnter钩子在进入缓存页面的时候通过通过判断路由是否是来自详情页面，如果不是详情页，我们就刷新缓存，如果是详情页，就不做处理。<br>这样就解决了，只要是路由进入过别的页面(非详情页面)，我们就刷新缓存，这样就不会出现二次进入的时候，显示的是第一次的缓存状态，同时从详情页返回后正常显示缓存数据。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>问题场景：<br>当某个带有筛选条件查询列表的页面需要进行缓存，以便不再需要重复进行选择或者输入筛选条件的时候，我们就可以利用keepAlive来进行缓存，但keepAlive也存在着一些坑，这是需要注意的地方。</p>\n<h3 id=\"如何利用keepAlive进行缓存\"><a href=\"#如何利用keepAlive进行缓存\" class=\"headerlink\" title=\"如何利用keepAlive进行缓存\"></a>如何利用keepAlive进行缓存</h3><p>1、在路由meta内定义keepAlive，来设置需要被缓存的页面</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">meta</span>: &#123; <span class=\"attr\">keepAlive</span>: <span class=\"literal\">true</span> &#125;</span><br></pre></td></tr></table></figure>\n<p>ture: 需要缓存的路由；false:不需要缓存的路由</p>\n<p>2、判断router-view</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;keep-alive&gt;</span><br><span class=\"line\">  <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">router-view</span> <span class=\"attr\">v-if</span>=<span class=\"string\">&quot;$route.meta.keepAlive&quot;</span>/&gt;</span></span></span><br><span class=\"line\">&lt;/keep-alive&gt;</span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">router-view</span> <span class=\"attr\">v-if</span>=<span class=\"string\">&quot;!$route.meta.keepAlive&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">router-view</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n<p>被keep-alive包裹的为需要缓存的页面，这样我们就可以通过keepAlive来切换哪些页面需要缓存，哪些不需要缓存。</p>\n<p>3、进入详情页面缓存，否则不缓存</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">beforeRouteLeave (to, <span class=\"keyword\">from</span>, next) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (to.<span class=\"property\">path</span> === <span class=\"string\">&#x27;/index/page1/detail&#x27;</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">from</span>.<span class=\"property\">meta</span>.<span class=\"property\">keepAlive</span> = <span class=\"literal\">true</span></span><br><span class=\"line\">      <span class=\"title function_\">next</span>()</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">from</span>.<span class=\"property\">meta</span>.<span class=\"property\">keepAlive</span> = <span class=\"literal\">false</span></span><br><span class=\"line\">      <span class=\"title function_\">next</span>()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>路由守卫钩子 beforeRouteLeave 离开页面路由的时候出发；<br>当离开缓存页面，进入详情页面的时候，我们将缓存页面keepAlive设置true，如果离开缓存页面，不是进入详情页面的时候，我们设置为false，不进行缓存。</p>\n<p>这是最基本的缓存设置，但是keepAlive也留下了一个大坑。</p>\n<h2 id=\"keepAlive二次进入页面显示首次缓存问题\"><a href=\"#keepAlive二次进入页面显示首次缓存问题\" class=\"headerlink\" title=\"keepAlive二次进入页面显示首次缓存问题\"></a>keepAlive二次进入页面显示首次缓存问题</h2><p>第一次从缓存页面进入详情页再返回到缓存页面的时候，页面条件能被正确的缓存下来，但是当我们切换到别的路由，再一次进入该缓存页修改查询条件，并进入详情后返回缓存页，此时缓存的是页面状态是第一次进入该页面的时候的状态，也就是说，第二次进入页面的时候，该缓存读取的是第一次的缓存，这就非常的坑了。<br>所以通过下面的刷新缓存路由的方式来解决这个问题。</p>\n<p>1、调整 router-view</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// view</span></span><br><span class=\"line\">&lt;keep-alive v-<span class=\"keyword\">if</span>=<span class=\"string\">&quot;isRouterAlive&quot;</span>&gt;</span><br><span class=\"line\">  <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">router-view</span> <span class=\"attr\">v-if</span>=<span class=\"string\">&quot;$route.meta.keepAlive&quot;</span>/&gt;</span></span></span><br><span class=\"line\">&lt;/keep-alive&gt;</span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">router-view</span> <span class=\"attr\">v-if</span>=<span class=\"string\">&quot;!$route.meta.keepAlive&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">router-view</span>&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// js</span></span><br><span class=\"line\">data () &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">isRouterAlive</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">provide () &#123; <span class=\"keyword\">return</span> &#123; <span class=\"attr\">reload</span>: <span class=\"variable language_\">this</span>.<span class=\"property\">reload</span> &#125; &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">methods</span>: &#123;</span><br><span class=\"line\">  reload () &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">isRouterAlive</span> = <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.$nextTick(<span class=\"function\">() =&gt;</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">isRouterAlive</span> = <span class=\"literal\">true</span>))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>定义一个isRouterAlive变量，用来刷新keep-alive;通过provide向下面子孙组件们暴露一个reload方法，用来刷新缓存。</p>\n<p>2、设置缓存</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\"> <span class=\"attr\">inject</span>: [<span class=\"string\">&#x27;reload&#x27;</span>],</span><br><span class=\"line\"> data () &#123;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    ....</span><br><span class=\"line\">   &#125;,</span><br><span class=\"line\"> &#125;,</span><br><span class=\"line\"> beforeRouteEnter (to, <span class=\"keyword\">from</span>, next) &#123;</span><br><span class=\"line\">    to.<span class=\"property\">meta</span>.<span class=\"property\">keepAlive</span> = <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">from</span>.<span class=\"property\">path</span> !== <span class=\"string\">&#x27;/index/page1/detail&#x27;</span>) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">next</span>(<span class=\"function\"><span class=\"params\">vm</span> =&gt;</span> &#123;</span><br><span class=\"line\">        vm.<span class=\"title function_\">reload</span>()</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"title function_\">next</span>()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  beforeRouteLeave (to, <span class=\"keyword\">from</span>, next) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (to.<span class=\"property\">path</span> === <span class=\"string\">&#x27;/index/page1/detail&#x27;</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">from</span>.<span class=\"property\">meta</span>.<span class=\"property\">keepAlive</span> = <span class=\"literal\">true</span></span><br><span class=\"line\">      <span class=\"title function_\">next</span>()</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">from</span>.<span class=\"property\">meta</span>.<span class=\"property\">keepAlive</span> = <span class=\"literal\">false</span></span><br><span class=\"line\">      <span class=\"title function_\">next</span>()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>子组件注册inject: [‘reload’] 方法，beforeRouteEnter钩子在进入缓存页面的时候通过通过判断路由是否是来自详情页面，如果不是详情页，我们就刷新缓存，如果是详情页，就不做处理。<br>这样就解决了，只要是路由进入过别的页面(非详情页面)，我们就刷新缓存，这样就不会出现二次进入的时候，显示的是第一次的缓存状态，同时从详情页返回后正常显示缓存数据。</p>\n"},{"title":"纯前端利用canvas压缩图片上传","date":"2021-02-25T09:57:00.000Z","_content":"\n实现的方式是上传图片file->获取base64->转化为canvas->canvas压缩后转化为base64->base64转化为file\n```html\n<template>\n  <div>\n\t<input ref=\"uploadinput\" type=\"file\" name=\"file\" accept=\"image/*\" @change=\"changeImg\"/>\n  </div>\n</template>\n\n<script>\n  export default {\n    data(){\n    \treturn {\n      \tpicurl:\"\"\n      }\n    },\n    methods: {\n      async changeImg(){\n              let that = this\n              let input = this.$refs.uploadinput\n              let file = input.files[0]\n              this.picurl = await this.getBase64(file)\n        \t\t\tlet newfile = dataURLtoFile(this.picurl,\"pic.jpeg\")\n      },\n      //获取Base64\n    \tgetBase64(file) {\n        return new Promise((resolve, reject) => {\n          const reader = new FileReader();\n          reader.readAsDataURL(file);\n          reader.onload = () => {\n            this.canvasDataURL(reader.result,1500).then(r=>{\n              resolve(r);\n            }).catch(e=>{\n              reject(e);\n            })\n          }\n          reader.onerror = error => reject(error);\n        });\n      },\n\n      //图片压缩处理\n      canvasDataURL(re,w){\n        return new Promise((resolve, reject) =>{\n          let newImg=new Image();\n          newImg.src=re;\n          let imgWidth,imgHeight;\n          newImg.onload = () =>{\n            let img=document.createElement(\"img\");\n            img.src=newImg.src;\n            imgWidth=img.width;\n            imgHeight=img.height;\n            let canvas=document.createElement(\"canvas\");\n            canvas.width=imgWidth;\n            canvas.height=imgHeight;\n            let ctx=canvas.getContext(\"2d\");\n            ctx.clearRect(0,0,imgWidth,imgHeight);\n            ctx.drawImage(img,0,0,imgWidth,imgHeight);\n            resolve(canvas.toDataURL(\"image/jpeg\",0.2))\n          }\n          newImg.onerror = error => reject(error);\n        }) \n      },\n\n      //将base64转换为文件\n      dataURLtoFile(dataurl, filename) {\n        let arr = dataurl.split(','), mime = arr[0].match(/:(.*?);/)[1],\n            bstr = atob(arr[1]), n = bstr.length, u8arr = new Uint8Array(n);\n        while(n--){\n          u8arr[n] = bstr.charCodeAt(n);\n        }\n        return new File([u8arr], filename, {type:mime});\n      },\n    }\n  }\n</script>\n\n<style lang=\"scss\" scoped>\n\n</style>\n\n\n\n\n\n\t\t\t\t\t\t\n```\n\n\n","source":"_posts/纯前端利用canvas压缩图片上传.md","raw":"---\ntitle: 纯前端利用canvas压缩图片上传\ndate: 2021-02-25 17:57\ntags:\n---\n\n实现的方式是上传图片file->获取base64->转化为canvas->canvas压缩后转化为base64->base64转化为file\n```html\n<template>\n  <div>\n\t<input ref=\"uploadinput\" type=\"file\" name=\"file\" accept=\"image/*\" @change=\"changeImg\"/>\n  </div>\n</template>\n\n<script>\n  export default {\n    data(){\n    \treturn {\n      \tpicurl:\"\"\n      }\n    },\n    methods: {\n      async changeImg(){\n              let that = this\n              let input = this.$refs.uploadinput\n              let file = input.files[0]\n              this.picurl = await this.getBase64(file)\n        \t\t\tlet newfile = dataURLtoFile(this.picurl,\"pic.jpeg\")\n      },\n      //获取Base64\n    \tgetBase64(file) {\n        return new Promise((resolve, reject) => {\n          const reader = new FileReader();\n          reader.readAsDataURL(file);\n          reader.onload = () => {\n            this.canvasDataURL(reader.result,1500).then(r=>{\n              resolve(r);\n            }).catch(e=>{\n              reject(e);\n            })\n          }\n          reader.onerror = error => reject(error);\n        });\n      },\n\n      //图片压缩处理\n      canvasDataURL(re,w){\n        return new Promise((resolve, reject) =>{\n          let newImg=new Image();\n          newImg.src=re;\n          let imgWidth,imgHeight;\n          newImg.onload = () =>{\n            let img=document.createElement(\"img\");\n            img.src=newImg.src;\n            imgWidth=img.width;\n            imgHeight=img.height;\n            let canvas=document.createElement(\"canvas\");\n            canvas.width=imgWidth;\n            canvas.height=imgHeight;\n            let ctx=canvas.getContext(\"2d\");\n            ctx.clearRect(0,0,imgWidth,imgHeight);\n            ctx.drawImage(img,0,0,imgWidth,imgHeight);\n            resolve(canvas.toDataURL(\"image/jpeg\",0.2))\n          }\n          newImg.onerror = error => reject(error);\n        }) \n      },\n\n      //将base64转换为文件\n      dataURLtoFile(dataurl, filename) {\n        let arr = dataurl.split(','), mime = arr[0].match(/:(.*?);/)[1],\n            bstr = atob(arr[1]), n = bstr.length, u8arr = new Uint8Array(n);\n        while(n--){\n          u8arr[n] = bstr.charCodeAt(n);\n        }\n        return new File([u8arr], filename, {type:mime});\n      },\n    }\n  }\n</script>\n\n<style lang=\"scss\" scoped>\n\n</style>\n\n\n\n\n\n\t\t\t\t\t\t\n```\n\n\n","slug":"纯前端利用canvas压缩图片上传","published":1,"updated":"2022-08-30T07:41:00.532Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7g2c7g2000b7qu5d2y0e81n","content":"<p>实现的方式是上传图片file-&gt;获取base64-&gt;转化为canvas-&gt;canvas压缩后转化为base64-&gt;base64转化为file</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;uploadinput&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;file&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;file&quot;</span> <span class=\"attr\">accept</span>=<span class=\"string\">&quot;image/*&quot;</span> @<span class=\"attr\">change</span>=<span class=\"string\">&quot;changeImg&quot;</span>/&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"title function_\">data</span>(<span class=\"params\"></span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    \t<span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      \t<span class=\"attr\">picurl</span>:<span class=\"string\">&quot;&quot;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">      &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"attr\">methods</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">async</span> <span class=\"title function_\">changeImg</span>(<span class=\"params\"></span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">              <span class=\"keyword\">let</span> that = <span class=\"variable language_\">this</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">              <span class=\"keyword\">let</span> input = <span class=\"variable language_\">this</span>.<span class=\"property\">$refs</span>.<span class=\"property\">uploadinput</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">              <span class=\"keyword\">let</span> file = input.<span class=\"property\">files</span>[<span class=\"number\">0</span>]</span></span><br><span class=\"line\"><span class=\"language-javascript\">              <span class=\"variable language_\">this</span>.<span class=\"property\">picurl</span> = <span class=\"keyword\">await</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">getBase64</span>(file)</span></span><br><span class=\"line\"><span class=\"language-javascript\">        \t\t\t<span class=\"keyword\">let</span> newfile = <span class=\"title function_\">dataURLtoFile</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">picurl</span>,<span class=\"string\">&quot;pic.jpeg&quot;</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">      &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"comment\">//获取Base64</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    \t<span class=\"title function_\">getBase64</span>(<span class=\"params\">file</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"keyword\">const</span> reader = <span class=\"keyword\">new</span> <span class=\"title class_\">FileReader</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\">          reader.<span class=\"title function_\">readAsDataURL</span>(file);</span></span><br><span class=\"line\"><span class=\"language-javascript\">          reader.<span class=\"property\">onload</span> = <span class=\"function\">() =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"variable language_\">this</span>.<span class=\"title function_\">canvasDataURL</span>(reader.<span class=\"property\">result</span>,<span class=\"number\">1500</span>).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">r</span>=&gt;</span>&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">              <span class=\"title function_\">resolve</span>(r);</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;).<span class=\"title function_\">catch</span>(<span class=\"function\"><span class=\"params\">e</span>=&gt;</span>&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">              <span class=\"title function_\">reject</span>(e);</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\">          &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">          reader.<span class=\"property\">onerror</span> = <span class=\"function\"><span class=\"params\">error</span> =&gt;</span> <span class=\"title function_\">reject</span>(error);</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;);</span></span><br><span class=\"line\"><span class=\"language-javascript\">      &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"comment\">//图片压缩处理</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"title function_\">canvasDataURL</span>(<span class=\"params\">re,w</span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span>&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"keyword\">let</span> newImg=<span class=\"keyword\">new</span> <span class=\"title class_\">Image</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\">          newImg.<span class=\"property\">src</span>=re;</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"keyword\">let</span> imgWidth,imgHeight;</span></span><br><span class=\"line\"><span class=\"language-javascript\">          newImg.<span class=\"property\">onload</span> = <span class=\"function\">() =&gt;</span>&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"keyword\">let</span> img=<span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&quot;img&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">            img.<span class=\"property\">src</span>=newImg.<span class=\"property\">src</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            imgWidth=img.<span class=\"property\">width</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            imgHeight=img.<span class=\"property\">height</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"keyword\">let</span> canvas=<span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&quot;canvas&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">            canvas.<span class=\"property\">width</span>=imgWidth;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            canvas.<span class=\"property\">height</span>=imgHeight;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"keyword\">let</span> ctx=canvas.<span class=\"title function_\">getContext</span>(<span class=\"string\">&quot;2d&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">            ctx.<span class=\"title function_\">clearRect</span>(<span class=\"number\">0</span>,<span class=\"number\">0</span>,imgWidth,imgHeight);</span></span><br><span class=\"line\"><span class=\"language-javascript\">            ctx.<span class=\"title function_\">drawImage</span>(img,<span class=\"number\">0</span>,<span class=\"number\">0</span>,imgWidth,imgHeight);</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"title function_\">resolve</span>(canvas.<span class=\"title function_\">toDataURL</span>(<span class=\"string\">&quot;image/jpeg&quot;</span>,<span class=\"number\">0.2</span>))</span></span><br><span class=\"line\"><span class=\"language-javascript\">          &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">          newImg.<span class=\"property\">onerror</span> = <span class=\"function\"><span class=\"params\">error</span> =&gt;</span> <span class=\"title function_\">reject</span>(error);</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;) </span></span><br><span class=\"line\"><span class=\"language-javascript\">      &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"comment\">//将base64转换为文件</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"title function_\">dataURLtoFile</span>(<span class=\"params\">dataurl, filename</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">let</span> arr = dataurl.<span class=\"title function_\">split</span>(<span class=\"string\">&#x27;,&#x27;</span>), mime = arr[<span class=\"number\">0</span>].<span class=\"title function_\">match</span>(<span class=\"regexp\">/:(.*?);/</span>)[<span class=\"number\">1</span>],</span></span><br><span class=\"line\"><span class=\"language-javascript\">            bstr = <span class=\"title function_\">atob</span>(arr[<span class=\"number\">1</span>]), n = bstr.<span class=\"property\">length</span>, u8arr = <span class=\"keyword\">new</span> <span class=\"title class_\">Uint8Array</span>(n);</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">while</span>(n--)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">          u8arr[n] = bstr.<span class=\"title function_\">charCodeAt</span>(n);</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">File</span>([u8arr], filename, &#123;<span class=\"attr\">type</span>:mime&#125;);</span></span><br><span class=\"line\"><span class=\"language-javascript\">      &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;scss&quot;</span> <span class=\"attr\">scoped</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t\t\t</span><br></pre></td></tr></table></figure>\n\n\n","site":{"data":{}},"excerpt":"","more":"<p>实现的方式是上传图片file-&gt;获取base64-&gt;转化为canvas-&gt;canvas压缩后转化为base64-&gt;base64转化为file</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;uploadinput&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;file&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;file&quot;</span> <span class=\"attr\">accept</span>=<span class=\"string\">&quot;image/*&quot;</span> @<span class=\"attr\">change</span>=<span class=\"string\">&quot;changeImg&quot;</span>/&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"title function_\">data</span>(<span class=\"params\"></span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    \t<span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      \t<span class=\"attr\">picurl</span>:<span class=\"string\">&quot;&quot;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">      &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"attr\">methods</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">async</span> <span class=\"title function_\">changeImg</span>(<span class=\"params\"></span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">              <span class=\"keyword\">let</span> that = <span class=\"variable language_\">this</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">              <span class=\"keyword\">let</span> input = <span class=\"variable language_\">this</span>.<span class=\"property\">$refs</span>.<span class=\"property\">uploadinput</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">              <span class=\"keyword\">let</span> file = input.<span class=\"property\">files</span>[<span class=\"number\">0</span>]</span></span><br><span class=\"line\"><span class=\"language-javascript\">              <span class=\"variable language_\">this</span>.<span class=\"property\">picurl</span> = <span class=\"keyword\">await</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">getBase64</span>(file)</span></span><br><span class=\"line\"><span class=\"language-javascript\">        \t\t\t<span class=\"keyword\">let</span> newfile = <span class=\"title function_\">dataURLtoFile</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">picurl</span>,<span class=\"string\">&quot;pic.jpeg&quot;</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">      &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"comment\">//获取Base64</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    \t<span class=\"title function_\">getBase64</span>(<span class=\"params\">file</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"keyword\">const</span> reader = <span class=\"keyword\">new</span> <span class=\"title class_\">FileReader</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\">          reader.<span class=\"title function_\">readAsDataURL</span>(file);</span></span><br><span class=\"line\"><span class=\"language-javascript\">          reader.<span class=\"property\">onload</span> = <span class=\"function\">() =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"variable language_\">this</span>.<span class=\"title function_\">canvasDataURL</span>(reader.<span class=\"property\">result</span>,<span class=\"number\">1500</span>).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">r</span>=&gt;</span>&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">              <span class=\"title function_\">resolve</span>(r);</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;).<span class=\"title function_\">catch</span>(<span class=\"function\"><span class=\"params\">e</span>=&gt;</span>&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">              <span class=\"title function_\">reject</span>(e);</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\">          &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">          reader.<span class=\"property\">onerror</span> = <span class=\"function\"><span class=\"params\">error</span> =&gt;</span> <span class=\"title function_\">reject</span>(error);</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;);</span></span><br><span class=\"line\"><span class=\"language-javascript\">      &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"comment\">//图片压缩处理</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"title function_\">canvasDataURL</span>(<span class=\"params\">re,w</span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span>&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"keyword\">let</span> newImg=<span class=\"keyword\">new</span> <span class=\"title class_\">Image</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\">          newImg.<span class=\"property\">src</span>=re;</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"keyword\">let</span> imgWidth,imgHeight;</span></span><br><span class=\"line\"><span class=\"language-javascript\">          newImg.<span class=\"property\">onload</span> = <span class=\"function\">() =&gt;</span>&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"keyword\">let</span> img=<span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&quot;img&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">            img.<span class=\"property\">src</span>=newImg.<span class=\"property\">src</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            imgWidth=img.<span class=\"property\">width</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            imgHeight=img.<span class=\"property\">height</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"keyword\">let</span> canvas=<span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&quot;canvas&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">            canvas.<span class=\"property\">width</span>=imgWidth;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            canvas.<span class=\"property\">height</span>=imgHeight;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"keyword\">let</span> ctx=canvas.<span class=\"title function_\">getContext</span>(<span class=\"string\">&quot;2d&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">            ctx.<span class=\"title function_\">clearRect</span>(<span class=\"number\">0</span>,<span class=\"number\">0</span>,imgWidth,imgHeight);</span></span><br><span class=\"line\"><span class=\"language-javascript\">            ctx.<span class=\"title function_\">drawImage</span>(img,<span class=\"number\">0</span>,<span class=\"number\">0</span>,imgWidth,imgHeight);</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"title function_\">resolve</span>(canvas.<span class=\"title function_\">toDataURL</span>(<span class=\"string\">&quot;image/jpeg&quot;</span>,<span class=\"number\">0.2</span>))</span></span><br><span class=\"line\"><span class=\"language-javascript\">          &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">          newImg.<span class=\"property\">onerror</span> = <span class=\"function\"><span class=\"params\">error</span> =&gt;</span> <span class=\"title function_\">reject</span>(error);</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;) </span></span><br><span class=\"line\"><span class=\"language-javascript\">      &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"comment\">//将base64转换为文件</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"title function_\">dataURLtoFile</span>(<span class=\"params\">dataurl, filename</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">let</span> arr = dataurl.<span class=\"title function_\">split</span>(<span class=\"string\">&#x27;,&#x27;</span>), mime = arr[<span class=\"number\">0</span>].<span class=\"title function_\">match</span>(<span class=\"regexp\">/:(.*?);/</span>)[<span class=\"number\">1</span>],</span></span><br><span class=\"line\"><span class=\"language-javascript\">            bstr = <span class=\"title function_\">atob</span>(arr[<span class=\"number\">1</span>]), n = bstr.<span class=\"property\">length</span>, u8arr = <span class=\"keyword\">new</span> <span class=\"title class_\">Uint8Array</span>(n);</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">while</span>(n--)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">          u8arr[n] = bstr.<span class=\"title function_\">charCodeAt</span>(n);</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">File</span>([u8arr], filename, &#123;<span class=\"attr\">type</span>:mime&#125;);</span></span><br><span class=\"line\"><span class=\"language-javascript\">      &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;scss&quot;</span> <span class=\"attr\">scoped</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t\t\t</span><br></pre></td></tr></table></figure>\n\n\n"},{"title":"一个比localStorage还要好的本地存储 LocalForage","date":"2021-02-25T09:59:00.000Z","_content":"\nlocalForage 是一个 JavaScript 库，通过简单类似 localStorage API 的异步存储来改进你的 Web 应用程序的离线体验。它能存储多种类型的数据，而不仅仅是字符串。\nlocalForage 有一个优雅降级策略，若浏览器不支持 IndexedDB 或 WebSQL，则使用 localStorage。在所有主流浏览器中都可用：Chrome，Firefox，IE 和 Safari（包括 Safari Mobile）。\n\n\n项目地址:[https://github.com/localForage/localForage](https://github.com/localForage/localForage)\n```bash\nnpm install localforage\n```\n\n\n```javascript\nimport localforage from \"localforage\";\nwindow.localforage = localforage;\n```\n\n\n我们先来对比下两者的区别\n\n| 属性 | localStorage | localForage |\n| :--- | :--- | :--- |\n| 容量 | 5M | 无限制 |\n| 类型 | String/Object | 任何类型 |\n| 读取方式 | 同步 | 异步 |\n\n1、localForage的容量几乎无限制，而localStorage只能存储大约5M的内容，如果内容存储的过多的话，会导致内存的消耗以及页面变卡，非常影响性能。\n2、localForage增删改查的方法几乎和localStorage相同，并且支持回调方法，因为在某些加载存储图片的情况下可能是异步的，所以localForage的异步有效的解决了同步阻塞问题。\n\n\n```javascript\nlocalforage.getItem('keyname', function (err, value) {\n    ...\n});\nlocalforage.setItem('keyname', value, function (err, value) {\n    ...\n});\n```\n\n\n```javascript\nlocalforage.setItem('key', 'value').then(function () {\n  return localforage.getItem('key');\n}).then(function (value) {\n  // we got our value\n}).catch(function (err) {\n  // we got an error\n});\n```\n\n\n3、localStorage一般存储为字符串类型，如果是对象的话，我们需要通过JSON.stringify和JSON.parse转换。但是localForage几乎可以支持任何类型，包括图片base64、blob类型。\n4、那么为什么localForage可以存储那么多内容呢？那是因为他内置了驱动，默认情况他会先去利用[IndexedDB](http://www.ruanyifeng.com/blog/2018/07/indexeddb.html)进行存储，如果浏览器不支持就会用[WebSQL](https://www.runoob.com/html/html5-web-sql.html)来存储，最后才用localStorage。当然你也可以利用setDriver()方法设置特定的驱动来存储。\n\n\n```javascript\nlocalforage.INDEXEDDB\nlocalforage.WEBSQL\nlocalforage.LOCALSTORAGE\n```\n\n\n5、相对于IndexedDB、WebSQL复杂的操作，localforage利用了我们熟悉localStorage增啥改查的方法将数据存储在了IndexedDB、WebSQL、localStorage中，大大减少了开发人员学习的成本，同时也解决了我们本地数据存储时遇到的一些问题。\n\n","source":"_posts/一个比localStorage还要好的本地存储-LocalForage.md","raw":"---\ntitle: 一个比localStorage还要好的本地存储 LocalForage\ndate: 2021-02-25 17:59\ntags:\n---\n\nlocalForage 是一个 JavaScript 库，通过简单类似 localStorage API 的异步存储来改进你的 Web 应用程序的离线体验。它能存储多种类型的数据，而不仅仅是字符串。\nlocalForage 有一个优雅降级策略，若浏览器不支持 IndexedDB 或 WebSQL，则使用 localStorage。在所有主流浏览器中都可用：Chrome，Firefox，IE 和 Safari（包括 Safari Mobile）。\n\n\n项目地址:[https://github.com/localForage/localForage](https://github.com/localForage/localForage)\n```bash\nnpm install localforage\n```\n\n\n```javascript\nimport localforage from \"localforage\";\nwindow.localforage = localforage;\n```\n\n\n我们先来对比下两者的区别\n\n| 属性 | localStorage | localForage |\n| :--- | :--- | :--- |\n| 容量 | 5M | 无限制 |\n| 类型 | String/Object | 任何类型 |\n| 读取方式 | 同步 | 异步 |\n\n1、localForage的容量几乎无限制，而localStorage只能存储大约5M的内容，如果内容存储的过多的话，会导致内存的消耗以及页面变卡，非常影响性能。\n2、localForage增删改查的方法几乎和localStorage相同，并且支持回调方法，因为在某些加载存储图片的情况下可能是异步的，所以localForage的异步有效的解决了同步阻塞问题。\n\n\n```javascript\nlocalforage.getItem('keyname', function (err, value) {\n    ...\n});\nlocalforage.setItem('keyname', value, function (err, value) {\n    ...\n});\n```\n\n\n```javascript\nlocalforage.setItem('key', 'value').then(function () {\n  return localforage.getItem('key');\n}).then(function (value) {\n  // we got our value\n}).catch(function (err) {\n  // we got an error\n});\n```\n\n\n3、localStorage一般存储为字符串类型，如果是对象的话，我们需要通过JSON.stringify和JSON.parse转换。但是localForage几乎可以支持任何类型，包括图片base64、blob类型。\n4、那么为什么localForage可以存储那么多内容呢？那是因为他内置了驱动，默认情况他会先去利用[IndexedDB](http://www.ruanyifeng.com/blog/2018/07/indexeddb.html)进行存储，如果浏览器不支持就会用[WebSQL](https://www.runoob.com/html/html5-web-sql.html)来存储，最后才用localStorage。当然你也可以利用setDriver()方法设置特定的驱动来存储。\n\n\n```javascript\nlocalforage.INDEXEDDB\nlocalforage.WEBSQL\nlocalforage.LOCALSTORAGE\n```\n\n\n5、相对于IndexedDB、WebSQL复杂的操作，localforage利用了我们熟悉localStorage增啥改查的方法将数据存储在了IndexedDB、WebSQL、localStorage中，大大减少了开发人员学习的成本，同时也解决了我们本地数据存储时遇到的一些问题。\n\n","slug":"一个比localStorage还要好的本地存储-LocalForage","published":1,"updated":"2022-08-30T07:40:46.027Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7g2c7g3000c7qu5eygf7uzi","content":"<p>localForage 是一个 JavaScript 库，通过简单类似 localStorage API 的异步存储来改进你的 Web 应用程序的离线体验。它能存储多种类型的数据，而不仅仅是字符串。<br>localForage 有一个优雅降级策略，若浏览器不支持 IndexedDB 或 WebSQL，则使用 localStorage。在所有主流浏览器中都可用：Chrome，Firefox，IE 和 Safari（包括 Safari Mobile）。</p>\n<p>项目地址:<a href=\"https://github.com/localForage/localForage\">https://github.com/localForage/localForage</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install localforage</span><br></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> localforage <span class=\"keyword\">from</span> <span class=\"string\">&quot;localforage&quot;</span>;</span><br><span class=\"line\"><span class=\"variable language_\">window</span>.<span class=\"property\">localforage</span> = localforage;</span><br></pre></td></tr></table></figure>\n\n\n<p>我们先来对比下两者的区别</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">属性</th>\n<th align=\"left\">localStorage</th>\n<th align=\"left\">localForage</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">容量</td>\n<td align=\"left\">5M</td>\n<td align=\"left\">无限制</td>\n</tr>\n<tr>\n<td align=\"left\">类型</td>\n<td align=\"left\">String&#x2F;Object</td>\n<td align=\"left\">任何类型</td>\n</tr>\n<tr>\n<td align=\"left\">读取方式</td>\n<td align=\"left\">同步</td>\n<td align=\"left\">异步</td>\n</tr>\n</tbody></table>\n<p>1、localForage的容量几乎无限制，而localStorage只能存储大约5M的内容，如果内容存储的过多的话，会导致内存的消耗以及页面变卡，非常影响性能。<br>2、localForage增删改查的方法几乎和localStorage相同，并且支持回调方法，因为在某些加载存储图片的情况下可能是异步的，所以localForage的异步有效的解决了同步阻塞问题。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">localforage.<span class=\"title function_\">getItem</span>(<span class=\"string\">&#x27;keyname&#x27;</span>, <span class=\"keyword\">function</span> (<span class=\"params\">err, value</span>) &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">localforage.<span class=\"title function_\">setItem</span>(<span class=\"string\">&#x27;keyname&#x27;</span>, value, <span class=\"keyword\">function</span> (<span class=\"params\">err, value</span>) &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">localforage.<span class=\"title function_\">setItem</span>(<span class=\"string\">&#x27;key&#x27;</span>, <span class=\"string\">&#x27;value&#x27;</span>).<span class=\"title function_\">then</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> localforage.<span class=\"title function_\">getItem</span>(<span class=\"string\">&#x27;key&#x27;</span>);</span><br><span class=\"line\">&#125;).<span class=\"title function_\">then</span>(<span class=\"keyword\">function</span> (<span class=\"params\">value</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// we got our value</span></span><br><span class=\"line\">&#125;).<span class=\"title function_\">catch</span>(<span class=\"keyword\">function</span> (<span class=\"params\">err</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// we got an error</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n\n<p>3、localStorage一般存储为字符串类型，如果是对象的话，我们需要通过JSON.stringify和JSON.parse转换。但是localForage几乎可以支持任何类型，包括图片base64、blob类型。<br>4、那么为什么localForage可以存储那么多内容呢？那是因为他内置了驱动，默认情况他会先去利用<a href=\"http://www.ruanyifeng.com/blog/2018/07/indexeddb.html\">IndexedDB</a>进行存储，如果浏览器不支持就会用<a href=\"https://www.runoob.com/html/html5-web-sql.html\">WebSQL</a>来存储，最后才用localStorage。当然你也可以利用setDriver()方法设置特定的驱动来存储。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">localforage.<span class=\"property\">INDEXEDDB</span></span><br><span class=\"line\">localforage.<span class=\"property\">WEBSQL</span></span><br><span class=\"line\">localforage.<span class=\"property\">LOCALSTORAGE</span></span><br></pre></td></tr></table></figure>\n\n\n<p>5、相对于IndexedDB、WebSQL复杂的操作，localforage利用了我们熟悉localStorage增啥改查的方法将数据存储在了IndexedDB、WebSQL、localStorage中，大大减少了开发人员学习的成本，同时也解决了我们本地数据存储时遇到的一些问题。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>localForage 是一个 JavaScript 库，通过简单类似 localStorage API 的异步存储来改进你的 Web 应用程序的离线体验。它能存储多种类型的数据，而不仅仅是字符串。<br>localForage 有一个优雅降级策略，若浏览器不支持 IndexedDB 或 WebSQL，则使用 localStorage。在所有主流浏览器中都可用：Chrome，Firefox，IE 和 Safari（包括 Safari Mobile）。</p>\n<p>项目地址:<a href=\"https://github.com/localForage/localForage\">https://github.com/localForage/localForage</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install localforage</span><br></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> localforage <span class=\"keyword\">from</span> <span class=\"string\">&quot;localforage&quot;</span>;</span><br><span class=\"line\"><span class=\"variable language_\">window</span>.<span class=\"property\">localforage</span> = localforage;</span><br></pre></td></tr></table></figure>\n\n\n<p>我们先来对比下两者的区别</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">属性</th>\n<th align=\"left\">localStorage</th>\n<th align=\"left\">localForage</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">容量</td>\n<td align=\"left\">5M</td>\n<td align=\"left\">无限制</td>\n</tr>\n<tr>\n<td align=\"left\">类型</td>\n<td align=\"left\">String&#x2F;Object</td>\n<td align=\"left\">任何类型</td>\n</tr>\n<tr>\n<td align=\"left\">读取方式</td>\n<td align=\"left\">同步</td>\n<td align=\"left\">异步</td>\n</tr>\n</tbody></table>\n<p>1、localForage的容量几乎无限制，而localStorage只能存储大约5M的内容，如果内容存储的过多的话，会导致内存的消耗以及页面变卡，非常影响性能。<br>2、localForage增删改查的方法几乎和localStorage相同，并且支持回调方法，因为在某些加载存储图片的情况下可能是异步的，所以localForage的异步有效的解决了同步阻塞问题。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">localforage.<span class=\"title function_\">getItem</span>(<span class=\"string\">&#x27;keyname&#x27;</span>, <span class=\"keyword\">function</span> (<span class=\"params\">err, value</span>) &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">localforage.<span class=\"title function_\">setItem</span>(<span class=\"string\">&#x27;keyname&#x27;</span>, value, <span class=\"keyword\">function</span> (<span class=\"params\">err, value</span>) &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">localforage.<span class=\"title function_\">setItem</span>(<span class=\"string\">&#x27;key&#x27;</span>, <span class=\"string\">&#x27;value&#x27;</span>).<span class=\"title function_\">then</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> localforage.<span class=\"title function_\">getItem</span>(<span class=\"string\">&#x27;key&#x27;</span>);</span><br><span class=\"line\">&#125;).<span class=\"title function_\">then</span>(<span class=\"keyword\">function</span> (<span class=\"params\">value</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// we got our value</span></span><br><span class=\"line\">&#125;).<span class=\"title function_\">catch</span>(<span class=\"keyword\">function</span> (<span class=\"params\">err</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// we got an error</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n\n<p>3、localStorage一般存储为字符串类型，如果是对象的话，我们需要通过JSON.stringify和JSON.parse转换。但是localForage几乎可以支持任何类型，包括图片base64、blob类型。<br>4、那么为什么localForage可以存储那么多内容呢？那是因为他内置了驱动，默认情况他会先去利用<a href=\"http://www.ruanyifeng.com/blog/2018/07/indexeddb.html\">IndexedDB</a>进行存储，如果浏览器不支持就会用<a href=\"https://www.runoob.com/html/html5-web-sql.html\">WebSQL</a>来存储，最后才用localStorage。当然你也可以利用setDriver()方法设置特定的驱动来存储。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">localforage.<span class=\"property\">INDEXEDDB</span></span><br><span class=\"line\">localforage.<span class=\"property\">WEBSQL</span></span><br><span class=\"line\">localforage.<span class=\"property\">LOCALSTORAGE</span></span><br></pre></td></tr></table></figure>\n\n\n<p>5、相对于IndexedDB、WebSQL复杂的操作，localforage利用了我们熟悉localStorage增啥改查的方法将数据存储在了IndexedDB、WebSQL、localStorage中，大大减少了开发人员学习的成本，同时也解决了我们本地数据存储时遇到的一些问题。</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}