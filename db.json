{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"themes/hexo-theme-aomori/source/dist/build.css","path":"dist/build.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-aomori/source/dist/build.js","path":"dist/build.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-aomori/source/dist/custom.css","path":"dist/custom.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-aomori/source/dist/custom.js","path":"dist/custom.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-aomori/source/javascripts/app.js","path":"javascripts/app.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-aomori/source/javascripts/class-module.js","path":"javascripts/class-module.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-aomori/source/javascripts/custom.js","path":"javascripts/custom.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-aomori/source/javascripts/disqusjs.js","path":"javascripts/disqusjs.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-aomori/source/javascripts/gitalk.js","path":"javascripts/gitalk.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-aomori/source/javascripts/valine.js","path":"javascripts/valine.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-aomori/source/modules/algoliasearch-lite.umd.js","path":"modules/algoliasearch-lite.umd.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-aomori/source/modules/highlight.min.js","path":"modules/highlight.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-aomori/source/modules/lazyload.min.js","path":"modules/lazyload.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-aomori/source/modules/md5.min.js","path":"modules/md5.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-aomori/source/modules/nprogress.js","path":"modules/nprogress.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-aomori/source/modules/perfect-scrollbar.min.js","path":"modules/perfect-scrollbar.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-aomori/source/modules/plyr.js","path":"modules/plyr.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-aomori/source/modules/swiper-bundle.min.js","path":"modules/swiper-bundle.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-aomori/source/modules/tocbot.min.js","path":"modules/tocbot.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-aomori/source/modules/typed.min.js","path":"modules/typed.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-aomori/source/stylesheets/base.scss","path":"stylesheets/base.scss","modified":1,"renderable":1},{"_id":"themes/hexo-theme-aomori/source/stylesheets/github.css","path":"stylesheets/github.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-aomori/source/stylesheets/media-fixed.scss","path":"stylesheets/media-fixed.scss","modified":1,"renderable":1},{"_id":"themes/hexo-theme-aomori/source/stylesheets/normalize.css","path":"stylesheets/normalize.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-aomori/source/stylesheets/nprogress.css","path":"stylesheets/nprogress.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-aomori/source/stylesheets/page.scss","path":"stylesheets/page.scss","modified":1,"renderable":1},{"_id":"themes/hexo-theme-aomori/source/stylesheets/perfect-scrollbar.css","path":"stylesheets/perfect-scrollbar.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-aomori/source/stylesheets/plyr.css","path":"stylesheets/plyr.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-aomori/source/stylesheets/post.css","path":"stylesheets/post.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-aomori/source/stylesheets/remark42.css","path":"stylesheets/remark42.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-aomori/source/stylesheets/spectre-exp.min.css","path":"stylesheets/spectre-exp.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-aomori/source/stylesheets/spectre-icons.min.css","path":"stylesheets/spectre-icons.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-aomori/source/stylesheets/spectre.min.css","path":"stylesheets/spectre.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-aomori/source/stylesheets/style.scss","path":"stylesheets/style.scss","modified":1,"renderable":1},{"_id":"themes/hexo-theme-aomori/source/stylesheets/swiper-bundle.min.css","path":"stylesheets/swiper-bundle.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-aomori/source/stylesheets/tocbot.css","path":"stylesheets/tocbot.css","modified":1,"renderable":1}],"Cache":[{"_id":"source/_posts/2分钟教你如何免费搭建属于自己的网站或博客.md","hash":"26b5bcafc72e317df391975736448364374171f0","modified":1667363095800},{"_id":"source/_data/friends.json","hash":"1a0c1b6ff323fa7e4b9d8ec2ddb45c4d2402d68d","modified":1667363095800},{"_id":"source/_posts/Ant-Design-VUE-Upload组件-OSS上传图片.md","hash":"9c456701000b1b863b68cbf772ff3181c670d328","modified":1667363095800},{"_id":"source/_data/photography.json","hash":"8516a75601e6297d8cdb45d02ec09a50bbaa001a","modified":1667363095800},{"_id":"source/_posts/JS多个异步接口的顺序调用.md","hash":"0dc8d3df7c50125ef2071edb2cf7b01fc3e947df","modified":1667363095800},{"_id":"source/_posts/egg写一个最简单的mysql查询接口.md","hash":"14e86c2d72e2fe34639d4d04bed1d45478681bc7","modified":1667363095800},{"_id":"source/_posts/vscode漂亮的代码格式化prettier.md","hash":"cb74fa9f9e2a0b263a75d7467cafa12e04a97219","modified":1667363095800},{"_id":"source/_posts/vue老项目升级Vite优化提升16倍.md","hash":"9ab4572c511fc5c016bbbc293eae9600163ff3b5","modified":1668420074159},{"_id":"source/_posts/vue项目启用压缩gzip.md","hash":"7136e5e2b51005e75fd7a0c3a6d4a69a7b78738a","modified":1667363095800},{"_id":"source/_posts/egg写一个最简单的token登陆验证.md","hash":"673a03560014889f570fdc29945c3d9c7caf07d7","modified":1667363095800},{"_id":"source/_posts/利用腾讯云cloudbase快速搭建vue项目到发布.md","hash":"60115626a5aa13c7c3d114115a428b9c70235433","modified":1667363095800},{"_id":"source/_posts/微信小程序云开发.md","hash":"cbcc5ebf0516cf576cb490eb3ef164471e66a5af","modified":1667363095800},{"_id":"source/_posts/一个比localStorage还要好的本地存储-LocalForage.md","hash":"ac3abc97be7909d9aa3642c1243cfdc4f19a89ce","modified":1667363095800},{"_id":"source/_posts/vscode-eslint-规则.md","hash":"a17ed682fdedc16587c74fc656ac32efbccace6d","modified":1667363095800},{"_id":"source/_posts/理解vue3组合式API-Setup（一）.md","hash":"e08753c79ac326bc45c6bd7af3bbfeaa5eb68ee4","modified":1667363095800},{"_id":"source/_posts/纯前端利用canvas压缩图片上传.md","hash":"6b78b992e33ecb9e5747378db833378d4c2325e7","modified":1667363095800},{"_id":"source/_posts/ios手机平板免费看全网爱奇艺、腾讯VIP视频教程！！！.md","hash":"b3e37d1480eea6336ae8239b0b2f3a1d88a9b5c9","modified":1667365816915},{"_id":"source/photography/index.md","hash":"3dd200145904dd1e0d507289a9098032747d1591","modified":1667363095800},{"_id":"source/_posts/理解vue3组合式API-Setup（二）.md","hash":"73c9e8e640c052e1ba549a8f207755785e63da96","modified":1667363095800},{"_id":"source/index/index.md","hash":"206ac0189f972dfc171e70bde4f4a8a32c3de958","modified":1667363095800},{"_id":"source/_posts/解决vue-keepAlive-二次进入页面显示首次缓存问题.md","hash":"aba76a0611ae072c8ca43783951213bbc7736c49","modified":1667363095800},{"_id":"source/collection/index.md","hash":"98257a060ad0b528fe789fe43749da2f223fb680","modified":1667363095800},{"_id":"themes/hexo-theme-aomori/CHANGELOG.md","hash":"45e3f28e7a4085134630a77b499670a8bcac6df1","modified":1667363095800},{"_id":"themes/hexo-theme-aomori/LICENSE","hash":"df86e662005fc659cb72166664f8360223c10864","modified":1667363095800},{"_id":"themes/hexo-theme-aomori/README.md","hash":"9284588f3d73b808fef81ae9eb1544658ee036e0","modified":1667363095800},{"_id":"themes/hexo-theme-aomori/_config.yml","hash":"57294f3a7d89742c1f576b5b2f3afcc01aaec5dd","modified":1667363095800},{"_id":"themes/hexo-theme-aomori/package.json","hash":"694d645c6702d16d45607ab2f0ed65f165c968f6","modified":1667363095804},{"_id":"themes/hexo-theme-aomori/gulpfile.js","hash":"029ff69b9df64bf205ba5b2880e40f09fa1d2177","modified":1667363095804},{"_id":"themes/hexo-theme-aomori/stylelint.config.js","hash":"35805e8a64447c3e9fec8cb7ca619783b4ffa4af","modified":1667363095816},{"_id":"themes/hexo-theme-aomori/languages/it.yml","hash":"64a5acadfdcd365474ba1161041f8c5938f59683","modified":1667363095804},{"_id":"themes/hexo-theme-aomori/languages/cn.yml","hash":"041cda235156e1a078c27b969cadc4e29d017475","modified":1667363095804},{"_id":"themes/hexo-theme-aomori/languages/ja.yml","hash":"90a615a4f6e9af92ec7695022c475ff4ce3b8081","modified":1667363095804},{"_id":"themes/hexo-theme-aomori/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1667363095804},{"_id":"themes/hexo-theme-aomori/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1667363095804},{"_id":"themes/hexo-theme-aomori/layout/layout.ejs","hash":"c5dd66db0cea3796abda36146ab38f061c91f39e","modified":1667363095804},{"_id":"themes/hexo-theme-aomori/layout/post.ejs","hash":"f80a3073ea72631a26292ba16906b6d692a6e67c","modified":1667363095804},{"_id":"themes/hexo-theme-aomori/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1667363095804},{"_id":"themes/hexo-theme-aomori/layout/page.ejs","hash":"5e77fecc752e7baa7ce5ac57162980202160811d","modified":1667363095804},{"_id":"themes/hexo-theme-aomori/layout/index.ejs","hash":"ca9a6b1e5d2d952757671637156c5d72e6a0cb13","modified":1667363095804},{"_id":"themes/hexo-theme-aomori/layout/_partial/archive-post.ejs","hash":"74371ea0ece20630f686459a3df334b760c6bc55","modified":1667363095804},{"_id":"themes/hexo-theme-aomori/layout/_partial/article-index.ejs","hash":"a436624e8aeb8c94113566cb1756e5c031cf5d8d","modified":1667363095804},{"_id":"themes/hexo-theme-aomori/layout/_partial/archive.ejs","hash":"f15750967beb06d91491aade0b4b00cb76a37dc9","modified":1667363095804},{"_id":"themes/hexo-theme-aomori/layout/_partial/footer.ejs","hash":"5938951f12f1257528163851f1d344b159ab5a4a","modified":1667363095804},{"_id":"themes/hexo-theme-aomori/layout/_partial/header.ejs","hash":"29618017302e56fcb0bcc3a6487bacf6cb668086","modified":1667363095804},{"_id":"themes/hexo-theme-aomori/layout/_partial/head.ejs","hash":"b4fe8c26c41ecb03e666ef9fa45aae43c420bd38","modified":1667363095804},{"_id":"themes/hexo-theme-aomori/layout/_partial/article.ejs","hash":"64fd49d64394a8a91030a56012a0131ee113d0a8","modified":1667363095804},{"_id":"themes/hexo-theme-aomori/layout/_partial/meta.ejs","hash":"c8c71be685e412afbd8e9b25262e22f483f5e729","modified":1667363095804},{"_id":"themes/hexo-theme-aomori/layout/_partial/article-tweet.ejs","hash":"67045e6d5d4bf141ad3e8a2bf34624ca5938e626","modified":1667363095804},{"_id":"themes/hexo-theme-aomori/layout/_partial/search.ejs","hash":"1569fd207c3be44ad37b644fb1399416a54779d3","modified":1667363095804},{"_id":"themes/hexo-theme-aomori/layout/_partial/sidebar.ejs","hash":"0f049afead13cf54b5e2f3174379d7a79eac0efe","modified":1667363095804},{"_id":"themes/hexo-theme-aomori/layout/_partial/social.ejs","hash":"3ab80663dee0f4e3ae33ec4f42874530c7e926ec","modified":1667363095804},{"_id":"themes/hexo-theme-aomori/layout/_widget/archive.ejs","hash":"4d00993c9f80ddbce6d4b8317d4c29a4fb1fb139","modified":1667363095804},{"_id":"themes/hexo-theme-aomori/layout/_widget/tag.ejs","hash":"e45f32b6c1b3a23c361d2c7dc70207d93c0f71b1","modified":1667363095804},{"_id":"themes/hexo-theme-aomori/source/dist/custom.css","hash":"225a8abab79b67565badb8d8e9dd73f56537ba28","modified":1667363095808},{"_id":"themes/hexo-theme-aomori/layout/_widget/recent_posts.ejs","hash":"d45e8c7b9c7fec1b8fdeabaa5026f27da0a04304","modified":1667363095804},{"_id":"themes/hexo-theme-aomori/layout/_widget/toc.ejs","hash":"05a8cea96817332d13bf3ede759e6f72ed0f7973","modified":1667363095804},{"_id":"themes/hexo-theme-aomori/layout/_widget/category.ejs","hash":"70bba3e81f42135ffeb2d129834fd5df8aea4c10","modified":1667363095804},{"_id":"themes/hexo-theme-aomori/source/javascripts/app.js","hash":"6bf67a2221f0dce645467ec0e83f30a242730f39","modified":1667363095808},{"_id":"themes/hexo-theme-aomori/source/javascripts/custom.js","hash":"b186b1ae8921a3bf4d8746ac5f39acc10269ff96","modified":1667363095808},{"_id":"themes/hexo-theme-aomori/source/javascripts/class-module.js","hash":"a771801e8e5528130a947958f605f9fc4c6d913d","modified":1667363095808},{"_id":"themes/hexo-theme-aomori/source/javascripts/gitalk.js","hash":"b2b847d6a4b8866f1a21896ab34b94adc607c6b4","modified":1667363095812},{"_id":"themes/hexo-theme-aomori/source/javascripts/disqusjs.js","hash":"1152117cee4e335306b79983573721aeb6418d39","modified":1667363095812},{"_id":"themes/hexo-theme-aomori/source/javascripts/valine.js","hash":"64a97abf6fb7291bccda74f108b5661a9694ebef","modified":1667363095812},{"_id":"themes/hexo-theme-aomori/source/modules/algoliasearch-lite.umd.js","hash":"bcd46b678c70779298df8ffad570ab14e434d292","modified":1667363095812},{"_id":"themes/hexo-theme-aomori/source/modules/lazyload.min.js","hash":"e7efa869cd842c2becc8337dd9cc445cd0fa5000","modified":1667363095812},{"_id":"themes/hexo-theme-aomori/source/modules/perfect-scrollbar.min.js","hash":"cd1784e029249ebf5d57de1f677a4a61019706ae","modified":1667363095812},{"_id":"themes/hexo-theme-aomori/source/modules/nprogress.js","hash":"14757ab1fcf209a4f17c9da3d6abb196fa65cba2","modified":1667363095812},{"_id":"themes/hexo-theme-aomori/source/modules/md5.min.js","hash":"ab074f76aa161e2851e19733d802a66c9a242387","modified":1667363095812},{"_id":"themes/hexo-theme-aomori/source/stylesheets/base.scss","hash":"a26efbbdcf15e8d6e3c044e733294fc6e8bedc77","modified":1667363095812},{"_id":"themes/hexo-theme-aomori/source/stylesheets/github.css","hash":"ee593952684a791317ee8b77ad096e729dec649e","modified":1667363095812},{"_id":"themes/hexo-theme-aomori/source/stylesheets/media-fixed.scss","hash":"4b0ff31517a8a3106cf227d85ec305b346cfa69b","modified":1667363095812},{"_id":"themes/hexo-theme-aomori/source/stylesheets/normalize.css","hash":"ebe0759bf259b6caeadee6137973481046ac5636","modified":1667363095812},{"_id":"themes/hexo-theme-aomori/source/stylesheets/nprogress.css","hash":"af66636e02bccfe2fdf7c1ad7de1face9bf5ae2d","modified":1667363095812},{"_id":"themes/hexo-theme-aomori/source/stylesheets/page.scss","hash":"57c6874a0520cb31f2295e5d75c8dabde066b478","modified":1667363095812},{"_id":"themes/hexo-theme-aomori/source/stylesheets/perfect-scrollbar.css","hash":"a94e730430930b2e048352996ff44bf28647669d","modified":1667363095812},{"_id":"themes/hexo-theme-aomori/source/stylesheets/plyr.css","hash":"89c8e024bad75eec921898cae702785d77272dda","modified":1667363095812},{"_id":"themes/hexo-theme-aomori/source/stylesheets/post.css","hash":"3f06ce944c9f721cdb5ea26c96fa11f9c2f6ec2f","modified":1667363095812},{"_id":"themes/hexo-theme-aomori/source/stylesheets/remark42.css","hash":"b12749bacee85f203fcd10afd9212838ffef06f3","modified":1667363095812},{"_id":"themes/hexo-theme-aomori/source/stylesheets/spectre-icons.min.css","hash":"0f624fe521e0eb6c1f775f13eb0fb93ab6cf802c","modified":1667363095812},{"_id":"themes/hexo-theme-aomori/source/stylesheets/spectre-exp.min.css","hash":"9ca686024f1e3c742a488156e8fcf4f7f5518425","modified":1667363095812},{"_id":"themes/hexo-theme-aomori/source/stylesheets/style.scss","hash":"613fdeba6d7c7a2746e572ede464cd4db42ac570","modified":1667363095816},{"_id":"themes/hexo-theme-aomori/source/stylesheets/spectre.min.css","hash":"419c87aed0f592239f2adcbb6396731c6a7711cc","modified":1667363095816},{"_id":"themes/hexo-theme-aomori/source/stylesheets/tocbot.css","hash":"635010b494dae3d91d3be1b079b72b26ab2cc5b8","modified":1667363095816},{"_id":"themes/hexo-theme-aomori/source/stylesheets/swiper-bundle.min.css","hash":"a1fd2a708504af70216469cbd582cf698db8e461","modified":1667363095816},{"_id":"themes/hexo-theme-aomori/source/modules/tocbot.min.js","hash":"76cd7f7ae727d3883d69a04a4402a46684e4d4d0","modified":1667363095812},{"_id":"themes/hexo-theme-aomori/source/modules/typed.min.js","hash":"ad8a75bd4743122b5dbf517221506607588ec50b","modified":1667363095812},{"_id":"themes/hexo-theme-aomori/layout/_partial/page/default.ejs","hash":"23e0039aeba6413b99319fad4cea4e225aab38a1","modified":1667363095804},{"_id":"themes/hexo-theme-aomori/layout/_partial/page/photography.ejs","hash":"6a71806820a4d92082d307a0e4dc67976d4038c4","modified":1667363095804},{"_id":"themes/hexo-theme-aomori/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1667363095804},{"_id":"themes/hexo-theme-aomori/layout/_partial/page/friends.ejs","hash":"514e137c0e19e06dd3e930a98e5569cf83446b0a","modified":1667363095804},{"_id":"themes/hexo-theme-aomori/layout/_partial/post/comments.ejs","hash":"1502b23d5520b5db6c31c8036187f5373b4eb794","modified":1667363095804},{"_id":"themes/hexo-theme-aomori/layout/_partial/post/ad.ejs","hash":"0a8130bcec7879f830976858b8d0dfe0ba036c01","modified":1667363095804},{"_id":"themes/hexo-theme-aomori/layout/_partial/post/gallery.ejs","hash":"4502ca02780f3054cfaa517c9946d8c0479966cb","modified":1667363095804},{"_id":"themes/hexo-theme-aomori/layout/_partial/post/date.ejs","hash":"c610dc1283e5d6ae582b9544ee6836e9fcea1b7c","modified":1667363095804},{"_id":"themes/hexo-theme-aomori/layout/_partial/post/refer.ejs","hash":"cc1e673e1054b62da356fc066e048b084a03559a","modified":1667363095804},{"_id":"themes/hexo-theme-aomori/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1667363095804},{"_id":"themes/hexo-theme-aomori/layout/_partial/post/copyright.ejs","hash":"4f1f566351a2ddff3f44f854a58f65ba6b28072c","modified":1667363095804},{"_id":"themes/hexo-theme-aomori/layout/_partial/post/reprint.ejs","hash":"75e9c766d19cb0907214e5628e00868b2adb6dcb","modified":1667363095804},{"_id":"themes/hexo-theme-aomori/layout/_partial/post/nav.ejs","hash":"d86028403ef9a098747712dc3103ed69c5089daa","modified":1667363095804},{"_id":"themes/hexo-theme-aomori/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1667363095804},{"_id":"themes/hexo-theme-aomori/layout/_partial/page/photography-item.ejs","hash":"a6c1097d3428110825ca106c1379f2cd8034057f","modified":1667363095804},{"_id":"themes/hexo-theme-aomori/source/modules/highlight.min.js","hash":"5c25af3caf3f02695741a4b989fedcca6cc1e88d","modified":1667363095812},{"_id":"themes/hexo-theme-aomori/source/modules/plyr.js","hash":"6bce9267aa6e64f77973f7079cea430d88befca1","modified":1667363095812},{"_id":"themes/hexo-theme-aomori/docs/cover.png","hash":"f52354acc7e9e52efcafc2c33e41a4907c541055","modified":1667363095804},{"_id":"themes/hexo-theme-aomori/source/dist/build.css","hash":"d08b3ac3ce76582649bf4445c62c99011e3d5583","modified":1667363095804},{"_id":"themes/hexo-theme-aomori/source/dist/custom.js","hash":"d7679202f697b6547c456c08bab4edc9b76faaf4","modified":1667363095808},{"_id":"themes/hexo-theme-aomori/source/modules/swiper-bundle.min.js","hash":"72bd612182b6c475aa3d896231341a87da680ecb","modified":1667363095812},{"_id":"themes/hexo-theme-aomori/source/dist/build.js","hash":"f359132db8fdf12f4d9220cd42ce718c466d0d04","modified":1667363095808},{"_id":"public/photography/index.html","hash":"0a990615024e8408e68090eea759e99cb51b9e6c","modified":1668420190668},{"_id":"public/index/index.html","hash":"57245720707e5a01bf70367f345a115064edaa8b","modified":1668420190668},{"_id":"public/2021/04/25/vscode漂亮的代码格式化prettier/index.html","hash":"8405876af596cb83fbb559975677dedbf13c158e","modified":1668420190668},{"_id":"public/archives/index.html","hash":"b2314620751105dabbff763cee4adf4b995a6701","modified":1668420190668},{"_id":"public/archives/page/2/index.html","hash":"a76b209ad7a34fe0890cf90b8334cbf95303bd65","modified":1668420190668},{"_id":"public/archives/2021/index.html","hash":"358a515744f4022cf2f70d2af53b9666bec90f3b","modified":1668420190668},{"_id":"public/archives/2021/page/2/index.html","hash":"f017c7ee4a8ceed01e7265af70cdf56352286971","modified":1668420190668},{"_id":"public/archives/2021/02/index.html","hash":"5827742ac511de6dd5e54cc60bd2a8030bccde6e","modified":1668420190668},{"_id":"public/archives/2021/03/index.html","hash":"7562ebeb3e8aa4e54d1529ccd803a66b33fb5949","modified":1668420190668},{"_id":"public/archives/2021/04/index.html","hash":"80eb14e240fe0d4d2dc1f996840642ebe0414fe6","modified":1668420190668},{"_id":"public/archives/2021/06/index.html","hash":"f01456bc64b046b48c4c82296640cd74f3224c81","modified":1668420190668},{"_id":"public/archives/2021/07/index.html","hash":"e85649c9c3708be37fe99e946e1ad5b179d85e67","modified":1668420190668},{"_id":"public/archives/2022/index.html","hash":"16842c062dac787a63d67bf29673ae74eee79d8c","modified":1668420190668},{"_id":"public/archives/2022/01/index.html","hash":"a0e3bad6c47a4c43d3370125e731ad982b6897f9","modified":1668420190668},{"_id":"public/archives/2022/09/index.html","hash":"7d9a9ac85b6c02b2be365e25dd3e3fe54bbfef9e","modified":1668420190668},{"_id":"public/archives/2022/11/index.html","hash":"d2967705032481460433f3ad15243a22fab1debf","modified":1668420190668},{"_id":"public/collection/index.html","hash":"543c0ea397de931eeab21999092b0a65521009be","modified":1668420190668},{"_id":"public/2022/11/17/vue老项目升级Vite优化提升16倍/index.html","hash":"737fbfe19024b6faf01d0213e4841b5dd3fe8601","modified":1668420190668},{"_id":"public/2022/11/02/ios手机平板免费看全网爱奇艺、腾讯VIP视频教程！！！/index.html","hash":"12f070ecd8ba6832c03e657e0c2051dd18481e54","modified":1668420190668},{"_id":"public/2022/09/23/2分钟教你如何免费搭建属于自己的网站或博客/index.html","hash":"2303fd93d4f85fd1a2e46242f35880842034fe24","modified":1668420190668},{"_id":"public/2022/09/14/微信小程序云开发/index.html","hash":"18a87eb59e1d465eb6f94cd941a2cdbb4fcb2279","modified":1668420190668},{"_id":"public/2022/01/28/利用腾讯云cloudbase快速搭建vue项目到发布/index.html","hash":"cf4cd34f79b4daa5d83382802d732eb72c7a2d65","modified":1668420190668},{"_id":"public/2021/07/26/解决vue-keepAlive-二次进入页面显示首次缓存问题/index.html","hash":"29b1ad1d698325ab269cf799fb8f77f485f94e2c","modified":1668420190668},{"_id":"public/2021/07/05/理解vue3组合式API-Setup（二）/index.html","hash":"94513b2300cf7271438f3ac2205e9b41de2be649","modified":1668420190668},{"_id":"public/2021/06/25/理解vue3组合式API-Setup（一）/index.html","hash":"a4e77b35c1ddce19987aa000c3229b3b0317a437","modified":1668420190668},{"_id":"public/2021/04/06/vue项目启用压缩gzip/index.html","hash":"313e46e5b736f02bb6d5bf78ced0a8f26bcd480e","modified":1668420190668},{"_id":"public/2021/03/12/Ant-Design-VUE-Upload组件-OSS上传图片/index.html","hash":"0cd0979e7de8cdf0b7687d04271b327e155a57fa","modified":1668420190668},{"_id":"public/2021/02/26/JS多个异步接口的顺序调用/index.html","hash":"23e3bc99ddcbdf4e310ec094329586ff7185e928","modified":1668420190668},{"_id":"public/2021/02/25/egg写一个最简单的token登陆验证/index.html","hash":"2c41536d08a1ed5ea28ede7ba60ebeadf189d478","modified":1668420190668},{"_id":"public/2021/02/25/vscode-eslint-规则/index.html","hash":"c09decde563fe4220608b74e0b34e66a4f34993b","modified":1668420190668},{"_id":"public/2021/02/25/一个比localStorage还要好的本地存储-LocalForage/index.html","hash":"7725e1a1c2ab4f5d95ae9bb18454ec5148b10390","modified":1668420190668},{"_id":"public/2021/02/25/纯前端利用canvas压缩图片上传/index.html","hash":"264ec53cad5d2767a80f3bea089816456b0aa686","modified":1668420190668},{"_id":"public/2021/02/25/egg写一个最简单的mysql查询接口/index.html","hash":"7d8ba1063a98e2dafa692e510cee9fcdcb63a5e7","modified":1668420190668},{"_id":"public/index.html","hash":"8136feea57b18b7c68634546edfbbe6b3c1a70e0","modified":1668420190668},{"_id":"public/page/2/index.html","hash":"50686341fc24d4e0784e0632321b1638571e8bfa","modified":1668420190668},{"_id":"public/stylesheets/base.scss","hash":"a26efbbdcf15e8d6e3c044e733294fc6e8bedc77","modified":1668420190668},{"_id":"public/stylesheets/media-fixed.scss","hash":"4b0ff31517a8a3106cf227d85ec305b346cfa69b","modified":1668420190668},{"_id":"public/stylesheets/page.scss","hash":"57c6874a0520cb31f2295e5d75c8dabde066b478","modified":1668420190668},{"_id":"public/stylesheets/style.scss","hash":"613fdeba6d7c7a2746e572ede464cd4db42ac570","modified":1668420190668},{"_id":"public/javascripts/app.js","hash":"6bf67a2221f0dce645467ec0e83f30a242730f39","modified":1668420190668},{"_id":"public/javascripts/class-module.js","hash":"a771801e8e5528130a947958f605f9fc4c6d913d","modified":1668420190668},{"_id":"public/javascripts/custom.js","hash":"b186b1ae8921a3bf4d8746ac5f39acc10269ff96","modified":1668420190668},{"_id":"public/javascripts/disqusjs.js","hash":"1152117cee4e335306b79983573721aeb6418d39","modified":1668420190668},{"_id":"public/javascripts/gitalk.js","hash":"b2b847d6a4b8866f1a21896ab34b94adc607c6b4","modified":1668420190668},{"_id":"public/javascripts/valine.js","hash":"64a97abf6fb7291bccda74f108b5661a9694ebef","modified":1668420190668},{"_id":"public/modules/algoliasearch-lite.umd.js","hash":"bcd46b678c70779298df8ffad570ab14e434d292","modified":1668420190668},{"_id":"public/modules/lazyload.min.js","hash":"a9b706094ef95a2f4ce0ec6eef0181951c5a7208","modified":1668420190668},{"_id":"public/modules/md5.min.js","hash":"ab074f76aa161e2851e19733d802a66c9a242387","modified":1668420190668},{"_id":"public/modules/nprogress.js","hash":"14757ab1fcf209a4f17c9da3d6abb196fa65cba2","modified":1668420190668},{"_id":"public/modules/tocbot.min.js","hash":"76cd7f7ae727d3883d69a04a4402a46684e4d4d0","modified":1668420190668},{"_id":"public/modules/typed.min.js","hash":"ad8a75bd4743122b5dbf517221506607588ec50b","modified":1668420190668},{"_id":"public/stylesheets/github.css","hash":"ee593952684a791317ee8b77ad096e729dec649e","modified":1668420190668},{"_id":"public/stylesheets/normalize.css","hash":"ebe0759bf259b6caeadee6137973481046ac5636","modified":1668420190668},{"_id":"public/stylesheets/nprogress.css","hash":"af66636e02bccfe2fdf7c1ad7de1face9bf5ae2d","modified":1668420190668},{"_id":"public/stylesheets/perfect-scrollbar.css","hash":"a94e730430930b2e048352996ff44bf28647669d","modified":1668420190668},{"_id":"public/stylesheets/post.css","hash":"3f06ce944c9f721cdb5ea26c96fa11f9c2f6ec2f","modified":1668420190668},{"_id":"public/stylesheets/remark42.css","hash":"b12749bacee85f203fcd10afd9212838ffef06f3","modified":1668420190668},{"_id":"public/stylesheets/spectre-icons.min.css","hash":"0f624fe521e0eb6c1f775f13eb0fb93ab6cf802c","modified":1668420190668},{"_id":"public/stylesheets/swiper-bundle.min.css","hash":"a1fd2a708504af70216469cbd582cf698db8e461","modified":1668420190668},{"_id":"public/stylesheets/tocbot.css","hash":"635010b494dae3d91d3be1b079b72b26ab2cc5b8","modified":1668420190668},{"_id":"public/dist/build.css","hash":"d08b3ac3ce76582649bf4445c62c99011e3d5583","modified":1668420190668},{"_id":"public/dist/custom.css","hash":"225a8abab79b67565badb8d8e9dd73f56537ba28","modified":1668420190668},{"_id":"public/dist/custom.js","hash":"d7679202f697b6547c456c08bab4edc9b76faaf4","modified":1668420190668},{"_id":"public/dist/build.js","hash":"a36f7dc0df1c252b2f407ceed1bb2bd6f31ba2ce","modified":1668420190668},{"_id":"public/modules/highlight.min.js","hash":"5c25af3caf3f02695741a4b989fedcca6cc1e88d","modified":1668420190668},{"_id":"public/modules/perfect-scrollbar.min.js","hash":"cd1784e029249ebf5d57de1f677a4a61019706ae","modified":1668420190668},{"_id":"public/modules/plyr.js","hash":"6bce9267aa6e64f77973f7079cea430d88befca1","modified":1668420190668},{"_id":"public/modules/swiper-bundle.min.js","hash":"72bd612182b6c475aa3d896231341a87da680ecb","modified":1668420190668},{"_id":"public/stylesheets/plyr.css","hash":"89c8e024bad75eec921898cae702785d77272dda","modified":1668420190668},{"_id":"public/stylesheets/spectre-exp.min.css","hash":"9ca686024f1e3c742a488156e8fcf4f7f5518425","modified":1668420190668},{"_id":"public/stylesheets/spectre.min.css","hash":"419c87aed0f592239f2adcbb6396731c6a7711cc","modified":1668420190668}],"Category":[],"Data":[{"_id":"friends","data":[{"category":"技术","data":[{"name":"stackblitz","url":"https://stackblitz.com"},{"name":"serverless-devs","url":"http://www.serverless-devs.com/"},{"name":"cypress自动化测试","url":"https://www.cypress.io/"},{"name":"微前端架构","url":"https://micro-frontends.ice.work/"},{"name":"gin+vue进行极速开发的全栈开发基础平台","url":"https://www.gin-vue-admin.com/"},{"name":"cloudbase","url":"https://docs.cloudbase.net/"},{"name":"supabase","url":"https://supabase.com/"}]},{"category":"工具","data":[{"name":"程序员工具集合大全","url":"https://www.bejson.com/"},{"name":"图片处理","url":"https://imagestool.com/zh_CN/index.html"},{"name":"免费在线抠图","url":"https://picwish.cn/"},{"name":"LOGO海报设计","url":"https://www.canva.cn/"},{"name":"图片无损缩放","url":"http://waifu2x.udp.jp/"},{"name":"图片格式转换器","url":"https://renzhezhilu.github.io/webp2jpg-online/"},{"name":"PDF工具集合","url":"https://tools.pdf24.org/zh/"},{"name":"UI直接生成代码","url":"https://code.fun/"},{"name":"markdown转公众号知乎","url":"https://editor.mdnice.com/"},{"name":"油猴脚本库","url":"https://greasyfork.org/zh-CN"},{"name":"代码片段转图片","url":"https://ray.so/"},{"name":"nginx配置器","url":"https://www.digitalocean.com/community/tools/nginx?global.app.lang=zhCN"},{"name":"前端插件库","url":"https://awesomejs.dev/"},{"name":"独特工具箱啥都有","url":"https://www.dute.org/"},{"name":"url编码解码","url":"http://www.jsons.cn/urlencode"},{"name":"菜鸟工具(正则测试等)","url":"https://c.runoob.com/front-end/854/"},{"name":"JSON编辑器格式化","url":"https://www.jsont.run/"},{"name":"七夜导航各类工具集","url":"https://nav.qinight.com/"},{"name":"生活百科wiki","url":"https://zh.wikihow.com/"},{"name":"表情包搜索网站","url":"https://www.dbbqb.com/"},{"name":"果汁工具大全(生活类)","url":"http://guozhivip.com/tool/"},{"name":"谷歌插件国内下载","url":"https://chrome.zzzmh.cn"},{"name":"PDF/图片/视频/音频/格式转换","url":"https://www.aconvert.com/cn/"},{"name":"JSON转各类代码","url":"https://app.quicktype.io/"},{"name":"markdown笔记","url":"https://yank-note.vercel.app"},{"name":"网页版API接口调试(界面清爽)","url":"https://httpie.io/app"},{"name":"在线开发神器手机网页开发同步","url":"https://replit.com/"},{"name":"在网页上运行安卓app","url":"https://www.wolfia.com/"},{"name":"在线工具开发手机web同步开发","url":"https://replit.com/"},{"name":"在线http接口调试","url":"https://httpie.io/app"}]},{"category":"素材","data":[{"name":"免费壁纸","url":"https://wallpaperhub.app"},{"name":"UI设计库","url":"https://screenlane.com/"},{"name":"摄图网","url":"https://699pic.com/"}]},{"category":"学习","data":[{"name":"面试基础知识","url":"https://micro-frontends.ice.work/"},{"name":"各类语言框架语法大全查询","url":"https://socode.pro/"},{"name":"前端人俱乐部","url":"http://f2er.club/"},{"name":"vue3+ts","url":"https://24kcs.github.io/vue3_study/"}]},{"category":"软件","data":[{"name":"正版软件购买","url":"https://apsgo.com/"}]},{"category":"前端","data":[{"name":"图标库","url":"https://iconoir.com/"},{"name":"前端大全","url":"https://docschina.org/"},{"name":"使用 Vue.js 开发小程序的前端框架","url":"http://mpvue.com/"},{"name":"uviewui","url":"https://www.uviewui.com/"},{"name":"varlet","url":"https://varlet.gitee.io/varlet-ui/#/zh-CN/index"},{"name":"vant","url":"https://vant-contrib.gitee.io/vant/#/zh-CN"},{"name":"tdesign","url":"https://tdesign.tencent.com/"},{"name":"前端开发UI素材","url":"https://www.creative-tim.com/"},{"name":"vue-treeselect","url":"https://www.vue-treeselect.cn/"},{"name":"semi","url":"https://semi.design/zh-CN/"},{"name":"tailwindcss","url":"https://www.tailwindcss.cn/"},{"name":"fontawesome图标","url":"https://fontawesome.com/"},{"name":"vantajs动画","url":"https://www.vantajs.com/"},{"name":"视差效果pushinjs","url":"https://nateplusplus.github.io/pushin/"}]}]},{"_id":"photography","data":[{"thumbnail":"https://thumbnail.jpg","photo":"https://photo.jpg","title":"This is title.","icon":"camera","place":"China"},{"thumbnail":"https://thumbnail.jpg","photo":"https://photo.jpg","title":"This is title.","icon":"camera","place":"China"}]}],"Page":[{"title":"收藏","layout":"friends","date":"2022-09-08T02:43:10.000Z","_content":"","source":"collection/index.md","raw":"---\ntitle: 收藏\nlayout: friends\ndate: 2022-09-08 10:43:10\n---\n","updated":"2022-11-02T04:24:55.800Z","path":"collection/index.html","comments":1,"_id":"clagmayf700006c844is8d6t8","content":"","site":{"data":{"friends":[{"category":"技术","data":[{"name":"stackblitz","url":"https://stackblitz.com"},{"name":"serverless-devs","url":"http://www.serverless-devs.com/"},{"name":"cypress自动化测试","url":"https://www.cypress.io/"},{"name":"微前端架构","url":"https://micro-frontends.ice.work/"},{"name":"gin+vue进行极速开发的全栈开发基础平台","url":"https://www.gin-vue-admin.com/"},{"name":"cloudbase","url":"https://docs.cloudbase.net/"},{"name":"supabase","url":"https://supabase.com/"}]},{"category":"工具","data":[{"name":"程序员工具集合大全","url":"https://www.bejson.com/"},{"name":"图片处理","url":"https://imagestool.com/zh_CN/index.html"},{"name":"免费在线抠图","url":"https://picwish.cn/"},{"name":"LOGO海报设计","url":"https://www.canva.cn/"},{"name":"图片无损缩放","url":"http://waifu2x.udp.jp/"},{"name":"图片格式转换器","url":"https://renzhezhilu.github.io/webp2jpg-online/"},{"name":"PDF工具集合","url":"https://tools.pdf24.org/zh/"},{"name":"UI直接生成代码","url":"https://code.fun/"},{"name":"markdown转公众号知乎","url":"https://editor.mdnice.com/"},{"name":"油猴脚本库","url":"https://greasyfork.org/zh-CN"},{"name":"代码片段转图片","url":"https://ray.so/"},{"name":"nginx配置器","url":"https://www.digitalocean.com/community/tools/nginx?global.app.lang=zhCN"},{"name":"前端插件库","url":"https://awesomejs.dev/"},{"name":"独特工具箱啥都有","url":"https://www.dute.org/"},{"name":"url编码解码","url":"http://www.jsons.cn/urlencode"},{"name":"菜鸟工具(正则测试等)","url":"https://c.runoob.com/front-end/854/"},{"name":"JSON编辑器格式化","url":"https://www.jsont.run/"},{"name":"七夜导航各类工具集","url":"https://nav.qinight.com/"},{"name":"生活百科wiki","url":"https://zh.wikihow.com/"},{"name":"表情包搜索网站","url":"https://www.dbbqb.com/"},{"name":"果汁工具大全(生活类)","url":"http://guozhivip.com/tool/"},{"name":"谷歌插件国内下载","url":"https://chrome.zzzmh.cn"},{"name":"PDF/图片/视频/音频/格式转换","url":"https://www.aconvert.com/cn/"},{"name":"JSON转各类代码","url":"https://app.quicktype.io/"},{"name":"markdown笔记","url":"https://yank-note.vercel.app"},{"name":"网页版API接口调试(界面清爽)","url":"https://httpie.io/app"},{"name":"在线开发神器手机网页开发同步","url":"https://replit.com/"},{"name":"在网页上运行安卓app","url":"https://www.wolfia.com/"},{"name":"在线工具开发手机web同步开发","url":"https://replit.com/"},{"name":"在线http接口调试","url":"https://httpie.io/app"}]},{"category":"素材","data":[{"name":"免费壁纸","url":"https://wallpaperhub.app"},{"name":"UI设计库","url":"https://screenlane.com/"},{"name":"摄图网","url":"https://699pic.com/"}]},{"category":"学习","data":[{"name":"面试基础知识","url":"https://micro-frontends.ice.work/"},{"name":"各类语言框架语法大全查询","url":"https://socode.pro/"},{"name":"前端人俱乐部","url":"http://f2er.club/"},{"name":"vue3+ts","url":"https://24kcs.github.io/vue3_study/"}]},{"category":"软件","data":[{"name":"正版软件购买","url":"https://apsgo.com/"}]},{"category":"前端","data":[{"name":"图标库","url":"https://iconoir.com/"},{"name":"前端大全","url":"https://docschina.org/"},{"name":"使用 Vue.js 开发小程序的前端框架","url":"http://mpvue.com/"},{"name":"uviewui","url":"https://www.uviewui.com/"},{"name":"varlet","url":"https://varlet.gitee.io/varlet-ui/#/zh-CN/index"},{"name":"vant","url":"https://vant-contrib.gitee.io/vant/#/zh-CN"},{"name":"tdesign","url":"https://tdesign.tencent.com/"},{"name":"前端开发UI素材","url":"https://www.creative-tim.com/"},{"name":"vue-treeselect","url":"https://www.vue-treeselect.cn/"},{"name":"semi","url":"https://semi.design/zh-CN/"},{"name":"tailwindcss","url":"https://www.tailwindcss.cn/"},{"name":"fontawesome图标","url":"https://fontawesome.com/"},{"name":"vantajs动画","url":"https://www.vantajs.com/"},{"name":"视差效果pushinjs","url":"https://nateplusplus.github.io/pushin/"}]}],"photography":[{"thumbnail":"https://thumbnail.jpg","photo":"https://photo.jpg","title":"This is title.","icon":"camera","place":"China"},{"thumbnail":"https://thumbnail.jpg","photo":"https://photo.jpg","title":"This is title.","icon":"camera","place":"China"}]}},"excerpt":"","more":""},{"title":"相册","layout":"photography","sidebar":false,"date":"2022-09-08T02:14:10.000Z","_content":"","source":"photography/index.md","raw":"---\ntitle: 相册\nlayout: photography\nsidebar: false\ndate: 2022-09-08 10:14:10\n---\n","updated":"2022-11-02T04:24:55.800Z","path":"photography/index.html","comments":1,"_id":"clagmayfc00026c840veihpkn","content":"","site":{"data":{"friends":[{"category":"技术","data":[{"name":"stackblitz","url":"https://stackblitz.com"},{"name":"serverless-devs","url":"http://www.serverless-devs.com/"},{"name":"cypress自动化测试","url":"https://www.cypress.io/"},{"name":"微前端架构","url":"https://micro-frontends.ice.work/"},{"name":"gin+vue进行极速开发的全栈开发基础平台","url":"https://www.gin-vue-admin.com/"},{"name":"cloudbase","url":"https://docs.cloudbase.net/"},{"name":"supabase","url":"https://supabase.com/"}]},{"category":"工具","data":[{"name":"程序员工具集合大全","url":"https://www.bejson.com/"},{"name":"图片处理","url":"https://imagestool.com/zh_CN/index.html"},{"name":"免费在线抠图","url":"https://picwish.cn/"},{"name":"LOGO海报设计","url":"https://www.canva.cn/"},{"name":"图片无损缩放","url":"http://waifu2x.udp.jp/"},{"name":"图片格式转换器","url":"https://renzhezhilu.github.io/webp2jpg-online/"},{"name":"PDF工具集合","url":"https://tools.pdf24.org/zh/"},{"name":"UI直接生成代码","url":"https://code.fun/"},{"name":"markdown转公众号知乎","url":"https://editor.mdnice.com/"},{"name":"油猴脚本库","url":"https://greasyfork.org/zh-CN"},{"name":"代码片段转图片","url":"https://ray.so/"},{"name":"nginx配置器","url":"https://www.digitalocean.com/community/tools/nginx?global.app.lang=zhCN"},{"name":"前端插件库","url":"https://awesomejs.dev/"},{"name":"独特工具箱啥都有","url":"https://www.dute.org/"},{"name":"url编码解码","url":"http://www.jsons.cn/urlencode"},{"name":"菜鸟工具(正则测试等)","url":"https://c.runoob.com/front-end/854/"},{"name":"JSON编辑器格式化","url":"https://www.jsont.run/"},{"name":"七夜导航各类工具集","url":"https://nav.qinight.com/"},{"name":"生活百科wiki","url":"https://zh.wikihow.com/"},{"name":"表情包搜索网站","url":"https://www.dbbqb.com/"},{"name":"果汁工具大全(生活类)","url":"http://guozhivip.com/tool/"},{"name":"谷歌插件国内下载","url":"https://chrome.zzzmh.cn"},{"name":"PDF/图片/视频/音频/格式转换","url":"https://www.aconvert.com/cn/"},{"name":"JSON转各类代码","url":"https://app.quicktype.io/"},{"name":"markdown笔记","url":"https://yank-note.vercel.app"},{"name":"网页版API接口调试(界面清爽)","url":"https://httpie.io/app"},{"name":"在线开发神器手机网页开发同步","url":"https://replit.com/"},{"name":"在网页上运行安卓app","url":"https://www.wolfia.com/"},{"name":"在线工具开发手机web同步开发","url":"https://replit.com/"},{"name":"在线http接口调试","url":"https://httpie.io/app"}]},{"category":"素材","data":[{"name":"免费壁纸","url":"https://wallpaperhub.app"},{"name":"UI设计库","url":"https://screenlane.com/"},{"name":"摄图网","url":"https://699pic.com/"}]},{"category":"学习","data":[{"name":"面试基础知识","url":"https://micro-frontends.ice.work/"},{"name":"各类语言框架语法大全查询","url":"https://socode.pro/"},{"name":"前端人俱乐部","url":"http://f2er.club/"},{"name":"vue3+ts","url":"https://24kcs.github.io/vue3_study/"}]},{"category":"软件","data":[{"name":"正版软件购买","url":"https://apsgo.com/"}]},{"category":"前端","data":[{"name":"图标库","url":"https://iconoir.com/"},{"name":"前端大全","url":"https://docschina.org/"},{"name":"使用 Vue.js 开发小程序的前端框架","url":"http://mpvue.com/"},{"name":"uviewui","url":"https://www.uviewui.com/"},{"name":"varlet","url":"https://varlet.gitee.io/varlet-ui/#/zh-CN/index"},{"name":"vant","url":"https://vant-contrib.gitee.io/vant/#/zh-CN"},{"name":"tdesign","url":"https://tdesign.tencent.com/"},{"name":"前端开发UI素材","url":"https://www.creative-tim.com/"},{"name":"vue-treeselect","url":"https://www.vue-treeselect.cn/"},{"name":"semi","url":"https://semi.design/zh-CN/"},{"name":"tailwindcss","url":"https://www.tailwindcss.cn/"},{"name":"fontawesome图标","url":"https://fontawesome.com/"},{"name":"vantajs动画","url":"https://www.vantajs.com/"},{"name":"视差效果pushinjs","url":"https://nateplusplus.github.io/pushin/"}]}],"photography":[{"thumbnail":"https://thumbnail.jpg","photo":"https://photo.jpg","title":"This is title.","icon":"camera","place":"China"},{"thumbnail":"https://thumbnail.jpg","photo":"https://photo.jpg","title":"This is title.","icon":"camera","place":"China"}]}},"excerpt":"","more":""},{"title":"index","comment":true,"date":"2022-09-08T02:07:37.000Z","_content":"","source":"index/index.md","raw":"---\ntitle: index\ncomment: true\ndate: 2022-09-08 10:07:37\n---\n","updated":"2022-11-02T04:24:55.800Z","path":"index/index.html","comments":1,"layout":"page","_id":"clagmayff00046c8419063413","content":"","site":{"data":{"friends":[{"category":"技术","data":[{"name":"stackblitz","url":"https://stackblitz.com"},{"name":"serverless-devs","url":"http://www.serverless-devs.com/"},{"name":"cypress自动化测试","url":"https://www.cypress.io/"},{"name":"微前端架构","url":"https://micro-frontends.ice.work/"},{"name":"gin+vue进行极速开发的全栈开发基础平台","url":"https://www.gin-vue-admin.com/"},{"name":"cloudbase","url":"https://docs.cloudbase.net/"},{"name":"supabase","url":"https://supabase.com/"}]},{"category":"工具","data":[{"name":"程序员工具集合大全","url":"https://www.bejson.com/"},{"name":"图片处理","url":"https://imagestool.com/zh_CN/index.html"},{"name":"免费在线抠图","url":"https://picwish.cn/"},{"name":"LOGO海报设计","url":"https://www.canva.cn/"},{"name":"图片无损缩放","url":"http://waifu2x.udp.jp/"},{"name":"图片格式转换器","url":"https://renzhezhilu.github.io/webp2jpg-online/"},{"name":"PDF工具集合","url":"https://tools.pdf24.org/zh/"},{"name":"UI直接生成代码","url":"https://code.fun/"},{"name":"markdown转公众号知乎","url":"https://editor.mdnice.com/"},{"name":"油猴脚本库","url":"https://greasyfork.org/zh-CN"},{"name":"代码片段转图片","url":"https://ray.so/"},{"name":"nginx配置器","url":"https://www.digitalocean.com/community/tools/nginx?global.app.lang=zhCN"},{"name":"前端插件库","url":"https://awesomejs.dev/"},{"name":"独特工具箱啥都有","url":"https://www.dute.org/"},{"name":"url编码解码","url":"http://www.jsons.cn/urlencode"},{"name":"菜鸟工具(正则测试等)","url":"https://c.runoob.com/front-end/854/"},{"name":"JSON编辑器格式化","url":"https://www.jsont.run/"},{"name":"七夜导航各类工具集","url":"https://nav.qinight.com/"},{"name":"生活百科wiki","url":"https://zh.wikihow.com/"},{"name":"表情包搜索网站","url":"https://www.dbbqb.com/"},{"name":"果汁工具大全(生活类)","url":"http://guozhivip.com/tool/"},{"name":"谷歌插件国内下载","url":"https://chrome.zzzmh.cn"},{"name":"PDF/图片/视频/音频/格式转换","url":"https://www.aconvert.com/cn/"},{"name":"JSON转各类代码","url":"https://app.quicktype.io/"},{"name":"markdown笔记","url":"https://yank-note.vercel.app"},{"name":"网页版API接口调试(界面清爽)","url":"https://httpie.io/app"},{"name":"在线开发神器手机网页开发同步","url":"https://replit.com/"},{"name":"在网页上运行安卓app","url":"https://www.wolfia.com/"},{"name":"在线工具开发手机web同步开发","url":"https://replit.com/"},{"name":"在线http接口调试","url":"https://httpie.io/app"}]},{"category":"素材","data":[{"name":"免费壁纸","url":"https://wallpaperhub.app"},{"name":"UI设计库","url":"https://screenlane.com/"},{"name":"摄图网","url":"https://699pic.com/"}]},{"category":"学习","data":[{"name":"面试基础知识","url":"https://micro-frontends.ice.work/"},{"name":"各类语言框架语法大全查询","url":"https://socode.pro/"},{"name":"前端人俱乐部","url":"http://f2er.club/"},{"name":"vue3+ts","url":"https://24kcs.github.io/vue3_study/"}]},{"category":"软件","data":[{"name":"正版软件购买","url":"https://apsgo.com/"}]},{"category":"前端","data":[{"name":"图标库","url":"https://iconoir.com/"},{"name":"前端大全","url":"https://docschina.org/"},{"name":"使用 Vue.js 开发小程序的前端框架","url":"http://mpvue.com/"},{"name":"uviewui","url":"https://www.uviewui.com/"},{"name":"varlet","url":"https://varlet.gitee.io/varlet-ui/#/zh-CN/index"},{"name":"vant","url":"https://vant-contrib.gitee.io/vant/#/zh-CN"},{"name":"tdesign","url":"https://tdesign.tencent.com/"},{"name":"前端开发UI素材","url":"https://www.creative-tim.com/"},{"name":"vue-treeselect","url":"https://www.vue-treeselect.cn/"},{"name":"semi","url":"https://semi.design/zh-CN/"},{"name":"tailwindcss","url":"https://www.tailwindcss.cn/"},{"name":"fontawesome图标","url":"https://fontawesome.com/"},{"name":"vantajs动画","url":"https://www.vantajs.com/"},{"name":"视差效果pushinjs","url":"https://nateplusplus.github.io/pushin/"}]}],"photography":[{"thumbnail":"https://thumbnail.jpg","photo":"https://photo.jpg","title":"This is title.","icon":"camera","place":"China"},{"thumbnail":"https://thumbnail.jpg","photo":"https://photo.jpg","title":"This is title.","icon":"camera","place":"China"}]}},"excerpt":"","more":""}],"Post":[{"title":"2分钟教你如何免费搭建属于自己的网站或博客","date":"2022-09-23T09:57:00.000Z","_content":"\n## 2分钟教你如何免费搭建属于自己的网站或博客\n先去[阿里云](https://www.aliyun.com/)注册一个账号，并且实名认证一下。\n\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/WX20220923-143144.png)\n\n在阿里云产品与服务里面找到 函数计算FC 直接进入\n<!-- more -->\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/WX20220923-143557.png)\n\n在应用下面直接点击创建应用\n\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/WX20220923-143903.png)\n\n通过模板创建应用，选择Zblog。\nZblog不仅可以创建个人博客，还可以创建一些企业官网、门户网站等，并且自带一个后端管理页面。具体可以去[Zblog官网](https://www.zblogcn.com/)选择喜欢的模板。\n\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/WX20220923-144819.png)\n\n进去之后选择直接部署，其他配置选择全部默认，部分需要授权操作，根据提示进行即可。最后点击创建。\n\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/WX20220923-151102.png)\n\n等待创建完成。\n\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/WX20220923-151303.png)\n\n创建完成之后会出现一个访问域名链接，直接点击链接就行。\n\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/WX20220923-151422.png)\n\n按照提示的步骤操作，数据库选择SQLite，然后填写网站标题、管理员名称密码即可。\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/WX20220923-151649.png)\n\n完成之后会跳转到自己的网站了，这样我们就算搭建好了。\n我们可以直接点击登录后台，账号密码就是刚刚自己填写的，千万不要忘了哦。\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/WX20220923-151926.png)\n\n进入后台以后，我们就可以想干嘛就干嘛啦~\n主题我们可以去官网自己选择，但是部分可能需要收费。\n后面如果需要绑定自己的域名，可以去函数计算FC设置里域名管理添加自己的域名哦~\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/WX20220923-152200.png)\n\n是不是很简单呢？\n\n\n\n\n\n","source":"_posts/2分钟教你如何免费搭建属于自己的网站或博客.md","raw":"---\ntitle: 2分钟教你如何免费搭建属于自己的网站或博客\ndate: 2022-09-23 17:57\ntags:\n---\n\n## 2分钟教你如何免费搭建属于自己的网站或博客\n先去[阿里云](https://www.aliyun.com/)注册一个账号，并且实名认证一下。\n\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/WX20220923-143144.png)\n\n在阿里云产品与服务里面找到 函数计算FC 直接进入\n<!-- more -->\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/WX20220923-143557.png)\n\n在应用下面直接点击创建应用\n\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/WX20220923-143903.png)\n\n通过模板创建应用，选择Zblog。\nZblog不仅可以创建个人博客，还可以创建一些企业官网、门户网站等，并且自带一个后端管理页面。具体可以去[Zblog官网](https://www.zblogcn.com/)选择喜欢的模板。\n\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/WX20220923-144819.png)\n\n进去之后选择直接部署，其他配置选择全部默认，部分需要授权操作，根据提示进行即可。最后点击创建。\n\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/WX20220923-151102.png)\n\n等待创建完成。\n\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/WX20220923-151303.png)\n\n创建完成之后会出现一个访问域名链接，直接点击链接就行。\n\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/WX20220923-151422.png)\n\n按照提示的步骤操作，数据库选择SQLite，然后填写网站标题、管理员名称密码即可。\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/WX20220923-151649.png)\n\n完成之后会跳转到自己的网站了，这样我们就算搭建好了。\n我们可以直接点击登录后台，账号密码就是刚刚自己填写的，千万不要忘了哦。\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/WX20220923-151926.png)\n\n进入后台以后，我们就可以想干嘛就干嘛啦~\n主题我们可以去官网自己选择，但是部分可能需要收费。\n后面如果需要绑定自己的域名，可以去函数计算FC设置里域名管理添加自己的域名哦~\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/WX20220923-152200.png)\n\n是不是很简单呢？\n\n\n\n\n\n","slug":"2分钟教你如何免费搭建属于自己的网站或博客","published":1,"updated":"2022-11-02T04:24:55.800Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clagmayfa00016c840g2r66zf","content":"<h2 id=\"2分钟教你如何免费搭建属于自己的网站或博客\"><a href=\"#2分钟教你如何免费搭建属于自己的网站或博客\" class=\"headerlink\" title=\"2分钟教你如何免费搭建属于自己的网站或博客\"></a>2分钟教你如何免费搭建属于自己的网站或博客</h2><p>先去<a href=\"https://www.aliyun.com/\">阿里云</a>注册一个账号，并且实名认证一下。</p>\n<p><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/WX20220923-143144.png\" alt=\"image.png\"></p>\n<p>在阿里云产品与服务里面找到 函数计算FC 直接进入</p>\n<span id=\"more\"></span>\n<p><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/WX20220923-143557.png\" alt=\"image.png\"></p>\n<p>在应用下面直接点击创建应用</p>\n<p><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/WX20220923-143903.png\" alt=\"image.png\"></p>\n<p>通过模板创建应用，选择Zblog。<br>Zblog不仅可以创建个人博客，还可以创建一些企业官网、门户网站等，并且自带一个后端管理页面。具体可以去<a href=\"https://www.zblogcn.com/\">Zblog官网</a>选择喜欢的模板。</p>\n<p><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/WX20220923-144819.png\" alt=\"image.png\"></p>\n<p>进去之后选择直接部署，其他配置选择全部默认，部分需要授权操作，根据提示进行即可。最后点击创建。</p>\n<p><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/WX20220923-151102.png\" alt=\"image.png\"></p>\n<p>等待创建完成。</p>\n<p><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/WX20220923-151303.png\" alt=\"image.png\"></p>\n<p>创建完成之后会出现一个访问域名链接，直接点击链接就行。</p>\n<p><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/WX20220923-151422.png\" alt=\"image.png\"></p>\n<p>按照提示的步骤操作，数据库选择SQLite，然后填写网站标题、管理员名称密码即可。<br><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/WX20220923-151649.png\" alt=\"image.png\"></p>\n<p>完成之后会跳转到自己的网站了，这样我们就算搭建好了。<br>我们可以直接点击登录后台，账号密码就是刚刚自己填写的，千万不要忘了哦。<br><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/WX20220923-151926.png\" alt=\"image.png\"></p>\n<p>进入后台以后，我们就可以想干嘛就干嘛啦~<br>主题我们可以去官网自己选择，但是部分可能需要收费。<br>后面如果需要绑定自己的域名，可以去函数计算FC设置里域名管理添加自己的域名哦~<br><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/WX20220923-152200.png\" alt=\"image.png\"></p>\n<p>是不是很简单呢？</p>\n","site":{"data":{"friends":[{"category":"技术","data":[{"name":"stackblitz","url":"https://stackblitz.com"},{"name":"serverless-devs","url":"http://www.serverless-devs.com/"},{"name":"cypress自动化测试","url":"https://www.cypress.io/"},{"name":"微前端架构","url":"https://micro-frontends.ice.work/"},{"name":"gin+vue进行极速开发的全栈开发基础平台","url":"https://www.gin-vue-admin.com/"},{"name":"cloudbase","url":"https://docs.cloudbase.net/"},{"name":"supabase","url":"https://supabase.com/"}]},{"category":"工具","data":[{"name":"程序员工具集合大全","url":"https://www.bejson.com/"},{"name":"图片处理","url":"https://imagestool.com/zh_CN/index.html"},{"name":"免费在线抠图","url":"https://picwish.cn/"},{"name":"LOGO海报设计","url":"https://www.canva.cn/"},{"name":"图片无损缩放","url":"http://waifu2x.udp.jp/"},{"name":"图片格式转换器","url":"https://renzhezhilu.github.io/webp2jpg-online/"},{"name":"PDF工具集合","url":"https://tools.pdf24.org/zh/"},{"name":"UI直接生成代码","url":"https://code.fun/"},{"name":"markdown转公众号知乎","url":"https://editor.mdnice.com/"},{"name":"油猴脚本库","url":"https://greasyfork.org/zh-CN"},{"name":"代码片段转图片","url":"https://ray.so/"},{"name":"nginx配置器","url":"https://www.digitalocean.com/community/tools/nginx?global.app.lang=zhCN"},{"name":"前端插件库","url":"https://awesomejs.dev/"},{"name":"独特工具箱啥都有","url":"https://www.dute.org/"},{"name":"url编码解码","url":"http://www.jsons.cn/urlencode"},{"name":"菜鸟工具(正则测试等)","url":"https://c.runoob.com/front-end/854/"},{"name":"JSON编辑器格式化","url":"https://www.jsont.run/"},{"name":"七夜导航各类工具集","url":"https://nav.qinight.com/"},{"name":"生活百科wiki","url":"https://zh.wikihow.com/"},{"name":"表情包搜索网站","url":"https://www.dbbqb.com/"},{"name":"果汁工具大全(生活类)","url":"http://guozhivip.com/tool/"},{"name":"谷歌插件国内下载","url":"https://chrome.zzzmh.cn"},{"name":"PDF/图片/视频/音频/格式转换","url":"https://www.aconvert.com/cn/"},{"name":"JSON转各类代码","url":"https://app.quicktype.io/"},{"name":"markdown笔记","url":"https://yank-note.vercel.app"},{"name":"网页版API接口调试(界面清爽)","url":"https://httpie.io/app"},{"name":"在线开发神器手机网页开发同步","url":"https://replit.com/"},{"name":"在网页上运行安卓app","url":"https://www.wolfia.com/"},{"name":"在线工具开发手机web同步开发","url":"https://replit.com/"},{"name":"在线http接口调试","url":"https://httpie.io/app"}]},{"category":"素材","data":[{"name":"免费壁纸","url":"https://wallpaperhub.app"},{"name":"UI设计库","url":"https://screenlane.com/"},{"name":"摄图网","url":"https://699pic.com/"}]},{"category":"学习","data":[{"name":"面试基础知识","url":"https://micro-frontends.ice.work/"},{"name":"各类语言框架语法大全查询","url":"https://socode.pro/"},{"name":"前端人俱乐部","url":"http://f2er.club/"},{"name":"vue3+ts","url":"https://24kcs.github.io/vue3_study/"}]},{"category":"软件","data":[{"name":"正版软件购买","url":"https://apsgo.com/"}]},{"category":"前端","data":[{"name":"图标库","url":"https://iconoir.com/"},{"name":"前端大全","url":"https://docschina.org/"},{"name":"使用 Vue.js 开发小程序的前端框架","url":"http://mpvue.com/"},{"name":"uviewui","url":"https://www.uviewui.com/"},{"name":"varlet","url":"https://varlet.gitee.io/varlet-ui/#/zh-CN/index"},{"name":"vant","url":"https://vant-contrib.gitee.io/vant/#/zh-CN"},{"name":"tdesign","url":"https://tdesign.tencent.com/"},{"name":"前端开发UI素材","url":"https://www.creative-tim.com/"},{"name":"vue-treeselect","url":"https://www.vue-treeselect.cn/"},{"name":"semi","url":"https://semi.design/zh-CN/"},{"name":"tailwindcss","url":"https://www.tailwindcss.cn/"},{"name":"fontawesome图标","url":"https://fontawesome.com/"},{"name":"vantajs动画","url":"https://www.vantajs.com/"},{"name":"视差效果pushinjs","url":"https://nateplusplus.github.io/pushin/"}]}],"photography":[{"thumbnail":"https://thumbnail.jpg","photo":"https://photo.jpg","title":"This is title.","icon":"camera","place":"China"},{"thumbnail":"https://thumbnail.jpg","photo":"https://photo.jpg","title":"This is title.","icon":"camera","place":"China"}]}},"excerpt":"<h2 id=\"2分钟教你如何免费搭建属于自己的网站或博客\"><a href=\"#2分钟教你如何免费搭建属于自己的网站或博客\" class=\"headerlink\" title=\"2分钟教你如何免费搭建属于自己的网站或博客\"></a>2分钟教你如何免费搭建属于自己的网站或博客</h2><p>先去<a href=\"https://www.aliyun.com/\">阿里云</a>注册一个账号，并且实名认证一下。</p>\n<p><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/WX20220923-143144.png\" alt=\"image.png\"></p>\n<p>在阿里云产品与服务里面找到 函数计算FC 直接进入</p>","more":"<p><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/WX20220923-143557.png\" alt=\"image.png\"></p>\n<p>在应用下面直接点击创建应用</p>\n<p><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/WX20220923-143903.png\" alt=\"image.png\"></p>\n<p>通过模板创建应用，选择Zblog。<br>Zblog不仅可以创建个人博客，还可以创建一些企业官网、门户网站等，并且自带一个后端管理页面。具体可以去<a href=\"https://www.zblogcn.com/\">Zblog官网</a>选择喜欢的模板。</p>\n<p><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/WX20220923-144819.png\" alt=\"image.png\"></p>\n<p>进去之后选择直接部署，其他配置选择全部默认，部分需要授权操作，根据提示进行即可。最后点击创建。</p>\n<p><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/WX20220923-151102.png\" alt=\"image.png\"></p>\n<p>等待创建完成。</p>\n<p><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/WX20220923-151303.png\" alt=\"image.png\"></p>\n<p>创建完成之后会出现一个访问域名链接，直接点击链接就行。</p>\n<p><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/WX20220923-151422.png\" alt=\"image.png\"></p>\n<p>按照提示的步骤操作，数据库选择SQLite，然后填写网站标题、管理员名称密码即可。<br><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/WX20220923-151649.png\" alt=\"image.png\"></p>\n<p>完成之后会跳转到自己的网站了，这样我们就算搭建好了。<br>我们可以直接点击登录后台，账号密码就是刚刚自己填写的，千万不要忘了哦。<br><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/WX20220923-151926.png\" alt=\"image.png\"></p>\n<p>进入后台以后，我们就可以想干嘛就干嘛啦~<br>主题我们可以去官网自己选择，但是部分可能需要收费。<br>后面如果需要绑定自己的域名，可以去函数计算FC设置里域名管理添加自己的域名哦~<br><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/WX20220923-152200.png\" alt=\"image.png\"></p>\n<p>是不是很简单呢？</p>"},{"title":"Ant Design VUE Upload组件 OSS上传图片","date":"2021-03-12T12:52:00.000Z","_content":"\n\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/1585566760218-eb503e89-dfbc-4fc9-a81c-97bb01aac7be.png)\n之前写图片上传都是通过自定义方法将file和OSS信息组装到formData里面然后设置请求头'Content-Type': 'multipart/form-data'来上传的，现在直接用自带的action上传还是挺方便的。\n\n<!-- more -->\n```js\n<template>\n\t<a-upload\n    :action=\"urlhost\"\n    listType=\"picture-card\"\n    accept=\"image/*\"\n    @preview=\"handlePreview\"\n    @change=\"handleChange\"\n    :remove=\"removeImg\"\n    :beforeUpload=\"beforeUpload\"\n    :data=\"paramsData\">\n    <a-icon type=\"plus\" />\n      <div class=\"ant-upload-text\">点击上传</div>\n </a-upload>\n   <a-modal :visible=\"previewVisible\" :footer=\"null\" @cancel=\"handleCancel\">\n      <img alt=\"example\" style=\"width: 100%\" :src=\"previewImage\" />\n   </a-modal>\n</template>\n\n\n<script>\n  function getBase64(file) {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.readAsDataURL(file);\n      reader.onload = () => resolve(reader.result);\n      reader.onerror = error => reject(error);\n    });\n  }\n  import {getOssSignWeb} from '../../../api/upload.js'; //获取后端OSS信息接口\n  export default {\n  \treturn {\n    \tbusinessId:'',//业务id\n    \tpreviewVisible:false,\n      previewImage: '',\n    \tparamsData:{ //OSS信息对象 也是用来需要上传的参数\n          'OSSAccessKeyId':'',\n          'policy':'',\n          'Signature':'',\n          'key':'',\n          'success_action_status':200\n        },\n    \turlhost:'', //上传路径\n  \t},\n    methods: {\n    \tasync handlePreview(file) { //点击图片预览\n        if (!file.url && !file.preview) {\n          file.preview = await getBase64(file.originFileObj);\n        }\n        this.previewImage = file.url || file.preview;\n        this.previewVisible = true;\n      },\n      beforeUpload(file, fileList){ //在上传前获取OSS信息\n        return new Promise((resolve,reject)=>{\n          let params ={\n            \"businessId\":this.businessId,\n            \"suffix\":'.jpg'\n          }\n          getOssSignWeb(params).then(res=>{\n            \tthis.urlhost = res.retData.host\n              this.paramsData = { //组装参数\n                'OSSAccessKeyId':res.retData.accessid,\n                'policy':res.retData.policy,\n                'Signature':res.retData.signature,\n                'key':res.retData.dir+res.retData.fileName,\n                'success_action_status':200\n              }\n              resolve(file)\n            }).catch(e=>{\n              reject()\n            })\n        })\n      },\n      removeImg(){\n        return new Promise((resolve,reject)=>{\n          this.$confirm({\n            title: '提示',\n            content: '是否删除这张图片',\n            okText: '确定',\n            okType: 'danger',\n            cancelText: '取消',\n            onOk() {\n              resolve(true)\n            },\n            onCancel() {\n              resolve(false)\n            },\n          })\n        })\n      },\n      handleChange(info) {\n        if (info.file.status === 'done') {\n          this.$message.success('上传成功！');\n        }\n        if (info.file.status === 'error') {\n          this.$message.error('上传失败！');\n        }\n      },\n      handleCancel() {\n        this.previewVisible = false;\n      },\n    }\n  }\n</script>\n```\n\n\n","source":"_posts/Ant-Design-VUE-Upload组件-OSS上传图片.md","raw":"---\ntitle: Ant Design VUE Upload组件 OSS上传图片\ndate: 2021-03-12 20:52\ntags:\n---\n\n\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/1585566760218-eb503e89-dfbc-4fc9-a81c-97bb01aac7be.png)\n之前写图片上传都是通过自定义方法将file和OSS信息组装到formData里面然后设置请求头'Content-Type': 'multipart/form-data'来上传的，现在直接用自带的action上传还是挺方便的。\n\n<!-- more -->\n```js\n<template>\n\t<a-upload\n    :action=\"urlhost\"\n    listType=\"picture-card\"\n    accept=\"image/*\"\n    @preview=\"handlePreview\"\n    @change=\"handleChange\"\n    :remove=\"removeImg\"\n    :beforeUpload=\"beforeUpload\"\n    :data=\"paramsData\">\n    <a-icon type=\"plus\" />\n      <div class=\"ant-upload-text\">点击上传</div>\n </a-upload>\n   <a-modal :visible=\"previewVisible\" :footer=\"null\" @cancel=\"handleCancel\">\n      <img alt=\"example\" style=\"width: 100%\" :src=\"previewImage\" />\n   </a-modal>\n</template>\n\n\n<script>\n  function getBase64(file) {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.readAsDataURL(file);\n      reader.onload = () => resolve(reader.result);\n      reader.onerror = error => reject(error);\n    });\n  }\n  import {getOssSignWeb} from '../../../api/upload.js'; //获取后端OSS信息接口\n  export default {\n  \treturn {\n    \tbusinessId:'',//业务id\n    \tpreviewVisible:false,\n      previewImage: '',\n    \tparamsData:{ //OSS信息对象 也是用来需要上传的参数\n          'OSSAccessKeyId':'',\n          'policy':'',\n          'Signature':'',\n          'key':'',\n          'success_action_status':200\n        },\n    \turlhost:'', //上传路径\n  \t},\n    methods: {\n    \tasync handlePreview(file) { //点击图片预览\n        if (!file.url && !file.preview) {\n          file.preview = await getBase64(file.originFileObj);\n        }\n        this.previewImage = file.url || file.preview;\n        this.previewVisible = true;\n      },\n      beforeUpload(file, fileList){ //在上传前获取OSS信息\n        return new Promise((resolve,reject)=>{\n          let params ={\n            \"businessId\":this.businessId,\n            \"suffix\":'.jpg'\n          }\n          getOssSignWeb(params).then(res=>{\n            \tthis.urlhost = res.retData.host\n              this.paramsData = { //组装参数\n                'OSSAccessKeyId':res.retData.accessid,\n                'policy':res.retData.policy,\n                'Signature':res.retData.signature,\n                'key':res.retData.dir+res.retData.fileName,\n                'success_action_status':200\n              }\n              resolve(file)\n            }).catch(e=>{\n              reject()\n            })\n        })\n      },\n      removeImg(){\n        return new Promise((resolve,reject)=>{\n          this.$confirm({\n            title: '提示',\n            content: '是否删除这张图片',\n            okText: '确定',\n            okType: 'danger',\n            cancelText: '取消',\n            onOk() {\n              resolve(true)\n            },\n            onCancel() {\n              resolve(false)\n            },\n          })\n        })\n      },\n      handleChange(info) {\n        if (info.file.status === 'done') {\n          this.$message.success('上传成功！');\n        }\n        if (info.file.status === 'error') {\n          this.$message.error('上传失败！');\n        }\n      },\n      handleCancel() {\n        this.previewVisible = false;\n      },\n    }\n  }\n</script>\n```\n\n\n","slug":"Ant-Design-VUE-Upload组件-OSS上传图片","published":1,"updated":"2022-11-02T04:24:55.800Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clagmayfd00036c841ilg8p40","content":"<p><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/1585566760218-eb503e89-dfbc-4fc9-a81c-97bb01aac7be.png\" alt=\"image.png\"><br>之前写图片上传都是通过自定义方法将file和OSS信息组装到formData里面然后设置请求头’Content-Type’: ‘multipart&#x2F;form-data’来上传的，现在直接用自带的action上传还是挺方便的。</p>\n<span id=\"more\"></span>\n<pre><code class=\"js\">&lt;template&gt;\n    &lt;a-upload\n    :action=&quot;urlhost&quot;\n    listType=&quot;picture-card&quot;\n    accept=&quot;image/*&quot;\n    @preview=&quot;handlePreview&quot;\n    @change=&quot;handleChange&quot;\n    :remove=&quot;removeImg&quot;\n    :beforeUpload=&quot;beforeUpload&quot;\n    :data=&quot;paramsData&quot;&gt;\n    &lt;a-icon type=&quot;plus&quot; /&gt;\n      &lt;div class=&quot;ant-upload-text&quot;&gt;点击上传&lt;/div&gt;\n &lt;/a-upload&gt;\n   &lt;a-modal :visible=&quot;previewVisible&quot; :footer=&quot;null&quot; @cancel=&quot;handleCancel&quot;&gt;\n      &lt;img alt=&quot;example&quot; style=&quot;width: 100%&quot; :src=&quot;previewImage&quot; /&gt;\n   &lt;/a-modal&gt;\n&lt;/template&gt;\n\n\n&lt;script&gt;\n  function getBase64(file) &#123;\n    return new Promise((resolve, reject) =&gt; &#123;\n      const reader = new FileReader();\n      reader.readAsDataURL(file);\n      reader.onload = () =&gt; resolve(reader.result);\n      reader.onerror = error =&gt; reject(error);\n    &#125;);\n  &#125;\n  import &#123;getOssSignWeb&#125; from &#39;../../../api/upload.js&#39;; //获取后端OSS信息接口\n  export default &#123;\n      return &#123;\n        businessId:&#39;&#39;,//业务id\n        previewVisible:false,\n      previewImage: &#39;&#39;,\n        paramsData:&#123; //OSS信息对象 也是用来需要上传的参数\n          &#39;OSSAccessKeyId&#39;:&#39;&#39;,\n          &#39;policy&#39;:&#39;&#39;,\n          &#39;Signature&#39;:&#39;&#39;,\n          &#39;key&#39;:&#39;&#39;,\n          &#39;success_action_status&#39;:200\n        &#125;,\n        urlhost:&#39;&#39;, //上传路径\n      &#125;,\n    methods: &#123;\n        async handlePreview(file) &#123; //点击图片预览\n        if (!file.url &amp;&amp; !file.preview) &#123;\n          file.preview = await getBase64(file.originFileObj);\n        &#125;\n        this.previewImage = file.url || file.preview;\n        this.previewVisible = true;\n      &#125;,\n      beforeUpload(file, fileList)&#123; //在上传前获取OSS信息\n        return new Promise((resolve,reject)=&gt;&#123;\n          let params =&#123;\n            &quot;businessId&quot;:this.businessId,\n            &quot;suffix&quot;:&#39;.jpg&#39;\n          &#125;\n          getOssSignWeb(params).then(res=&gt;&#123;\n                this.urlhost = res.retData.host\n              this.paramsData = &#123; //组装参数\n                &#39;OSSAccessKeyId&#39;:res.retData.accessid,\n                &#39;policy&#39;:res.retData.policy,\n                &#39;Signature&#39;:res.retData.signature,\n                &#39;key&#39;:res.retData.dir+res.retData.fileName,\n                &#39;success_action_status&#39;:200\n              &#125;\n              resolve(file)\n            &#125;).catch(e=&gt;&#123;\n              reject()\n            &#125;)\n        &#125;)\n      &#125;,\n      removeImg()&#123;\n        return new Promise((resolve,reject)=&gt;&#123;\n          this.$confirm(&#123;\n            title: &#39;提示&#39;,\n            content: &#39;是否删除这张图片&#39;,\n            okText: &#39;确定&#39;,\n            okType: &#39;danger&#39;,\n            cancelText: &#39;取消&#39;,\n            onOk() &#123;\n              resolve(true)\n            &#125;,\n            onCancel() &#123;\n              resolve(false)\n            &#125;,\n          &#125;)\n        &#125;)\n      &#125;,\n      handleChange(info) &#123;\n        if (info.file.status === &#39;done&#39;) &#123;\n          this.$message.success(&#39;上传成功！&#39;);\n        &#125;\n        if (info.file.status === &#39;error&#39;) &#123;\n          this.$message.error(&#39;上传失败！&#39;);\n        &#125;\n      &#125;,\n      handleCancel() &#123;\n        this.previewVisible = false;\n      &#125;,\n    &#125;\n  &#125;\n&lt;/script&gt;\n</code></pre>\n","site":{"data":{"friends":[{"category":"技术","data":[{"name":"stackblitz","url":"https://stackblitz.com"},{"name":"serverless-devs","url":"http://www.serverless-devs.com/"},{"name":"cypress自动化测试","url":"https://www.cypress.io/"},{"name":"微前端架构","url":"https://micro-frontends.ice.work/"},{"name":"gin+vue进行极速开发的全栈开发基础平台","url":"https://www.gin-vue-admin.com/"},{"name":"cloudbase","url":"https://docs.cloudbase.net/"},{"name":"supabase","url":"https://supabase.com/"}]},{"category":"工具","data":[{"name":"程序员工具集合大全","url":"https://www.bejson.com/"},{"name":"图片处理","url":"https://imagestool.com/zh_CN/index.html"},{"name":"免费在线抠图","url":"https://picwish.cn/"},{"name":"LOGO海报设计","url":"https://www.canva.cn/"},{"name":"图片无损缩放","url":"http://waifu2x.udp.jp/"},{"name":"图片格式转换器","url":"https://renzhezhilu.github.io/webp2jpg-online/"},{"name":"PDF工具集合","url":"https://tools.pdf24.org/zh/"},{"name":"UI直接生成代码","url":"https://code.fun/"},{"name":"markdown转公众号知乎","url":"https://editor.mdnice.com/"},{"name":"油猴脚本库","url":"https://greasyfork.org/zh-CN"},{"name":"代码片段转图片","url":"https://ray.so/"},{"name":"nginx配置器","url":"https://www.digitalocean.com/community/tools/nginx?global.app.lang=zhCN"},{"name":"前端插件库","url":"https://awesomejs.dev/"},{"name":"独特工具箱啥都有","url":"https://www.dute.org/"},{"name":"url编码解码","url":"http://www.jsons.cn/urlencode"},{"name":"菜鸟工具(正则测试等)","url":"https://c.runoob.com/front-end/854/"},{"name":"JSON编辑器格式化","url":"https://www.jsont.run/"},{"name":"七夜导航各类工具集","url":"https://nav.qinight.com/"},{"name":"生活百科wiki","url":"https://zh.wikihow.com/"},{"name":"表情包搜索网站","url":"https://www.dbbqb.com/"},{"name":"果汁工具大全(生活类)","url":"http://guozhivip.com/tool/"},{"name":"谷歌插件国内下载","url":"https://chrome.zzzmh.cn"},{"name":"PDF/图片/视频/音频/格式转换","url":"https://www.aconvert.com/cn/"},{"name":"JSON转各类代码","url":"https://app.quicktype.io/"},{"name":"markdown笔记","url":"https://yank-note.vercel.app"},{"name":"网页版API接口调试(界面清爽)","url":"https://httpie.io/app"},{"name":"在线开发神器手机网页开发同步","url":"https://replit.com/"},{"name":"在网页上运行安卓app","url":"https://www.wolfia.com/"},{"name":"在线工具开发手机web同步开发","url":"https://replit.com/"},{"name":"在线http接口调试","url":"https://httpie.io/app"}]},{"category":"素材","data":[{"name":"免费壁纸","url":"https://wallpaperhub.app"},{"name":"UI设计库","url":"https://screenlane.com/"},{"name":"摄图网","url":"https://699pic.com/"}]},{"category":"学习","data":[{"name":"面试基础知识","url":"https://micro-frontends.ice.work/"},{"name":"各类语言框架语法大全查询","url":"https://socode.pro/"},{"name":"前端人俱乐部","url":"http://f2er.club/"},{"name":"vue3+ts","url":"https://24kcs.github.io/vue3_study/"}]},{"category":"软件","data":[{"name":"正版软件购买","url":"https://apsgo.com/"}]},{"category":"前端","data":[{"name":"图标库","url":"https://iconoir.com/"},{"name":"前端大全","url":"https://docschina.org/"},{"name":"使用 Vue.js 开发小程序的前端框架","url":"http://mpvue.com/"},{"name":"uviewui","url":"https://www.uviewui.com/"},{"name":"varlet","url":"https://varlet.gitee.io/varlet-ui/#/zh-CN/index"},{"name":"vant","url":"https://vant-contrib.gitee.io/vant/#/zh-CN"},{"name":"tdesign","url":"https://tdesign.tencent.com/"},{"name":"前端开发UI素材","url":"https://www.creative-tim.com/"},{"name":"vue-treeselect","url":"https://www.vue-treeselect.cn/"},{"name":"semi","url":"https://semi.design/zh-CN/"},{"name":"tailwindcss","url":"https://www.tailwindcss.cn/"},{"name":"fontawesome图标","url":"https://fontawesome.com/"},{"name":"vantajs动画","url":"https://www.vantajs.com/"},{"name":"视差效果pushinjs","url":"https://nateplusplus.github.io/pushin/"}]}],"photography":[{"thumbnail":"https://thumbnail.jpg","photo":"https://photo.jpg","title":"This is title.","icon":"camera","place":"China"},{"thumbnail":"https://thumbnail.jpg","photo":"https://photo.jpg","title":"This is title.","icon":"camera","place":"China"}]}},"excerpt":"<p><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/1585566760218-eb503e89-dfbc-4fc9-a81c-97bb01aac7be.png\" alt=\"image.png\"><br>之前写图片上传都是通过自定义方法将file和OSS信息组装到formData里面然后设置请求头’Content-Type’: ‘multipart&#x2F;form-data’来上传的，现在直接用自带的action上传还是挺方便的。</p>","more":"<pre><code class=\"js\">&lt;template&gt;\n    &lt;a-upload\n    :action=&quot;urlhost&quot;\n    listType=&quot;picture-card&quot;\n    accept=&quot;image/*&quot;\n    @preview=&quot;handlePreview&quot;\n    @change=&quot;handleChange&quot;\n    :remove=&quot;removeImg&quot;\n    :beforeUpload=&quot;beforeUpload&quot;\n    :data=&quot;paramsData&quot;&gt;\n    &lt;a-icon type=&quot;plus&quot; /&gt;\n      &lt;div class=&quot;ant-upload-text&quot;&gt;点击上传&lt;/div&gt;\n &lt;/a-upload&gt;\n   &lt;a-modal :visible=&quot;previewVisible&quot; :footer=&quot;null&quot; @cancel=&quot;handleCancel&quot;&gt;\n      &lt;img alt=&quot;example&quot; style=&quot;width: 100%&quot; :src=&quot;previewImage&quot; /&gt;\n   &lt;/a-modal&gt;\n&lt;/template&gt;\n\n\n&lt;script&gt;\n  function getBase64(file) &#123;\n    return new Promise((resolve, reject) =&gt; &#123;\n      const reader = new FileReader();\n      reader.readAsDataURL(file);\n      reader.onload = () =&gt; resolve(reader.result);\n      reader.onerror = error =&gt; reject(error);\n    &#125;);\n  &#125;\n  import &#123;getOssSignWeb&#125; from &#39;../../../api/upload.js&#39;; //获取后端OSS信息接口\n  export default &#123;\n      return &#123;\n        businessId:&#39;&#39;,//业务id\n        previewVisible:false,\n      previewImage: &#39;&#39;,\n        paramsData:&#123; //OSS信息对象 也是用来需要上传的参数\n          &#39;OSSAccessKeyId&#39;:&#39;&#39;,\n          &#39;policy&#39;:&#39;&#39;,\n          &#39;Signature&#39;:&#39;&#39;,\n          &#39;key&#39;:&#39;&#39;,\n          &#39;success_action_status&#39;:200\n        &#125;,\n        urlhost:&#39;&#39;, //上传路径\n      &#125;,\n    methods: &#123;\n        async handlePreview(file) &#123; //点击图片预览\n        if (!file.url &amp;&amp; !file.preview) &#123;\n          file.preview = await getBase64(file.originFileObj);\n        &#125;\n        this.previewImage = file.url || file.preview;\n        this.previewVisible = true;\n      &#125;,\n      beforeUpload(file, fileList)&#123; //在上传前获取OSS信息\n        return new Promise((resolve,reject)=&gt;&#123;\n          let params =&#123;\n            &quot;businessId&quot;:this.businessId,\n            &quot;suffix&quot;:&#39;.jpg&#39;\n          &#125;\n          getOssSignWeb(params).then(res=&gt;&#123;\n                this.urlhost = res.retData.host\n              this.paramsData = &#123; //组装参数\n                &#39;OSSAccessKeyId&#39;:res.retData.accessid,\n                &#39;policy&#39;:res.retData.policy,\n                &#39;Signature&#39;:res.retData.signature,\n                &#39;key&#39;:res.retData.dir+res.retData.fileName,\n                &#39;success_action_status&#39;:200\n              &#125;\n              resolve(file)\n            &#125;).catch(e=&gt;&#123;\n              reject()\n            &#125;)\n        &#125;)\n      &#125;,\n      removeImg()&#123;\n        return new Promise((resolve,reject)=&gt;&#123;\n          this.$confirm(&#123;\n            title: &#39;提示&#39;,\n            content: &#39;是否删除这张图片&#39;,\n            okText: &#39;确定&#39;,\n            okType: &#39;danger&#39;,\n            cancelText: &#39;取消&#39;,\n            onOk() &#123;\n              resolve(true)\n            &#125;,\n            onCancel() &#123;\n              resolve(false)\n            &#125;,\n          &#125;)\n        &#125;)\n      &#125;,\n      handleChange(info) &#123;\n        if (info.file.status === &#39;done&#39;) &#123;\n          this.$message.success(&#39;上传成功！&#39;);\n        &#125;\n        if (info.file.status === &#39;error&#39;) &#123;\n          this.$message.error(&#39;上传失败！&#39;);\n        &#125;\n      &#125;,\n      handleCancel() &#123;\n        this.previewVisible = false;\n      &#125;,\n    &#125;\n  &#125;\n&lt;/script&gt;\n</code></pre>"},{"title":"JS多个异步接口的顺序调用","date":"2021-02-26T09:53:00.000Z","_content":"\n### 假如有这样的一个需求：有请求1、请求2、请求3，但是请求1的入参必须依赖请求2和请求3的返回才可以获取到数据，那么需要怎么做呢？\n<!-- more -->\n常规的做法可能是以下这样：\n\n\n```javascript\nfetch2().then(result2=>{\n\tfetch3().then(result3=>{\n\t\tfetch1(result2,result3).then(result1=>{\n\t\t\tconsole.log(result1);\n\t\t})\n\t})\n})\n```\n\n\n这样的写法虽然可以实现需求，但是写起来特别难受，层层嵌套。\nES6中新增了async await特性，完全可以满足这样的需求，下面换一种写法看看。\n\n\n```javascript\nasync function getResult(){\n\tlet result2 = await fetch2()\n\tlet result3 = await fetch3()\n\tlet result1 = await fetch1(result2,result3)\n\tconsole.log(result1);\n})\n```\n\n\n`async`函数返回一个 Promise 对象，可以使用`then`方法添加回调函数。当函数执行的时候，一旦遇到`await`就会先返回，等到异步操作完成，再接着执行函数体内后面的语句。\n\n\n```javascript\nasync function getResult(){\n\tlet result2 = await fetch2()\n\tlet result3 = await fetch3()\n\treturn await fetch1(result2,result3)\n})\ngetResult().then(res=>{\n\tconsole.log(res);\n})\n```\n\n\n在方法前加上async 说明在这个方法体内存在异步调用，而await后面通常也是一个Promise对象，会返回Promise对象处理的结果，如果不是 Promise 对象，就直接返回对应的值，await不能单独使用，必须在async方法内部使用。\n\n\n```javascript\nasync function f() {\n  return await 123;\n}\nf().then(v => console.log(v))\n// 123\n```\n\n\n但是这样的处理就会出现一个缺点，假如fetch2和fetch3请求非常慢，那么fetch1等待的时间就非常久，这样的处理结果非常影响页面的效率。\n我们可以使用Promise.all()来处理：\n\n\n```javascript\nasync function getResult(){\n\tlet [result2,result3] = await Promise.all([fetch2(),fetch3()])\n\treturn await fetch1(result2,result3)\n})\ngetResult().then(result1=>{\n\tconsole.log(result1);\n})\n```\n\n\n使用Promise.all()需要传递一个Promise实例的数组，即多个请求的数组，并且多个请求是同时进行请求的。这样就fetch1就无需等待过多的请求时间了。\nPromise.all返回的结果是一个数组，并且 Promise.all获得的成功结果的数组里面的数据顺序和Promise.all接收到的数组顺序是一致的。\n那么如何处理异常呢？\n\n\n```javascript\nasync function getResult(){\n\tlet [result2,result3] = await Promise.all([fetch2(),fetch3()]).catch(e=>{\n\t\tthrow new Error(e);\n\t})\n\treturn await fetch1(result2,result3)\n})\ngetResult().then(result1=>{\n\tconsole.log(result1);\n}).catch(e=>{\n\tthrow new Error(e);\n})\n```\n\n\npromise.all 中任何一个promise 出现错误的时候都会执行reject，同时将错误异常返回给async的Promise 对象并且抛出reject，抛出的错误对象reject又会被`catch`方法回调函数接收到。\n只有`async`函数内部的异步操作执行完，才会执行`then`方法指定的回调函数。\n`而await`后面的 Promise 对象如果变为`reject`状态，则`reject`的参数会被`catch`方法的回调函数接收到。\n所以如果promise.all 中任何一个promise 出现错误我们可以用catch来接收promise.all的错误，也可以不用catch来接收，因为Promise.all抛出的异常会被async的reject抛出，然后通过async的catch方法来处理。\n\n\n\n","source":"_posts/JS多个异步接口的顺序调用.md","raw":"---\ntitle: JS多个异步接口的顺序调用\ndate: 2021-02-26 17:53\ntags:\n---\n\n### 假如有这样的一个需求：有请求1、请求2、请求3，但是请求1的入参必须依赖请求2和请求3的返回才可以获取到数据，那么需要怎么做呢？\n<!-- more -->\n常规的做法可能是以下这样：\n\n\n```javascript\nfetch2().then(result2=>{\n\tfetch3().then(result3=>{\n\t\tfetch1(result2,result3).then(result1=>{\n\t\t\tconsole.log(result1);\n\t\t})\n\t})\n})\n```\n\n\n这样的写法虽然可以实现需求，但是写起来特别难受，层层嵌套。\nES6中新增了async await特性，完全可以满足这样的需求，下面换一种写法看看。\n\n\n```javascript\nasync function getResult(){\n\tlet result2 = await fetch2()\n\tlet result3 = await fetch3()\n\tlet result1 = await fetch1(result2,result3)\n\tconsole.log(result1);\n})\n```\n\n\n`async`函数返回一个 Promise 对象，可以使用`then`方法添加回调函数。当函数执行的时候，一旦遇到`await`就会先返回，等到异步操作完成，再接着执行函数体内后面的语句。\n\n\n```javascript\nasync function getResult(){\n\tlet result2 = await fetch2()\n\tlet result3 = await fetch3()\n\treturn await fetch1(result2,result3)\n})\ngetResult().then(res=>{\n\tconsole.log(res);\n})\n```\n\n\n在方法前加上async 说明在这个方法体内存在异步调用，而await后面通常也是一个Promise对象，会返回Promise对象处理的结果，如果不是 Promise 对象，就直接返回对应的值，await不能单独使用，必须在async方法内部使用。\n\n\n```javascript\nasync function f() {\n  return await 123;\n}\nf().then(v => console.log(v))\n// 123\n```\n\n\n但是这样的处理就会出现一个缺点，假如fetch2和fetch3请求非常慢，那么fetch1等待的时间就非常久，这样的处理结果非常影响页面的效率。\n我们可以使用Promise.all()来处理：\n\n\n```javascript\nasync function getResult(){\n\tlet [result2,result3] = await Promise.all([fetch2(),fetch3()])\n\treturn await fetch1(result2,result3)\n})\ngetResult().then(result1=>{\n\tconsole.log(result1);\n})\n```\n\n\n使用Promise.all()需要传递一个Promise实例的数组，即多个请求的数组，并且多个请求是同时进行请求的。这样就fetch1就无需等待过多的请求时间了。\nPromise.all返回的结果是一个数组，并且 Promise.all获得的成功结果的数组里面的数据顺序和Promise.all接收到的数组顺序是一致的。\n那么如何处理异常呢？\n\n\n```javascript\nasync function getResult(){\n\tlet [result2,result3] = await Promise.all([fetch2(),fetch3()]).catch(e=>{\n\t\tthrow new Error(e);\n\t})\n\treturn await fetch1(result2,result3)\n})\ngetResult().then(result1=>{\n\tconsole.log(result1);\n}).catch(e=>{\n\tthrow new Error(e);\n})\n```\n\n\npromise.all 中任何一个promise 出现错误的时候都会执行reject，同时将错误异常返回给async的Promise 对象并且抛出reject，抛出的错误对象reject又会被`catch`方法回调函数接收到。\n只有`async`函数内部的异步操作执行完，才会执行`then`方法指定的回调函数。\n`而await`后面的 Promise 对象如果变为`reject`状态，则`reject`的参数会被`catch`方法的回调函数接收到。\n所以如果promise.all 中任何一个promise 出现错误我们可以用catch来接收promise.all的错误，也可以不用catch来接收，因为Promise.all抛出的异常会被async的reject抛出，然后通过async的catch方法来处理。\n\n\n\n","slug":"JS多个异步接口的顺序调用","published":1,"updated":"2022-11-02T04:24:55.800Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clagmayff00056c847ob2ab23","content":"<h3 id=\"假如有这样的一个需求：有请求1、请求2、请求3，但是请求1的入参必须依赖请求2和请求3的返回才可以获取到数据，那么需要怎么做呢？\"><a href=\"#假如有这样的一个需求：有请求1、请求2、请求3，但是请求1的入参必须依赖请求2和请求3的返回才可以获取到数据，那么需要怎么做呢？\" class=\"headerlink\" title=\"假如有这样的一个需求：有请求1、请求2、请求3，但是请求1的入参必须依赖请求2和请求3的返回才可以获取到数据，那么需要怎么做呢？\"></a>假如有这样的一个需求：有请求1、请求2、请求3，但是请求1的入参必须依赖请求2和请求3的返回才可以获取到数据，那么需要怎么做呢？</h3><span id=\"more\"></span>\n<p>常规的做法可能是以下这样：</p>\n<pre><code class=\"javascript\">fetch2().then(result2=&gt;&#123;\n    fetch3().then(result3=&gt;&#123;\n        fetch1(result2,result3).then(result1=&gt;&#123;\n            console.log(result1);\n        &#125;)\n    &#125;)\n&#125;)\n</code></pre>\n<p>这样的写法虽然可以实现需求，但是写起来特别难受，层层嵌套。<br>ES6中新增了async await特性，完全可以满足这样的需求，下面换一种写法看看。</p>\n<pre><code class=\"javascript\">async function getResult()&#123;\n    let result2 = await fetch2()\n    let result3 = await fetch3()\n    let result1 = await fetch1(result2,result3)\n    console.log(result1);\n&#125;)\n</code></pre>\n<p><code>async</code>函数返回一个 Promise 对象，可以使用<code>then</code>方法添加回调函数。当函数执行的时候，一旦遇到<code>await</code>就会先返回，等到异步操作完成，再接着执行函数体内后面的语句。</p>\n<pre><code class=\"javascript\">async function getResult()&#123;\n    let result2 = await fetch2()\n    let result3 = await fetch3()\n    return await fetch1(result2,result3)\n&#125;)\ngetResult().then(res=&gt;&#123;\n    console.log(res);\n&#125;)\n</code></pre>\n<p>在方法前加上async 说明在这个方法体内存在异步调用，而await后面通常也是一个Promise对象，会返回Promise对象处理的结果，如果不是 Promise 对象，就直接返回对应的值，await不能单独使用，必须在async方法内部使用。</p>\n<pre><code class=\"javascript\">async function f() &#123;\n  return await 123;\n&#125;\nf().then(v =&gt; console.log(v))\n// 123\n</code></pre>\n<p>但是这样的处理就会出现一个缺点，假如fetch2和fetch3请求非常慢，那么fetch1等待的时间就非常久，这样的处理结果非常影响页面的效率。<br>我们可以使用Promise.all()来处理：</p>\n<pre><code class=\"javascript\">async function getResult()&#123;\n    let [result2,result3] = await Promise.all([fetch2(),fetch3()])\n    return await fetch1(result2,result3)\n&#125;)\ngetResult().then(result1=&gt;&#123;\n    console.log(result1);\n&#125;)\n</code></pre>\n<p>使用Promise.all()需要传递一个Promise实例的数组，即多个请求的数组，并且多个请求是同时进行请求的。这样就fetch1就无需等待过多的请求时间了。<br>Promise.all返回的结果是一个数组，并且 Promise.all获得的成功结果的数组里面的数据顺序和Promise.all接收到的数组顺序是一致的。<br>那么如何处理异常呢？</p>\n<pre><code class=\"javascript\">async function getResult()&#123;\n    let [result2,result3] = await Promise.all([fetch2(),fetch3()]).catch(e=&gt;&#123;\n        throw new Error(e);\n    &#125;)\n    return await fetch1(result2,result3)\n&#125;)\ngetResult().then(result1=&gt;&#123;\n    console.log(result1);\n&#125;).catch(e=&gt;&#123;\n    throw new Error(e);\n&#125;)\n</code></pre>\n<p>promise.all 中任何一个promise 出现错误的时候都会执行reject，同时将错误异常返回给async的Promise 对象并且抛出reject，抛出的错误对象reject又会被<code>catch</code>方法回调函数接收到。<br>只有<code>async</code>函数内部的异步操作执行完，才会执行<code>then</code>方法指定的回调函数。<br><code>而await</code>后面的 Promise 对象如果变为<code>reject</code>状态，则<code>reject</code>的参数会被<code>catch</code>方法的回调函数接收到。<br>所以如果promise.all 中任何一个promise 出现错误我们可以用catch来接收promise.all的错误，也可以不用catch来接收，因为Promise.all抛出的异常会被async的reject抛出，然后通过async的catch方法来处理。</p>\n","site":{"data":{"friends":[{"category":"技术","data":[{"name":"stackblitz","url":"https://stackblitz.com"},{"name":"serverless-devs","url":"http://www.serverless-devs.com/"},{"name":"cypress自动化测试","url":"https://www.cypress.io/"},{"name":"微前端架构","url":"https://micro-frontends.ice.work/"},{"name":"gin+vue进行极速开发的全栈开发基础平台","url":"https://www.gin-vue-admin.com/"},{"name":"cloudbase","url":"https://docs.cloudbase.net/"},{"name":"supabase","url":"https://supabase.com/"}]},{"category":"工具","data":[{"name":"程序员工具集合大全","url":"https://www.bejson.com/"},{"name":"图片处理","url":"https://imagestool.com/zh_CN/index.html"},{"name":"免费在线抠图","url":"https://picwish.cn/"},{"name":"LOGO海报设计","url":"https://www.canva.cn/"},{"name":"图片无损缩放","url":"http://waifu2x.udp.jp/"},{"name":"图片格式转换器","url":"https://renzhezhilu.github.io/webp2jpg-online/"},{"name":"PDF工具集合","url":"https://tools.pdf24.org/zh/"},{"name":"UI直接生成代码","url":"https://code.fun/"},{"name":"markdown转公众号知乎","url":"https://editor.mdnice.com/"},{"name":"油猴脚本库","url":"https://greasyfork.org/zh-CN"},{"name":"代码片段转图片","url":"https://ray.so/"},{"name":"nginx配置器","url":"https://www.digitalocean.com/community/tools/nginx?global.app.lang=zhCN"},{"name":"前端插件库","url":"https://awesomejs.dev/"},{"name":"独特工具箱啥都有","url":"https://www.dute.org/"},{"name":"url编码解码","url":"http://www.jsons.cn/urlencode"},{"name":"菜鸟工具(正则测试等)","url":"https://c.runoob.com/front-end/854/"},{"name":"JSON编辑器格式化","url":"https://www.jsont.run/"},{"name":"七夜导航各类工具集","url":"https://nav.qinight.com/"},{"name":"生活百科wiki","url":"https://zh.wikihow.com/"},{"name":"表情包搜索网站","url":"https://www.dbbqb.com/"},{"name":"果汁工具大全(生活类)","url":"http://guozhivip.com/tool/"},{"name":"谷歌插件国内下载","url":"https://chrome.zzzmh.cn"},{"name":"PDF/图片/视频/音频/格式转换","url":"https://www.aconvert.com/cn/"},{"name":"JSON转各类代码","url":"https://app.quicktype.io/"},{"name":"markdown笔记","url":"https://yank-note.vercel.app"},{"name":"网页版API接口调试(界面清爽)","url":"https://httpie.io/app"},{"name":"在线开发神器手机网页开发同步","url":"https://replit.com/"},{"name":"在网页上运行安卓app","url":"https://www.wolfia.com/"},{"name":"在线工具开发手机web同步开发","url":"https://replit.com/"},{"name":"在线http接口调试","url":"https://httpie.io/app"}]},{"category":"素材","data":[{"name":"免费壁纸","url":"https://wallpaperhub.app"},{"name":"UI设计库","url":"https://screenlane.com/"},{"name":"摄图网","url":"https://699pic.com/"}]},{"category":"学习","data":[{"name":"面试基础知识","url":"https://micro-frontends.ice.work/"},{"name":"各类语言框架语法大全查询","url":"https://socode.pro/"},{"name":"前端人俱乐部","url":"http://f2er.club/"},{"name":"vue3+ts","url":"https://24kcs.github.io/vue3_study/"}]},{"category":"软件","data":[{"name":"正版软件购买","url":"https://apsgo.com/"}]},{"category":"前端","data":[{"name":"图标库","url":"https://iconoir.com/"},{"name":"前端大全","url":"https://docschina.org/"},{"name":"使用 Vue.js 开发小程序的前端框架","url":"http://mpvue.com/"},{"name":"uviewui","url":"https://www.uviewui.com/"},{"name":"varlet","url":"https://varlet.gitee.io/varlet-ui/#/zh-CN/index"},{"name":"vant","url":"https://vant-contrib.gitee.io/vant/#/zh-CN"},{"name":"tdesign","url":"https://tdesign.tencent.com/"},{"name":"前端开发UI素材","url":"https://www.creative-tim.com/"},{"name":"vue-treeselect","url":"https://www.vue-treeselect.cn/"},{"name":"semi","url":"https://semi.design/zh-CN/"},{"name":"tailwindcss","url":"https://www.tailwindcss.cn/"},{"name":"fontawesome图标","url":"https://fontawesome.com/"},{"name":"vantajs动画","url":"https://www.vantajs.com/"},{"name":"视差效果pushinjs","url":"https://nateplusplus.github.io/pushin/"}]}],"photography":[{"thumbnail":"https://thumbnail.jpg","photo":"https://photo.jpg","title":"This is title.","icon":"camera","place":"China"},{"thumbnail":"https://thumbnail.jpg","photo":"https://photo.jpg","title":"This is title.","icon":"camera","place":"China"}]}},"excerpt":"<h3 id=\"假如有这样的一个需求：有请求1、请求2、请求3，但是请求1的入参必须依赖请求2和请求3的返回才可以获取到数据，那么需要怎么做呢？\"><a href=\"#假如有这样的一个需求：有请求1、请求2、请求3，但是请求1的入参必须依赖请求2和请求3的返回才可以获取到数据，那么需要怎么做呢？\" class=\"headerlink\" title=\"假如有这样的一个需求：有请求1、请求2、请求3，但是请求1的入参必须依赖请求2和请求3的返回才可以获取到数据，那么需要怎么做呢？\"></a>假如有这样的一个需求：有请求1、请求2、请求3，但是请求1的入参必须依赖请求2和请求3的返回才可以获取到数据，那么需要怎么做呢？</h3>","more":"<p>常规的做法可能是以下这样：</p>\n<pre><code class=\"javascript\">fetch2().then(result2=&gt;&#123;\n    fetch3().then(result3=&gt;&#123;\n        fetch1(result2,result3).then(result1=&gt;&#123;\n            console.log(result1);\n        &#125;)\n    &#125;)\n&#125;)\n</code></pre>\n<p>这样的写法虽然可以实现需求，但是写起来特别难受，层层嵌套。<br>ES6中新增了async await特性，完全可以满足这样的需求，下面换一种写法看看。</p>\n<pre><code class=\"javascript\">async function getResult()&#123;\n    let result2 = await fetch2()\n    let result3 = await fetch3()\n    let result1 = await fetch1(result2,result3)\n    console.log(result1);\n&#125;)\n</code></pre>\n<p><code>async</code>函数返回一个 Promise 对象，可以使用<code>then</code>方法添加回调函数。当函数执行的时候，一旦遇到<code>await</code>就会先返回，等到异步操作完成，再接着执行函数体内后面的语句。</p>\n<pre><code class=\"javascript\">async function getResult()&#123;\n    let result2 = await fetch2()\n    let result3 = await fetch3()\n    return await fetch1(result2,result3)\n&#125;)\ngetResult().then(res=&gt;&#123;\n    console.log(res);\n&#125;)\n</code></pre>\n<p>在方法前加上async 说明在这个方法体内存在异步调用，而await后面通常也是一个Promise对象，会返回Promise对象处理的结果，如果不是 Promise 对象，就直接返回对应的值，await不能单独使用，必须在async方法内部使用。</p>\n<pre><code class=\"javascript\">async function f() &#123;\n  return await 123;\n&#125;\nf().then(v =&gt; console.log(v))\n// 123\n</code></pre>\n<p>但是这样的处理就会出现一个缺点，假如fetch2和fetch3请求非常慢，那么fetch1等待的时间就非常久，这样的处理结果非常影响页面的效率。<br>我们可以使用Promise.all()来处理：</p>\n<pre><code class=\"javascript\">async function getResult()&#123;\n    let [result2,result3] = await Promise.all([fetch2(),fetch3()])\n    return await fetch1(result2,result3)\n&#125;)\ngetResult().then(result1=&gt;&#123;\n    console.log(result1);\n&#125;)\n</code></pre>\n<p>使用Promise.all()需要传递一个Promise实例的数组，即多个请求的数组，并且多个请求是同时进行请求的。这样就fetch1就无需等待过多的请求时间了。<br>Promise.all返回的结果是一个数组，并且 Promise.all获得的成功结果的数组里面的数据顺序和Promise.all接收到的数组顺序是一致的。<br>那么如何处理异常呢？</p>\n<pre><code class=\"javascript\">async function getResult()&#123;\n    let [result2,result3] = await Promise.all([fetch2(),fetch3()]).catch(e=&gt;&#123;\n        throw new Error(e);\n    &#125;)\n    return await fetch1(result2,result3)\n&#125;)\ngetResult().then(result1=&gt;&#123;\n    console.log(result1);\n&#125;).catch(e=&gt;&#123;\n    throw new Error(e);\n&#125;)\n</code></pre>\n<p>promise.all 中任何一个promise 出现错误的时候都会执行reject，同时将错误异常返回给async的Promise 对象并且抛出reject，抛出的错误对象reject又会被<code>catch</code>方法回调函数接收到。<br>只有<code>async</code>函数内部的异步操作执行完，才会执行<code>then</code>方法指定的回调函数。<br><code>而await</code>后面的 Promise 对象如果变为<code>reject</code>状态，则<code>reject</code>的参数会被<code>catch</code>方法的回调函数接收到。<br>所以如果promise.all 中任何一个promise 出现错误我们可以用catch来接收promise.all的错误，也可以不用catch来接收，因为Promise.all抛出的异常会被async的reject抛出，然后通过async的catch方法来处理。</p>"},{"title":"写一个最简单的mysql查询接口","date":"2021-02-25T09:17:00.000Z","_content":"\n# egg 写一个最简单的mysql查询接口\n\n按照[egg官网](https://eggjs.org/zh-cn/intro/quickstart.html) 写一个最简单的mysql查询接口(提前准备好mysql数据库)\n<!-- more -->\n1、创建项目 安装依赖\n```bash\nmkdir my-study-backend\ncd my-study-backend\nnpm init\nnpm i egg --save\nnpm i egg-bin --save-dev\nnpm i --save egg-mysql\n```\n修改启动项\n```json\n\"scripts\": {\n    \"dev\": \"egg-bin dev\"\n  },\n```\n2、在app目录下新建app/controller/users.js\n```javascript\nconst Controller = require('egg').Controller;\n\nclass UsersController extends Controller {\n  async getUsers() {\n    const { ctx } = this;\n    ctx.body = 'hello world'\n  }\n}\n\nmodule.exports = UsersController;\n```\n3、在app目录下新建app/router.js\n```javascript\nmodule.exports = app => {\n  const { router, controller } = app;\n  router.get('/api/getUsers', controller.users.getUsers); // get('接口路径',controller内对应的方法)\n};\n```\n4、在根目录下新建config/config.default.js\n```javascript\n\nmodule.exports = {\n  keys: '123456790', // 随便写个Cookie 安全字符串\n};\n```\n终端运行项目\n```bash\nnpm run dev\n```\n此时打开浏览器访问接口就会显示hello world\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/1595334065360-6ee5820a-036b-4c33-b1f2-e51b30eb9acf.png)\n5、在config目录下新建config/plugin.js 添加mysql配置\n```javascript\nmodule.exports = {\n  mysql: {\n    enable: true,\n    package: 'egg-mysql',\n  },\n};\n```\n6、修改config/config.default.js 添加数据库账号密码\n```javascript\nmodule.exports = {\n  keys: '123456790',\n  mysql: {\n    // 单数据库信息配置\n    client: {\n      // host\n      host: '39.120.202.168',\n      // 端口号\n      port: '3306',\n      // 用户名\n      user: 'root',\n      // 密码\n      password: '123456',\n      // 数据库名\n      database: 'mystudy',\n    },\n    // 是否加载到 app 上，默认开启\n    app: true,\n    // 是否加载到 agent 上，默认关闭\n    agent: false,\n  }\n};\n```\n并在数据库mystudy内添加一些数据\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/1595334905486-4cdcf583-8243-4eb3-bc2c-430631ea291a.png)\n7、在app目录下新建app/service/users.js\n```javascript\nconst Service = require('egg').Service;\n\nclass UsersService extends Service {\n  async getData() {\n    const data = await this.app.mysql.query('SELECT * FROM user');\n    return { data };\n  }\n}\n\nmodule.exports = UsersService;\n```\n8、修改app/controller/users.js\n```javascript\nconst Controller = require('egg').Controller;\n\nclass UsersController extends Controller {\n  async getUsers() {\n    const { ctx } = this;\n    const res = await ctx.service.users.getData();\n    ctx.body = {\n      code: '200',\n      data: res.data,\n      message: 'success'\n    };\n  }\n}\n\nmodule.exports = UsersController;\n```\n此时重新运行项目\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/1595335194788-4c1e4d12-41b2-463b-bb36-03ecb8fa8230.png)\n成功获取到数据啦！\n\n\n\n\n","source":"_posts/egg写一个最简单的mysql查询接口.md","raw":"---\ntitle: 写一个最简单的mysql查询接口\ndate: 2021-02-25 17:17\ntags:\n---\n\n# egg 写一个最简单的mysql查询接口\n\n按照[egg官网](https://eggjs.org/zh-cn/intro/quickstart.html) 写一个最简单的mysql查询接口(提前准备好mysql数据库)\n<!-- more -->\n1、创建项目 安装依赖\n```bash\nmkdir my-study-backend\ncd my-study-backend\nnpm init\nnpm i egg --save\nnpm i egg-bin --save-dev\nnpm i --save egg-mysql\n```\n修改启动项\n```json\n\"scripts\": {\n    \"dev\": \"egg-bin dev\"\n  },\n```\n2、在app目录下新建app/controller/users.js\n```javascript\nconst Controller = require('egg').Controller;\n\nclass UsersController extends Controller {\n  async getUsers() {\n    const { ctx } = this;\n    ctx.body = 'hello world'\n  }\n}\n\nmodule.exports = UsersController;\n```\n3、在app目录下新建app/router.js\n```javascript\nmodule.exports = app => {\n  const { router, controller } = app;\n  router.get('/api/getUsers', controller.users.getUsers); // get('接口路径',controller内对应的方法)\n};\n```\n4、在根目录下新建config/config.default.js\n```javascript\n\nmodule.exports = {\n  keys: '123456790', // 随便写个Cookie 安全字符串\n};\n```\n终端运行项目\n```bash\nnpm run dev\n```\n此时打开浏览器访问接口就会显示hello world\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/1595334065360-6ee5820a-036b-4c33-b1f2-e51b30eb9acf.png)\n5、在config目录下新建config/plugin.js 添加mysql配置\n```javascript\nmodule.exports = {\n  mysql: {\n    enable: true,\n    package: 'egg-mysql',\n  },\n};\n```\n6、修改config/config.default.js 添加数据库账号密码\n```javascript\nmodule.exports = {\n  keys: '123456790',\n  mysql: {\n    // 单数据库信息配置\n    client: {\n      // host\n      host: '39.120.202.168',\n      // 端口号\n      port: '3306',\n      // 用户名\n      user: 'root',\n      // 密码\n      password: '123456',\n      // 数据库名\n      database: 'mystudy',\n    },\n    // 是否加载到 app 上，默认开启\n    app: true,\n    // 是否加载到 agent 上，默认关闭\n    agent: false,\n  }\n};\n```\n并在数据库mystudy内添加一些数据\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/1595334905486-4cdcf583-8243-4eb3-bc2c-430631ea291a.png)\n7、在app目录下新建app/service/users.js\n```javascript\nconst Service = require('egg').Service;\n\nclass UsersService extends Service {\n  async getData() {\n    const data = await this.app.mysql.query('SELECT * FROM user');\n    return { data };\n  }\n}\n\nmodule.exports = UsersService;\n```\n8、修改app/controller/users.js\n```javascript\nconst Controller = require('egg').Controller;\n\nclass UsersController extends Controller {\n  async getUsers() {\n    const { ctx } = this;\n    const res = await ctx.service.users.getData();\n    ctx.body = {\n      code: '200',\n      data: res.data,\n      message: 'success'\n    };\n  }\n}\n\nmodule.exports = UsersController;\n```\n此时重新运行项目\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/1595335194788-4c1e4d12-41b2-463b-bb36-03ecb8fa8230.png)\n成功获取到数据啦！\n\n\n\n\n","slug":"egg写一个最简单的mysql查询接口","published":1,"updated":"2022-11-02T04:24:55.800Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clagmayfg00066c8479z218p2","content":"<h1 id=\"egg-写一个最简单的mysql查询接口\"><a href=\"#egg-写一个最简单的mysql查询接口\" class=\"headerlink\" title=\"egg 写一个最简单的mysql查询接口\"></a>egg 写一个最简单的mysql查询接口</h1><p>按照<a href=\"https://eggjs.org/zh-cn/intro/quickstart.html\">egg官网</a> 写一个最简单的mysql查询接口(提前准备好mysql数据库)</p>\n<span id=\"more\"></span>\n<p>1、创建项目 安装依赖</p>\n<pre><code class=\"bash\">mkdir my-study-backend\ncd my-study-backend\nnpm init\nnpm i egg --save\nnpm i egg-bin --save-dev\nnpm i --save egg-mysql\n</code></pre>\n<p>修改启动项</p>\n<pre><code class=\"json\">&quot;scripts&quot;: &#123;\n    &quot;dev&quot;: &quot;egg-bin dev&quot;\n  &#125;,\n</code></pre>\n<p>2、在app目录下新建app&#x2F;controller&#x2F;users.js</p>\n<pre><code class=\"javascript\">const Controller = require(&#39;egg&#39;).Controller;\n\nclass UsersController extends Controller &#123;\n  async getUsers() &#123;\n    const &#123; ctx &#125; = this;\n    ctx.body = &#39;hello world&#39;\n  &#125;\n&#125;\n\nmodule.exports = UsersController;\n</code></pre>\n<p>3、在app目录下新建app&#x2F;router.js</p>\n<pre><code class=\"javascript\">module.exports = app =&gt; &#123;\n  const &#123; router, controller &#125; = app;\n  router.get(&#39;/api/getUsers&#39;, controller.users.getUsers); // get(&#39;接口路径&#39;,controller内对应的方法)\n&#125;;\n</code></pre>\n<p>4、在根目录下新建config&#x2F;config.default.js</p>\n<pre><code class=\"javascript\">\nmodule.exports = &#123;\n  keys: &#39;123456790&#39;, // 随便写个Cookie 安全字符串\n&#125;;\n</code></pre>\n<p>终端运行项目</p>\n<pre><code class=\"bash\">npm run dev\n</code></pre>\n<p>此时打开浏览器访问接口就会显示hello world<br><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/1595334065360-6ee5820a-036b-4c33-b1f2-e51b30eb9acf.png\" alt=\"image.png\"><br>5、在config目录下新建config&#x2F;plugin.js 添加mysql配置</p>\n<pre><code class=\"javascript\">module.exports = &#123;\n  mysql: &#123;\n    enable: true,\n    package: &#39;egg-mysql&#39;,\n  &#125;,\n&#125;;\n</code></pre>\n<p>6、修改config&#x2F;config.default.js 添加数据库账号密码</p>\n<pre><code class=\"javascript\">module.exports = &#123;\n  keys: &#39;123456790&#39;,\n  mysql: &#123;\n    // 单数据库信息配置\n    client: &#123;\n      // host\n      host: &#39;39.120.202.168&#39;,\n      // 端口号\n      port: &#39;3306&#39;,\n      // 用户名\n      user: &#39;root&#39;,\n      // 密码\n      password: &#39;123456&#39;,\n      // 数据库名\n      database: &#39;mystudy&#39;,\n    &#125;,\n    // 是否加载到 app 上，默认开启\n    app: true,\n    // 是否加载到 agent 上，默认关闭\n    agent: false,\n  &#125;\n&#125;;\n</code></pre>\n<p>并在数据库mystudy内添加一些数据<br><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/1595334905486-4cdcf583-8243-4eb3-bc2c-430631ea291a.png\" alt=\"image.png\"><br>7、在app目录下新建app&#x2F;service&#x2F;users.js</p>\n<pre><code class=\"javascript\">const Service = require(&#39;egg&#39;).Service;\n\nclass UsersService extends Service &#123;\n  async getData() &#123;\n    const data = await this.app.mysql.query(&#39;SELECT * FROM user&#39;);\n    return &#123; data &#125;;\n  &#125;\n&#125;\n\nmodule.exports = UsersService;\n</code></pre>\n<p>8、修改app&#x2F;controller&#x2F;users.js</p>\n<pre><code class=\"javascript\">const Controller = require(&#39;egg&#39;).Controller;\n\nclass UsersController extends Controller &#123;\n  async getUsers() &#123;\n    const &#123; ctx &#125; = this;\n    const res = await ctx.service.users.getData();\n    ctx.body = &#123;\n      code: &#39;200&#39;,\n      data: res.data,\n      message: &#39;success&#39;\n    &#125;;\n  &#125;\n&#125;\n\nmodule.exports = UsersController;\n</code></pre>\n<p>此时重新运行项目<br><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/1595335194788-4c1e4d12-41b2-463b-bb36-03ecb8fa8230.png\" alt=\"image.png\"><br>成功获取到数据啦！</p>\n","site":{"data":{"friends":[{"category":"技术","data":[{"name":"stackblitz","url":"https://stackblitz.com"},{"name":"serverless-devs","url":"http://www.serverless-devs.com/"},{"name":"cypress自动化测试","url":"https://www.cypress.io/"},{"name":"微前端架构","url":"https://micro-frontends.ice.work/"},{"name":"gin+vue进行极速开发的全栈开发基础平台","url":"https://www.gin-vue-admin.com/"},{"name":"cloudbase","url":"https://docs.cloudbase.net/"},{"name":"supabase","url":"https://supabase.com/"}]},{"category":"工具","data":[{"name":"程序员工具集合大全","url":"https://www.bejson.com/"},{"name":"图片处理","url":"https://imagestool.com/zh_CN/index.html"},{"name":"免费在线抠图","url":"https://picwish.cn/"},{"name":"LOGO海报设计","url":"https://www.canva.cn/"},{"name":"图片无损缩放","url":"http://waifu2x.udp.jp/"},{"name":"图片格式转换器","url":"https://renzhezhilu.github.io/webp2jpg-online/"},{"name":"PDF工具集合","url":"https://tools.pdf24.org/zh/"},{"name":"UI直接生成代码","url":"https://code.fun/"},{"name":"markdown转公众号知乎","url":"https://editor.mdnice.com/"},{"name":"油猴脚本库","url":"https://greasyfork.org/zh-CN"},{"name":"代码片段转图片","url":"https://ray.so/"},{"name":"nginx配置器","url":"https://www.digitalocean.com/community/tools/nginx?global.app.lang=zhCN"},{"name":"前端插件库","url":"https://awesomejs.dev/"},{"name":"独特工具箱啥都有","url":"https://www.dute.org/"},{"name":"url编码解码","url":"http://www.jsons.cn/urlencode"},{"name":"菜鸟工具(正则测试等)","url":"https://c.runoob.com/front-end/854/"},{"name":"JSON编辑器格式化","url":"https://www.jsont.run/"},{"name":"七夜导航各类工具集","url":"https://nav.qinight.com/"},{"name":"生活百科wiki","url":"https://zh.wikihow.com/"},{"name":"表情包搜索网站","url":"https://www.dbbqb.com/"},{"name":"果汁工具大全(生活类)","url":"http://guozhivip.com/tool/"},{"name":"谷歌插件国内下载","url":"https://chrome.zzzmh.cn"},{"name":"PDF/图片/视频/音频/格式转换","url":"https://www.aconvert.com/cn/"},{"name":"JSON转各类代码","url":"https://app.quicktype.io/"},{"name":"markdown笔记","url":"https://yank-note.vercel.app"},{"name":"网页版API接口调试(界面清爽)","url":"https://httpie.io/app"},{"name":"在线开发神器手机网页开发同步","url":"https://replit.com/"},{"name":"在网页上运行安卓app","url":"https://www.wolfia.com/"},{"name":"在线工具开发手机web同步开发","url":"https://replit.com/"},{"name":"在线http接口调试","url":"https://httpie.io/app"}]},{"category":"素材","data":[{"name":"免费壁纸","url":"https://wallpaperhub.app"},{"name":"UI设计库","url":"https://screenlane.com/"},{"name":"摄图网","url":"https://699pic.com/"}]},{"category":"学习","data":[{"name":"面试基础知识","url":"https://micro-frontends.ice.work/"},{"name":"各类语言框架语法大全查询","url":"https://socode.pro/"},{"name":"前端人俱乐部","url":"http://f2er.club/"},{"name":"vue3+ts","url":"https://24kcs.github.io/vue3_study/"}]},{"category":"软件","data":[{"name":"正版软件购买","url":"https://apsgo.com/"}]},{"category":"前端","data":[{"name":"图标库","url":"https://iconoir.com/"},{"name":"前端大全","url":"https://docschina.org/"},{"name":"使用 Vue.js 开发小程序的前端框架","url":"http://mpvue.com/"},{"name":"uviewui","url":"https://www.uviewui.com/"},{"name":"varlet","url":"https://varlet.gitee.io/varlet-ui/#/zh-CN/index"},{"name":"vant","url":"https://vant-contrib.gitee.io/vant/#/zh-CN"},{"name":"tdesign","url":"https://tdesign.tencent.com/"},{"name":"前端开发UI素材","url":"https://www.creative-tim.com/"},{"name":"vue-treeselect","url":"https://www.vue-treeselect.cn/"},{"name":"semi","url":"https://semi.design/zh-CN/"},{"name":"tailwindcss","url":"https://www.tailwindcss.cn/"},{"name":"fontawesome图标","url":"https://fontawesome.com/"},{"name":"vantajs动画","url":"https://www.vantajs.com/"},{"name":"视差效果pushinjs","url":"https://nateplusplus.github.io/pushin/"}]}],"photography":[{"thumbnail":"https://thumbnail.jpg","photo":"https://photo.jpg","title":"This is title.","icon":"camera","place":"China"},{"thumbnail":"https://thumbnail.jpg","photo":"https://photo.jpg","title":"This is title.","icon":"camera","place":"China"}]}},"excerpt":"<h1 id=\"egg-写一个最简单的mysql查询接口\"><a href=\"#egg-写一个最简单的mysql查询接口\" class=\"headerlink\" title=\"egg 写一个最简单的mysql查询接口\"></a>egg 写一个最简单的mysql查询接口</h1><p>按照<a href=\"https://eggjs.org/zh-cn/intro/quickstart.html\">egg官网</a> 写一个最简单的mysql查询接口(提前准备好mysql数据库)</p>","more":"<p>1、创建项目 安装依赖</p>\n<pre><code class=\"bash\">mkdir my-study-backend\ncd my-study-backend\nnpm init\nnpm i egg --save\nnpm i egg-bin --save-dev\nnpm i --save egg-mysql\n</code></pre>\n<p>修改启动项</p>\n<pre><code class=\"json\">&quot;scripts&quot;: &#123;\n    &quot;dev&quot;: &quot;egg-bin dev&quot;\n  &#125;,\n</code></pre>\n<p>2、在app目录下新建app&#x2F;controller&#x2F;users.js</p>\n<pre><code class=\"javascript\">const Controller = require(&#39;egg&#39;).Controller;\n\nclass UsersController extends Controller &#123;\n  async getUsers() &#123;\n    const &#123; ctx &#125; = this;\n    ctx.body = &#39;hello world&#39;\n  &#125;\n&#125;\n\nmodule.exports = UsersController;\n</code></pre>\n<p>3、在app目录下新建app&#x2F;router.js</p>\n<pre><code class=\"javascript\">module.exports = app =&gt; &#123;\n  const &#123; router, controller &#125; = app;\n  router.get(&#39;/api/getUsers&#39;, controller.users.getUsers); // get(&#39;接口路径&#39;,controller内对应的方法)\n&#125;;\n</code></pre>\n<p>4、在根目录下新建config&#x2F;config.default.js</p>\n<pre><code class=\"javascript\">\nmodule.exports = &#123;\n  keys: &#39;123456790&#39;, // 随便写个Cookie 安全字符串\n&#125;;\n</code></pre>\n<p>终端运行项目</p>\n<pre><code class=\"bash\">npm run dev\n</code></pre>\n<p>此时打开浏览器访问接口就会显示hello world<br><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/1595334065360-6ee5820a-036b-4c33-b1f2-e51b30eb9acf.png\" alt=\"image.png\"><br>5、在config目录下新建config&#x2F;plugin.js 添加mysql配置</p>\n<pre><code class=\"javascript\">module.exports = &#123;\n  mysql: &#123;\n    enable: true,\n    package: &#39;egg-mysql&#39;,\n  &#125;,\n&#125;;\n</code></pre>\n<p>6、修改config&#x2F;config.default.js 添加数据库账号密码</p>\n<pre><code class=\"javascript\">module.exports = &#123;\n  keys: &#39;123456790&#39;,\n  mysql: &#123;\n    // 单数据库信息配置\n    client: &#123;\n      // host\n      host: &#39;39.120.202.168&#39;,\n      // 端口号\n      port: &#39;3306&#39;,\n      // 用户名\n      user: &#39;root&#39;,\n      // 密码\n      password: &#39;123456&#39;,\n      // 数据库名\n      database: &#39;mystudy&#39;,\n    &#125;,\n    // 是否加载到 app 上，默认开启\n    app: true,\n    // 是否加载到 agent 上，默认关闭\n    agent: false,\n  &#125;\n&#125;;\n</code></pre>\n<p>并在数据库mystudy内添加一些数据<br><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/1595334905486-4cdcf583-8243-4eb3-bc2c-430631ea291a.png\" alt=\"image.png\"><br>7、在app目录下新建app&#x2F;service&#x2F;users.js</p>\n<pre><code class=\"javascript\">const Service = require(&#39;egg&#39;).Service;\n\nclass UsersService extends Service &#123;\n  async getData() &#123;\n    const data = await this.app.mysql.query(&#39;SELECT * FROM user&#39;);\n    return &#123; data &#125;;\n  &#125;\n&#125;\n\nmodule.exports = UsersService;\n</code></pre>\n<p>8、修改app&#x2F;controller&#x2F;users.js</p>\n<pre><code class=\"javascript\">const Controller = require(&#39;egg&#39;).Controller;\n\nclass UsersController extends Controller &#123;\n  async getUsers() &#123;\n    const &#123; ctx &#125; = this;\n    const res = await ctx.service.users.getData();\n    ctx.body = &#123;\n      code: &#39;200&#39;,\n      data: res.data,\n      message: &#39;success&#39;\n    &#125;;\n  &#125;\n&#125;\n\nmodule.exports = UsersController;\n</code></pre>\n<p>此时重新运行项目<br><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/1595335194788-4c1e4d12-41b2-463b-bb36-03ecb8fa8230.png\" alt=\"image.png\"><br>成功获取到数据啦！</p>"},{"title":"egg 写一个最简单的token登陆验证","date":"2021-02-25T10:32:00.000Z","_content":"\n# egg 写一个最简单的token登陆验证\n\n首先看完整的目录结构\n<!-- more -->\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/egg1.png)\n主要实现的功能是通过账号密码登录获取token，再通过token来获取用户信息，一共两个接口：登陆接口和获取用户信息接口。\n上一篇文章已经写到了如何写一个最简单的获取mysql用户信息的接口，现在直接在上一篇文章的基础上做token验证登陆。\n\n\nmysql数据库准备好数据\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/egg2.png)\n\n\n\n\n1、安装jwt依赖和解决跨域、白名单egg-cors\n```bash\nnpm i egg-jwt --save\nnpm i egg-cors --save\n```\n2、config/config.default.js\n```javascript\n\nmodule.exports = {\n  // 配置需要的中间件，数组顺序即为中间件的加载顺序\n  // middleware: [ 'jwt' ],\n\n  keys: '123456790',\n  mysql: {\n    // 单数据库信息配置\n    client: {\n      // host\n      host: '38.130.21.169',\n      // 端口号\n      port: '3306',\n      // 用户名\n      user: 'root',\n      // 密码\n      password: 'yourpassword',\n      // 数据库名\n      database: 'database',\n    },\n    // 是否加载到 app 上，默认开启\n    app: true,\n    // 是否加载到 agent 上，默认关闭\n    agent: false,\n  },\n  jwt: {\n    secret: \"123456\"\n  },\n  security: {\n    csrf: {\n      enable: false,\n      ignoreJSON: true\n    },\n    domainWhiteList: ['http://localhost:7001'],//允许访问接口的白名单\n  },\n  cors: {\n    origin:'*', // 解决跨域问题\n    allowMethods: 'GET,HEAD,PUT,POST,DELETE,PATCH'\n  },\n  cluster: {\n    listen: {\n      port: 7001, // 监听端口\n      // hostname: '127.0.0.1', // 不建议设置 hostname 为 '0.0.0.0'，它将允许来自外部网络和来源的连接，请在知晓风险的情况下使用\n      // path: '/var/run/egg.sock',\n    }\n  }\n};\n```\n3、config/plugin.js\n```javascript\nmodule.exports = {\n  mysql: {\n    enable: true,\n    package: 'egg-mysql',\n  },\n  jwt: {\n    enable: true,\n    package: 'egg-jwt',\n  },\n  cors: {\n    enable: true,\n    package: 'egg-cors',\n  },\n};\n```\n4、app/router.js 定义登陆路由\n```javascript\nmodule.exports = app => {\n  const { router, controller, middleware} = app;\n  const jwtErr = middleware.jwtErr(app.config.jwt)\n  \n  router.get('/api/getUser', jwtErr, controller.user.getUser);\n  router.post('/api/login', controller.login.login);\n};\n```\n在获取用户信息接口上使用中间件\n\n\n5、middleware/jwtErr.js 定义一个jwt中间件 访问路由的时候会通过这个中间件来处理\n```javascript\nmodule.exports = (options, app) => {\n  return async function jwtErr(ctx, next) {\n    const token = ctx.request.header.token;\n    if(token){\n      try {\n        ctx.app.jwt.verify(token, options.secret); // 验证token \n        await next();\n      } catch (error) {\n        ctx.status = 401;\n          ctx.body = {\n              massage: 'token已过期，请重新登录',\n              code: -1,\n          }\n          return;\n      }\n    } else {\n      ctx.status = 401;\n      ctx.body = {\n        message: 'token不存在',\n      };\n      return;\n    }\n  }\n}\n```\n接口先去header判断是否存在token，存在就验证，不存在就返回信息。\n\n\n6、controller/login.js 登陆控制器 \n```javascript\nconst Controller = require('egg').Controller;\n\nclass LoginController extends Controller {\n  async login() {\n    const { ctx, app } = this;\n    const { userName, password } = ctx.request.body;\n    const { result } = await ctx.service.login.login(userName, password);\n\n    if(result.length>0){\n      \n      const token = app.jwt.sign({\n        'userName': userName, //需要存储的 token 数据\n      }, app.config.jwt.secret, { expiresIn: '2m' }); // 2分钟token过期\n      \n      ctx.set({'token':token})//设置headers\n      ctx.body = {\n        code: '200',\n        data: [{\n          token: token,\n          userName: result[0].userName,\n          userId: result[0].userId\n        }],\n        message: 'success'\n      };\n\n    }else{\n\n      ctx.body = {\n        code: '401',\n        data: result,\n        message: '账号或密码错误'\n      };\n\n    }\n  }\n}\n\nmodule.exports = LoginController;\n```\n将用户名信息存储在token数据中，并且设置2分钟token过期。当token和用户名密码验证成功，返回token和用户信息。\n\n\n7、service/login.js \n```javascript\nconst Service = require('egg').Service;\nconst crypto = require('crypto');\n\nclass LoginService extends Service {\n  getMd5Data(data) {\n    return crypto.createHash('md5').update(data).digest('hex');\n  }\n\n  async login(username,password) {\n    const psd = this.getMd5Data(password)\n    const data = await this.app.mysql.query(`SELECT * FROM user WHERE userName='${username}' and password='${psd}'`);\n    const result = JSON.parse( JSON.stringify(data)); // 去除node中mysql查询数据产生的RowDataPacket\n    return { result };\n  }\n}\n\nmodule.exports = LoginService;\n```\nmd5加密后查询匹配数据库密码。\n# 验证\npostman调用 post请求 填写用户名和密码获取token\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/egg3.png)\n通过拿到的token放入header请求用户信息\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/egg4.png)\ntoken不存在的情况\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/egg5.png)\n\n\ntoken过期的情况\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/egg6.png)\n\n\n账号密码错误的情况\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/egg7.png)\n","source":"_posts/egg写一个最简单的token登陆验证.md","raw":"---\ntitle: egg 写一个最简单的token登陆验证\ndate: 2021-02-25 18:32\ntags:\n---\n\n# egg 写一个最简单的token登陆验证\n\n首先看完整的目录结构\n<!-- more -->\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/egg1.png)\n主要实现的功能是通过账号密码登录获取token，再通过token来获取用户信息，一共两个接口：登陆接口和获取用户信息接口。\n上一篇文章已经写到了如何写一个最简单的获取mysql用户信息的接口，现在直接在上一篇文章的基础上做token验证登陆。\n\n\nmysql数据库准备好数据\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/egg2.png)\n\n\n\n\n1、安装jwt依赖和解决跨域、白名单egg-cors\n```bash\nnpm i egg-jwt --save\nnpm i egg-cors --save\n```\n2、config/config.default.js\n```javascript\n\nmodule.exports = {\n  // 配置需要的中间件，数组顺序即为中间件的加载顺序\n  // middleware: [ 'jwt' ],\n\n  keys: '123456790',\n  mysql: {\n    // 单数据库信息配置\n    client: {\n      // host\n      host: '38.130.21.169',\n      // 端口号\n      port: '3306',\n      // 用户名\n      user: 'root',\n      // 密码\n      password: 'yourpassword',\n      // 数据库名\n      database: 'database',\n    },\n    // 是否加载到 app 上，默认开启\n    app: true,\n    // 是否加载到 agent 上，默认关闭\n    agent: false,\n  },\n  jwt: {\n    secret: \"123456\"\n  },\n  security: {\n    csrf: {\n      enable: false,\n      ignoreJSON: true\n    },\n    domainWhiteList: ['http://localhost:7001'],//允许访问接口的白名单\n  },\n  cors: {\n    origin:'*', // 解决跨域问题\n    allowMethods: 'GET,HEAD,PUT,POST,DELETE,PATCH'\n  },\n  cluster: {\n    listen: {\n      port: 7001, // 监听端口\n      // hostname: '127.0.0.1', // 不建议设置 hostname 为 '0.0.0.0'，它将允许来自外部网络和来源的连接，请在知晓风险的情况下使用\n      // path: '/var/run/egg.sock',\n    }\n  }\n};\n```\n3、config/plugin.js\n```javascript\nmodule.exports = {\n  mysql: {\n    enable: true,\n    package: 'egg-mysql',\n  },\n  jwt: {\n    enable: true,\n    package: 'egg-jwt',\n  },\n  cors: {\n    enable: true,\n    package: 'egg-cors',\n  },\n};\n```\n4、app/router.js 定义登陆路由\n```javascript\nmodule.exports = app => {\n  const { router, controller, middleware} = app;\n  const jwtErr = middleware.jwtErr(app.config.jwt)\n  \n  router.get('/api/getUser', jwtErr, controller.user.getUser);\n  router.post('/api/login', controller.login.login);\n};\n```\n在获取用户信息接口上使用中间件\n\n\n5、middleware/jwtErr.js 定义一个jwt中间件 访问路由的时候会通过这个中间件来处理\n```javascript\nmodule.exports = (options, app) => {\n  return async function jwtErr(ctx, next) {\n    const token = ctx.request.header.token;\n    if(token){\n      try {\n        ctx.app.jwt.verify(token, options.secret); // 验证token \n        await next();\n      } catch (error) {\n        ctx.status = 401;\n          ctx.body = {\n              massage: 'token已过期，请重新登录',\n              code: -1,\n          }\n          return;\n      }\n    } else {\n      ctx.status = 401;\n      ctx.body = {\n        message: 'token不存在',\n      };\n      return;\n    }\n  }\n}\n```\n接口先去header判断是否存在token，存在就验证，不存在就返回信息。\n\n\n6、controller/login.js 登陆控制器 \n```javascript\nconst Controller = require('egg').Controller;\n\nclass LoginController extends Controller {\n  async login() {\n    const { ctx, app } = this;\n    const { userName, password } = ctx.request.body;\n    const { result } = await ctx.service.login.login(userName, password);\n\n    if(result.length>0){\n      \n      const token = app.jwt.sign({\n        'userName': userName, //需要存储的 token 数据\n      }, app.config.jwt.secret, { expiresIn: '2m' }); // 2分钟token过期\n      \n      ctx.set({'token':token})//设置headers\n      ctx.body = {\n        code: '200',\n        data: [{\n          token: token,\n          userName: result[0].userName,\n          userId: result[0].userId\n        }],\n        message: 'success'\n      };\n\n    }else{\n\n      ctx.body = {\n        code: '401',\n        data: result,\n        message: '账号或密码错误'\n      };\n\n    }\n  }\n}\n\nmodule.exports = LoginController;\n```\n将用户名信息存储在token数据中，并且设置2分钟token过期。当token和用户名密码验证成功，返回token和用户信息。\n\n\n7、service/login.js \n```javascript\nconst Service = require('egg').Service;\nconst crypto = require('crypto');\n\nclass LoginService extends Service {\n  getMd5Data(data) {\n    return crypto.createHash('md5').update(data).digest('hex');\n  }\n\n  async login(username,password) {\n    const psd = this.getMd5Data(password)\n    const data = await this.app.mysql.query(`SELECT * FROM user WHERE userName='${username}' and password='${psd}'`);\n    const result = JSON.parse( JSON.stringify(data)); // 去除node中mysql查询数据产生的RowDataPacket\n    return { result };\n  }\n}\n\nmodule.exports = LoginService;\n```\nmd5加密后查询匹配数据库密码。\n# 验证\npostman调用 post请求 填写用户名和密码获取token\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/egg3.png)\n通过拿到的token放入header请求用户信息\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/egg4.png)\ntoken不存在的情况\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/egg5.png)\n\n\ntoken过期的情况\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/egg6.png)\n\n\n账号密码错误的情况\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/egg7.png)\n","slug":"egg写一个最简单的token登陆验证","published":1,"updated":"2022-11-02T04:24:55.800Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clagmayfh00076c84a5hvdtai","content":"<h1 id=\"egg-写一个最简单的token登陆验证\"><a href=\"#egg-写一个最简单的token登陆验证\" class=\"headerlink\" title=\"egg 写一个最简单的token登陆验证\"></a>egg 写一个最简单的token登陆验证</h1><p>首先看完整的目录结构</p>\n<span id=\"more\"></span>\n<p><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/egg1.png\" alt=\"image.png\"><br>主要实现的功能是通过账号密码登录获取token，再通过token来获取用户信息，一共两个接口：登陆接口和获取用户信息接口。<br>上一篇文章已经写到了如何写一个最简单的获取mysql用户信息的接口，现在直接在上一篇文章的基础上做token验证登陆。</p>\n<p>mysql数据库准备好数据<br><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/egg2.png\" alt=\"image.png\"></p>\n<p>1、安装jwt依赖和解决跨域、白名单egg-cors</p>\n<pre><code class=\"bash\">npm i egg-jwt --save\nnpm i egg-cors --save\n</code></pre>\n<p>2、config&#x2F;config.default.js</p>\n<pre><code class=\"javascript\">\nmodule.exports = &#123;\n  // 配置需要的中间件，数组顺序即为中间件的加载顺序\n  // middleware: [ &#39;jwt&#39; ],\n\n  keys: &#39;123456790&#39;,\n  mysql: &#123;\n    // 单数据库信息配置\n    client: &#123;\n      // host\n      host: &#39;38.130.21.169&#39;,\n      // 端口号\n      port: &#39;3306&#39;,\n      // 用户名\n      user: &#39;root&#39;,\n      // 密码\n      password: &#39;yourpassword&#39;,\n      // 数据库名\n      database: &#39;database&#39;,\n    &#125;,\n    // 是否加载到 app 上，默认开启\n    app: true,\n    // 是否加载到 agent 上，默认关闭\n    agent: false,\n  &#125;,\n  jwt: &#123;\n    secret: &quot;123456&quot;\n  &#125;,\n  security: &#123;\n    csrf: &#123;\n      enable: false,\n      ignoreJSON: true\n    &#125;,\n    domainWhiteList: [&#39;http://localhost:7001&#39;],//允许访问接口的白名单\n  &#125;,\n  cors: &#123;\n    origin:&#39;*&#39;, // 解决跨域问题\n    allowMethods: &#39;GET,HEAD,PUT,POST,DELETE,PATCH&#39;\n  &#125;,\n  cluster: &#123;\n    listen: &#123;\n      port: 7001, // 监听端口\n      // hostname: &#39;127.0.0.1&#39;, // 不建议设置 hostname 为 &#39;0.0.0.0&#39;，它将允许来自外部网络和来源的连接，请在知晓风险的情况下使用\n      // path: &#39;/var/run/egg.sock&#39;,\n    &#125;\n  &#125;\n&#125;;\n</code></pre>\n<p>3、config&#x2F;plugin.js</p>\n<pre><code class=\"javascript\">module.exports = &#123;\n  mysql: &#123;\n    enable: true,\n    package: &#39;egg-mysql&#39;,\n  &#125;,\n  jwt: &#123;\n    enable: true,\n    package: &#39;egg-jwt&#39;,\n  &#125;,\n  cors: &#123;\n    enable: true,\n    package: &#39;egg-cors&#39;,\n  &#125;,\n&#125;;\n</code></pre>\n<p>4、app&#x2F;router.js 定义登陆路由</p>\n<pre><code class=\"javascript\">module.exports = app =&gt; &#123;\n  const &#123; router, controller, middleware&#125; = app;\n  const jwtErr = middleware.jwtErr(app.config.jwt)\n  \n  router.get(&#39;/api/getUser&#39;, jwtErr, controller.user.getUser);\n  router.post(&#39;/api/login&#39;, controller.login.login);\n&#125;;\n</code></pre>\n<p>在获取用户信息接口上使用中间件</p>\n<p>5、middleware&#x2F;jwtErr.js 定义一个jwt中间件 访问路由的时候会通过这个中间件来处理</p>\n<pre><code class=\"javascript\">module.exports = (options, app) =&gt; &#123;\n  return async function jwtErr(ctx, next) &#123;\n    const token = ctx.request.header.token;\n    if(token)&#123;\n      try &#123;\n        ctx.app.jwt.verify(token, options.secret); // 验证token \n        await next();\n      &#125; catch (error) &#123;\n        ctx.status = 401;\n          ctx.body = &#123;\n              massage: &#39;token已过期，请重新登录&#39;,\n              code: -1,\n          &#125;\n          return;\n      &#125;\n    &#125; else &#123;\n      ctx.status = 401;\n      ctx.body = &#123;\n        message: &#39;token不存在&#39;,\n      &#125;;\n      return;\n    &#125;\n  &#125;\n&#125;\n</code></pre>\n<p>接口先去header判断是否存在token，存在就验证，不存在就返回信息。</p>\n<p>6、controller&#x2F;login.js 登陆控制器 </p>\n<pre><code class=\"javascript\">const Controller = require(&#39;egg&#39;).Controller;\n\nclass LoginController extends Controller &#123;\n  async login() &#123;\n    const &#123; ctx, app &#125; = this;\n    const &#123; userName, password &#125; = ctx.request.body;\n    const &#123; result &#125; = await ctx.service.login.login(userName, password);\n\n    if(result.length&gt;0)&#123;\n      \n      const token = app.jwt.sign(&#123;\n        &#39;userName&#39;: userName, //需要存储的 token 数据\n      &#125;, app.config.jwt.secret, &#123; expiresIn: &#39;2m&#39; &#125;); // 2分钟token过期\n      \n      ctx.set(&#123;&#39;token&#39;:token&#125;)//设置headers\n      ctx.body = &#123;\n        code: &#39;200&#39;,\n        data: [&#123;\n          token: token,\n          userName: result[0].userName,\n          userId: result[0].userId\n        &#125;],\n        message: &#39;success&#39;\n      &#125;;\n\n    &#125;else&#123;\n\n      ctx.body = &#123;\n        code: &#39;401&#39;,\n        data: result,\n        message: &#39;账号或密码错误&#39;\n      &#125;;\n\n    &#125;\n  &#125;\n&#125;\n\nmodule.exports = LoginController;\n</code></pre>\n<p>将用户名信息存储在token数据中，并且设置2分钟token过期。当token和用户名密码验证成功，返回token和用户信息。</p>\n<p>7、service&#x2F;login.js </p>\n<pre><code class=\"javascript\">const Service = require(&#39;egg&#39;).Service;\nconst crypto = require(&#39;crypto&#39;);\n\nclass LoginService extends Service &#123;\n  getMd5Data(data) &#123;\n    return crypto.createHash(&#39;md5&#39;).update(data).digest(&#39;hex&#39;);\n  &#125;\n\n  async login(username,password) &#123;\n    const psd = this.getMd5Data(password)\n    const data = await this.app.mysql.query(`SELECT * FROM user WHERE userName=&#39;$&#123;username&#125;&#39; and password=&#39;$&#123;psd&#125;&#39;`);\n    const result = JSON.parse( JSON.stringify(data)); // 去除node中mysql查询数据产生的RowDataPacket\n    return &#123; result &#125;;\n  &#125;\n&#125;\n\nmodule.exports = LoginService;\n</code></pre>\n<p>md5加密后查询匹配数据库密码。</p>\n<h1 id=\"验证\"><a href=\"#验证\" class=\"headerlink\" title=\"验证\"></a>验证</h1><p>postman调用 post请求 填写用户名和密码获取token<br><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/egg3.png\" alt=\"image.png\"><br>通过拿到的token放入header请求用户信息<br><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/egg4.png\" alt=\"image.png\"><br>token不存在的情况<br><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/egg5.png\" alt=\"image.png\"></p>\n<p>token过期的情况<br><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/egg6.png\" alt=\"image.png\"></p>\n<p>账号密码错误的情况<br><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/egg7.png\" alt=\"image.png\"></p>\n","site":{"data":{"friends":[{"category":"技术","data":[{"name":"stackblitz","url":"https://stackblitz.com"},{"name":"serverless-devs","url":"http://www.serverless-devs.com/"},{"name":"cypress自动化测试","url":"https://www.cypress.io/"},{"name":"微前端架构","url":"https://micro-frontends.ice.work/"},{"name":"gin+vue进行极速开发的全栈开发基础平台","url":"https://www.gin-vue-admin.com/"},{"name":"cloudbase","url":"https://docs.cloudbase.net/"},{"name":"supabase","url":"https://supabase.com/"}]},{"category":"工具","data":[{"name":"程序员工具集合大全","url":"https://www.bejson.com/"},{"name":"图片处理","url":"https://imagestool.com/zh_CN/index.html"},{"name":"免费在线抠图","url":"https://picwish.cn/"},{"name":"LOGO海报设计","url":"https://www.canva.cn/"},{"name":"图片无损缩放","url":"http://waifu2x.udp.jp/"},{"name":"图片格式转换器","url":"https://renzhezhilu.github.io/webp2jpg-online/"},{"name":"PDF工具集合","url":"https://tools.pdf24.org/zh/"},{"name":"UI直接生成代码","url":"https://code.fun/"},{"name":"markdown转公众号知乎","url":"https://editor.mdnice.com/"},{"name":"油猴脚本库","url":"https://greasyfork.org/zh-CN"},{"name":"代码片段转图片","url":"https://ray.so/"},{"name":"nginx配置器","url":"https://www.digitalocean.com/community/tools/nginx?global.app.lang=zhCN"},{"name":"前端插件库","url":"https://awesomejs.dev/"},{"name":"独特工具箱啥都有","url":"https://www.dute.org/"},{"name":"url编码解码","url":"http://www.jsons.cn/urlencode"},{"name":"菜鸟工具(正则测试等)","url":"https://c.runoob.com/front-end/854/"},{"name":"JSON编辑器格式化","url":"https://www.jsont.run/"},{"name":"七夜导航各类工具集","url":"https://nav.qinight.com/"},{"name":"生活百科wiki","url":"https://zh.wikihow.com/"},{"name":"表情包搜索网站","url":"https://www.dbbqb.com/"},{"name":"果汁工具大全(生活类)","url":"http://guozhivip.com/tool/"},{"name":"谷歌插件国内下载","url":"https://chrome.zzzmh.cn"},{"name":"PDF/图片/视频/音频/格式转换","url":"https://www.aconvert.com/cn/"},{"name":"JSON转各类代码","url":"https://app.quicktype.io/"},{"name":"markdown笔记","url":"https://yank-note.vercel.app"},{"name":"网页版API接口调试(界面清爽)","url":"https://httpie.io/app"},{"name":"在线开发神器手机网页开发同步","url":"https://replit.com/"},{"name":"在网页上运行安卓app","url":"https://www.wolfia.com/"},{"name":"在线工具开发手机web同步开发","url":"https://replit.com/"},{"name":"在线http接口调试","url":"https://httpie.io/app"}]},{"category":"素材","data":[{"name":"免费壁纸","url":"https://wallpaperhub.app"},{"name":"UI设计库","url":"https://screenlane.com/"},{"name":"摄图网","url":"https://699pic.com/"}]},{"category":"学习","data":[{"name":"面试基础知识","url":"https://micro-frontends.ice.work/"},{"name":"各类语言框架语法大全查询","url":"https://socode.pro/"},{"name":"前端人俱乐部","url":"http://f2er.club/"},{"name":"vue3+ts","url":"https://24kcs.github.io/vue3_study/"}]},{"category":"软件","data":[{"name":"正版软件购买","url":"https://apsgo.com/"}]},{"category":"前端","data":[{"name":"图标库","url":"https://iconoir.com/"},{"name":"前端大全","url":"https://docschina.org/"},{"name":"使用 Vue.js 开发小程序的前端框架","url":"http://mpvue.com/"},{"name":"uviewui","url":"https://www.uviewui.com/"},{"name":"varlet","url":"https://varlet.gitee.io/varlet-ui/#/zh-CN/index"},{"name":"vant","url":"https://vant-contrib.gitee.io/vant/#/zh-CN"},{"name":"tdesign","url":"https://tdesign.tencent.com/"},{"name":"前端开发UI素材","url":"https://www.creative-tim.com/"},{"name":"vue-treeselect","url":"https://www.vue-treeselect.cn/"},{"name":"semi","url":"https://semi.design/zh-CN/"},{"name":"tailwindcss","url":"https://www.tailwindcss.cn/"},{"name":"fontawesome图标","url":"https://fontawesome.com/"},{"name":"vantajs动画","url":"https://www.vantajs.com/"},{"name":"视差效果pushinjs","url":"https://nateplusplus.github.io/pushin/"}]}],"photography":[{"thumbnail":"https://thumbnail.jpg","photo":"https://photo.jpg","title":"This is title.","icon":"camera","place":"China"},{"thumbnail":"https://thumbnail.jpg","photo":"https://photo.jpg","title":"This is title.","icon":"camera","place":"China"}]}},"excerpt":"<h1 id=\"egg-写一个最简单的token登陆验证\"><a href=\"#egg-写一个最简单的token登陆验证\" class=\"headerlink\" title=\"egg 写一个最简单的token登陆验证\"></a>egg 写一个最简单的token登陆验证</h1><p>首先看完整的目录结构</p>","more":"<p><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/egg1.png\" alt=\"image.png\"><br>主要实现的功能是通过账号密码登录获取token，再通过token来获取用户信息，一共两个接口：登陆接口和获取用户信息接口。<br>上一篇文章已经写到了如何写一个最简单的获取mysql用户信息的接口，现在直接在上一篇文章的基础上做token验证登陆。</p>\n<p>mysql数据库准备好数据<br><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/egg2.png\" alt=\"image.png\"></p>\n<p>1、安装jwt依赖和解决跨域、白名单egg-cors</p>\n<pre><code class=\"bash\">npm i egg-jwt --save\nnpm i egg-cors --save\n</code></pre>\n<p>2、config&#x2F;config.default.js</p>\n<pre><code class=\"javascript\">\nmodule.exports = &#123;\n  // 配置需要的中间件，数组顺序即为中间件的加载顺序\n  // middleware: [ &#39;jwt&#39; ],\n\n  keys: &#39;123456790&#39;,\n  mysql: &#123;\n    // 单数据库信息配置\n    client: &#123;\n      // host\n      host: &#39;38.130.21.169&#39;,\n      // 端口号\n      port: &#39;3306&#39;,\n      // 用户名\n      user: &#39;root&#39;,\n      // 密码\n      password: &#39;yourpassword&#39;,\n      // 数据库名\n      database: &#39;database&#39;,\n    &#125;,\n    // 是否加载到 app 上，默认开启\n    app: true,\n    // 是否加载到 agent 上，默认关闭\n    agent: false,\n  &#125;,\n  jwt: &#123;\n    secret: &quot;123456&quot;\n  &#125;,\n  security: &#123;\n    csrf: &#123;\n      enable: false,\n      ignoreJSON: true\n    &#125;,\n    domainWhiteList: [&#39;http://localhost:7001&#39;],//允许访问接口的白名单\n  &#125;,\n  cors: &#123;\n    origin:&#39;*&#39;, // 解决跨域问题\n    allowMethods: &#39;GET,HEAD,PUT,POST,DELETE,PATCH&#39;\n  &#125;,\n  cluster: &#123;\n    listen: &#123;\n      port: 7001, // 监听端口\n      // hostname: &#39;127.0.0.1&#39;, // 不建议设置 hostname 为 &#39;0.0.0.0&#39;，它将允许来自外部网络和来源的连接，请在知晓风险的情况下使用\n      // path: &#39;/var/run/egg.sock&#39;,\n    &#125;\n  &#125;\n&#125;;\n</code></pre>\n<p>3、config&#x2F;plugin.js</p>\n<pre><code class=\"javascript\">module.exports = &#123;\n  mysql: &#123;\n    enable: true,\n    package: &#39;egg-mysql&#39;,\n  &#125;,\n  jwt: &#123;\n    enable: true,\n    package: &#39;egg-jwt&#39;,\n  &#125;,\n  cors: &#123;\n    enable: true,\n    package: &#39;egg-cors&#39;,\n  &#125;,\n&#125;;\n</code></pre>\n<p>4、app&#x2F;router.js 定义登陆路由</p>\n<pre><code class=\"javascript\">module.exports = app =&gt; &#123;\n  const &#123; router, controller, middleware&#125; = app;\n  const jwtErr = middleware.jwtErr(app.config.jwt)\n  \n  router.get(&#39;/api/getUser&#39;, jwtErr, controller.user.getUser);\n  router.post(&#39;/api/login&#39;, controller.login.login);\n&#125;;\n</code></pre>\n<p>在获取用户信息接口上使用中间件</p>\n<p>5、middleware&#x2F;jwtErr.js 定义一个jwt中间件 访问路由的时候会通过这个中间件来处理</p>\n<pre><code class=\"javascript\">module.exports = (options, app) =&gt; &#123;\n  return async function jwtErr(ctx, next) &#123;\n    const token = ctx.request.header.token;\n    if(token)&#123;\n      try &#123;\n        ctx.app.jwt.verify(token, options.secret); // 验证token \n        await next();\n      &#125; catch (error) &#123;\n        ctx.status = 401;\n          ctx.body = &#123;\n              massage: &#39;token已过期，请重新登录&#39;,\n              code: -1,\n          &#125;\n          return;\n      &#125;\n    &#125; else &#123;\n      ctx.status = 401;\n      ctx.body = &#123;\n        message: &#39;token不存在&#39;,\n      &#125;;\n      return;\n    &#125;\n  &#125;\n&#125;\n</code></pre>\n<p>接口先去header判断是否存在token，存在就验证，不存在就返回信息。</p>\n<p>6、controller&#x2F;login.js 登陆控制器 </p>\n<pre><code class=\"javascript\">const Controller = require(&#39;egg&#39;).Controller;\n\nclass LoginController extends Controller &#123;\n  async login() &#123;\n    const &#123; ctx, app &#125; = this;\n    const &#123; userName, password &#125; = ctx.request.body;\n    const &#123; result &#125; = await ctx.service.login.login(userName, password);\n\n    if(result.length&gt;0)&#123;\n      \n      const token = app.jwt.sign(&#123;\n        &#39;userName&#39;: userName, //需要存储的 token 数据\n      &#125;, app.config.jwt.secret, &#123; expiresIn: &#39;2m&#39; &#125;); // 2分钟token过期\n      \n      ctx.set(&#123;&#39;token&#39;:token&#125;)//设置headers\n      ctx.body = &#123;\n        code: &#39;200&#39;,\n        data: [&#123;\n          token: token,\n          userName: result[0].userName,\n          userId: result[0].userId\n        &#125;],\n        message: &#39;success&#39;\n      &#125;;\n\n    &#125;else&#123;\n\n      ctx.body = &#123;\n        code: &#39;401&#39;,\n        data: result,\n        message: &#39;账号或密码错误&#39;\n      &#125;;\n\n    &#125;\n  &#125;\n&#125;\n\nmodule.exports = LoginController;\n</code></pre>\n<p>将用户名信息存储在token数据中，并且设置2分钟token过期。当token和用户名密码验证成功，返回token和用户信息。</p>\n<p>7、service&#x2F;login.js </p>\n<pre><code class=\"javascript\">const Service = require(&#39;egg&#39;).Service;\nconst crypto = require(&#39;crypto&#39;);\n\nclass LoginService extends Service &#123;\n  getMd5Data(data) &#123;\n    return crypto.createHash(&#39;md5&#39;).update(data).digest(&#39;hex&#39;);\n  &#125;\n\n  async login(username,password) &#123;\n    const psd = this.getMd5Data(password)\n    const data = await this.app.mysql.query(`SELECT * FROM user WHERE userName=&#39;$&#123;username&#125;&#39; and password=&#39;$&#123;psd&#125;&#39;`);\n    const result = JSON.parse( JSON.stringify(data)); // 去除node中mysql查询数据产生的RowDataPacket\n    return &#123; result &#125;;\n  &#125;\n&#125;\n\nmodule.exports = LoginService;\n</code></pre>\n<p>md5加密后查询匹配数据库密码。</p>\n<h1 id=\"验证\"><a href=\"#验证\" class=\"headerlink\" title=\"验证\"></a>验证</h1><p>postman调用 post请求 填写用户名和密码获取token<br><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/egg3.png\" alt=\"image.png\"><br>通过拿到的token放入header请求用户信息<br><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/egg4.png\" alt=\"image.png\"><br>token不存在的情况<br><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/egg5.png\" alt=\"image.png\"></p>\n<p>token过期的情况<br><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/egg6.png\" alt=\"image.png\"></p>\n<p>账号密码错误的情况<br><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/egg7.png\" alt=\"image.png\"></p>"},{"title":"ios平板手机免登录免费看全网爱奇艺、腾讯VIP视频电影教程！！！","date":"2022-11-02T05:00:00.000Z","_content":"\n## ios平板手机免登录免费看全网爱奇艺、腾讯VIP视频教程！！！\n废话不多说，这个教程很简单直接上图！\n不管是手机还是平板在设置中找到Safari浏览器，找到扩展。\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/h/IMG_0270.PNG)\n<!-- more -->\n扩展进去之后直接点更多扩展，会跳转到appStore应用商店\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/h/IMG_0271.PNG)\n\n在应用商店里找到Stay-用户脚本扩展管理器(油猴)下载安装\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/h/IMG_0272.PNG)\n\n打开Stay然后点击右上角的加号会弹出4个选项，这里选择“从GreasyFork导入”\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/h/IMG_0273.PNG)\n\nGreasyFork是一个浏览器脚本库网站，里面有很多浏览器脚本，还有抢购脚本哦~\n因为是手机和ipad所以我们得选择支持手机和移动端并且是支持Safari浏览器的插件\n这里我们找到下图第二个“B站哔哩哔哩...”这个脚本，找不到的可以搜索下，或者点击右边总安装数排第二的插件。\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/h/IMG_0274.PNG)\n\n点进去之后可以看下这个插件的详细功能介绍，然后直接安装此脚本。\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/h/IMG_0275.PNG)\n\n提示成功之后，再点击右上角的创建按钮。\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/h/IMG_0276.PNG)\n\n然后显示已激活就说明脚本安装成功了。\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/IMG_0277.PNG)\n\n然后打开我们的Safari浏览器就可以看到地址栏里已经显示了当前运行的脚本\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/h/IMG_0278.PNG)\n\n如果没有显示再去设置扩展里看下是否已经打开\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/h/IMG_0279.PNG)\n\n这时候打开腾讯视频，我们选择一个VIP电影来看下。\n此时我们是未登录状态下而且提示此片是会员才能看。\n但视频的左边出现了两个图标一个VIP和一个火箭图标。\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/h/IMG_0280.PNG)\n\nVIP图标我们可以切换视频源地址\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/IMG_0282.PNG)\n\n点击火箭图标，直接就能跳转观看超清VIP电影了！\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/h/IMG_0281.PNG)\n\n再也不用花钱看电视啦！\n\n","source":"_posts/ios手机平板免费看全网爱奇艺、腾讯VIP视频教程！！！.md","raw":"---\ntitle: ios平板手机免登录免费看全网爱奇艺、腾讯VIP视频电影教程！！！\ndate: 2022-11-02 13:00\ntags:\n---\n\n## ios平板手机免登录免费看全网爱奇艺、腾讯VIP视频教程！！！\n废话不多说，这个教程很简单直接上图！\n不管是手机还是平板在设置中找到Safari浏览器，找到扩展。\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/h/IMG_0270.PNG)\n<!-- more -->\n扩展进去之后直接点更多扩展，会跳转到appStore应用商店\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/h/IMG_0271.PNG)\n\n在应用商店里找到Stay-用户脚本扩展管理器(油猴)下载安装\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/h/IMG_0272.PNG)\n\n打开Stay然后点击右上角的加号会弹出4个选项，这里选择“从GreasyFork导入”\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/h/IMG_0273.PNG)\n\nGreasyFork是一个浏览器脚本库网站，里面有很多浏览器脚本，还有抢购脚本哦~\n因为是手机和ipad所以我们得选择支持手机和移动端并且是支持Safari浏览器的插件\n这里我们找到下图第二个“B站哔哩哔哩...”这个脚本，找不到的可以搜索下，或者点击右边总安装数排第二的插件。\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/h/IMG_0274.PNG)\n\n点进去之后可以看下这个插件的详细功能介绍，然后直接安装此脚本。\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/h/IMG_0275.PNG)\n\n提示成功之后，再点击右上角的创建按钮。\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/h/IMG_0276.PNG)\n\n然后显示已激活就说明脚本安装成功了。\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/IMG_0277.PNG)\n\n然后打开我们的Safari浏览器就可以看到地址栏里已经显示了当前运行的脚本\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/h/IMG_0278.PNG)\n\n如果没有显示再去设置扩展里看下是否已经打开\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/h/IMG_0279.PNG)\n\n这时候打开腾讯视频，我们选择一个VIP电影来看下。\n此时我们是未登录状态下而且提示此片是会员才能看。\n但视频的左边出现了两个图标一个VIP和一个火箭图标。\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/h/IMG_0280.PNG)\n\nVIP图标我们可以切换视频源地址\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/IMG_0282.PNG)\n\n点击火箭图标，直接就能跳转观看超清VIP电影了！\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/h/IMG_0281.PNG)\n\n再也不用花钱看电视啦！\n\n","slug":"ios手机平板免费看全网爱奇艺、腾讯VIP视频教程！！！","published":1,"updated":"2022-11-02T05:10:16.915Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clagmayfi00086c846upvafnu","content":"<h2 id=\"ios平板手机免登录免费看全网爱奇艺、腾讯VIP视频教程！！！\"><a href=\"#ios平板手机免登录免费看全网爱奇艺、腾讯VIP视频教程！！！\" class=\"headerlink\" title=\"ios平板手机免登录免费看全网爱奇艺、腾讯VIP视频教程！！！\"></a>ios平板手机免登录免费看全网爱奇艺、腾讯VIP视频教程！！！</h2><p>废话不多说，这个教程很简单直接上图！<br>不管是手机还是平板在设置中找到Safari浏览器，找到扩展。<br><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/h/IMG_0270.PNG\" alt=\"image.png\"></p>\n<span id=\"more\"></span>\n<p>扩展进去之后直接点更多扩展，会跳转到appStore应用商店<br><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/h/IMG_0271.PNG\" alt=\"image.png\"></p>\n<p>在应用商店里找到Stay-用户脚本扩展管理器(油猴)下载安装<br><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/h/IMG_0272.PNG\" alt=\"image.png\"></p>\n<p>打开Stay然后点击右上角的加号会弹出4个选项，这里选择“从GreasyFork导入”<br><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/h/IMG_0273.PNG\" alt=\"image.png\"></p>\n<p>GreasyFork是一个浏览器脚本库网站，里面有很多浏览器脚本，还有抢购脚本哦~<br>因为是手机和ipad所以我们得选择支持手机和移动端并且是支持Safari浏览器的插件<br>这里我们找到下图第二个“B站哔哩哔哩…”这个脚本，找不到的可以搜索下，或者点击右边总安装数排第二的插件。<br><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/h/IMG_0274.PNG\" alt=\"image.png\"></p>\n<p>点进去之后可以看下这个插件的详细功能介绍，然后直接安装此脚本。<br><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/h/IMG_0275.PNG\" alt=\"image.png\"></p>\n<p>提示成功之后，再点击右上角的创建按钮。<br><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/h/IMG_0276.PNG\" alt=\"image.png\"></p>\n<p>然后显示已激活就说明脚本安装成功了。<br><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/IMG_0277.PNG\" alt=\"image.png\"></p>\n<p>然后打开我们的Safari浏览器就可以看到地址栏里已经显示了当前运行的脚本<br><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/h/IMG_0278.PNG\" alt=\"image.png\"></p>\n<p>如果没有显示再去设置扩展里看下是否已经打开<br><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/h/IMG_0279.PNG\" alt=\"image.png\"></p>\n<p>这时候打开腾讯视频，我们选择一个VIP电影来看下。<br>此时我们是未登录状态下而且提示此片是会员才能看。<br>但视频的左边出现了两个图标一个VIP和一个火箭图标。<br><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/h/IMG_0280.PNG\" alt=\"image.png\"></p>\n<p>VIP图标我们可以切换视频源地址<br><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/IMG_0282.PNG\" alt=\"image.png\"></p>\n<p>点击火箭图标，直接就能跳转观看超清VIP电影了！<br><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/h/IMG_0281.PNG\" alt=\"image.png\"></p>\n<p>再也不用花钱看电视啦！</p>\n","site":{"data":{"friends":[{"category":"技术","data":[{"name":"stackblitz","url":"https://stackblitz.com"},{"name":"serverless-devs","url":"http://www.serverless-devs.com/"},{"name":"cypress自动化测试","url":"https://www.cypress.io/"},{"name":"微前端架构","url":"https://micro-frontends.ice.work/"},{"name":"gin+vue进行极速开发的全栈开发基础平台","url":"https://www.gin-vue-admin.com/"},{"name":"cloudbase","url":"https://docs.cloudbase.net/"},{"name":"supabase","url":"https://supabase.com/"}]},{"category":"工具","data":[{"name":"程序员工具集合大全","url":"https://www.bejson.com/"},{"name":"图片处理","url":"https://imagestool.com/zh_CN/index.html"},{"name":"免费在线抠图","url":"https://picwish.cn/"},{"name":"LOGO海报设计","url":"https://www.canva.cn/"},{"name":"图片无损缩放","url":"http://waifu2x.udp.jp/"},{"name":"图片格式转换器","url":"https://renzhezhilu.github.io/webp2jpg-online/"},{"name":"PDF工具集合","url":"https://tools.pdf24.org/zh/"},{"name":"UI直接生成代码","url":"https://code.fun/"},{"name":"markdown转公众号知乎","url":"https://editor.mdnice.com/"},{"name":"油猴脚本库","url":"https://greasyfork.org/zh-CN"},{"name":"代码片段转图片","url":"https://ray.so/"},{"name":"nginx配置器","url":"https://www.digitalocean.com/community/tools/nginx?global.app.lang=zhCN"},{"name":"前端插件库","url":"https://awesomejs.dev/"},{"name":"独特工具箱啥都有","url":"https://www.dute.org/"},{"name":"url编码解码","url":"http://www.jsons.cn/urlencode"},{"name":"菜鸟工具(正则测试等)","url":"https://c.runoob.com/front-end/854/"},{"name":"JSON编辑器格式化","url":"https://www.jsont.run/"},{"name":"七夜导航各类工具集","url":"https://nav.qinight.com/"},{"name":"生活百科wiki","url":"https://zh.wikihow.com/"},{"name":"表情包搜索网站","url":"https://www.dbbqb.com/"},{"name":"果汁工具大全(生活类)","url":"http://guozhivip.com/tool/"},{"name":"谷歌插件国内下载","url":"https://chrome.zzzmh.cn"},{"name":"PDF/图片/视频/音频/格式转换","url":"https://www.aconvert.com/cn/"},{"name":"JSON转各类代码","url":"https://app.quicktype.io/"},{"name":"markdown笔记","url":"https://yank-note.vercel.app"},{"name":"网页版API接口调试(界面清爽)","url":"https://httpie.io/app"},{"name":"在线开发神器手机网页开发同步","url":"https://replit.com/"},{"name":"在网页上运行安卓app","url":"https://www.wolfia.com/"},{"name":"在线工具开发手机web同步开发","url":"https://replit.com/"},{"name":"在线http接口调试","url":"https://httpie.io/app"}]},{"category":"素材","data":[{"name":"免费壁纸","url":"https://wallpaperhub.app"},{"name":"UI设计库","url":"https://screenlane.com/"},{"name":"摄图网","url":"https://699pic.com/"}]},{"category":"学习","data":[{"name":"面试基础知识","url":"https://micro-frontends.ice.work/"},{"name":"各类语言框架语法大全查询","url":"https://socode.pro/"},{"name":"前端人俱乐部","url":"http://f2er.club/"},{"name":"vue3+ts","url":"https://24kcs.github.io/vue3_study/"}]},{"category":"软件","data":[{"name":"正版软件购买","url":"https://apsgo.com/"}]},{"category":"前端","data":[{"name":"图标库","url":"https://iconoir.com/"},{"name":"前端大全","url":"https://docschina.org/"},{"name":"使用 Vue.js 开发小程序的前端框架","url":"http://mpvue.com/"},{"name":"uviewui","url":"https://www.uviewui.com/"},{"name":"varlet","url":"https://varlet.gitee.io/varlet-ui/#/zh-CN/index"},{"name":"vant","url":"https://vant-contrib.gitee.io/vant/#/zh-CN"},{"name":"tdesign","url":"https://tdesign.tencent.com/"},{"name":"前端开发UI素材","url":"https://www.creative-tim.com/"},{"name":"vue-treeselect","url":"https://www.vue-treeselect.cn/"},{"name":"semi","url":"https://semi.design/zh-CN/"},{"name":"tailwindcss","url":"https://www.tailwindcss.cn/"},{"name":"fontawesome图标","url":"https://fontawesome.com/"},{"name":"vantajs动画","url":"https://www.vantajs.com/"},{"name":"视差效果pushinjs","url":"https://nateplusplus.github.io/pushin/"}]}],"photography":[{"thumbnail":"https://thumbnail.jpg","photo":"https://photo.jpg","title":"This is title.","icon":"camera","place":"China"},{"thumbnail":"https://thumbnail.jpg","photo":"https://photo.jpg","title":"This is title.","icon":"camera","place":"China"}]}},"excerpt":"<h2 id=\"ios平板手机免登录免费看全网爱奇艺、腾讯VIP视频教程！！！\"><a href=\"#ios平板手机免登录免费看全网爱奇艺、腾讯VIP视频教程！！！\" class=\"headerlink\" title=\"ios平板手机免登录免费看全网爱奇艺、腾讯VIP视频教程！！！\"></a>ios平板手机免登录免费看全网爱奇艺、腾讯VIP视频教程！！！</h2><p>废话不多说，这个教程很简单直接上图！<br>不管是手机还是平板在设置中找到Safari浏览器，找到扩展。<br><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/h/IMG_0270.PNG\" alt=\"image.png\"></p>","more":"<p>扩展进去之后直接点更多扩展，会跳转到appStore应用商店<br><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/h/IMG_0271.PNG\" alt=\"image.png\"></p>\n<p>在应用商店里找到Stay-用户脚本扩展管理器(油猴)下载安装<br><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/h/IMG_0272.PNG\" alt=\"image.png\"></p>\n<p>打开Stay然后点击右上角的加号会弹出4个选项，这里选择“从GreasyFork导入”<br><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/h/IMG_0273.PNG\" alt=\"image.png\"></p>\n<p>GreasyFork是一个浏览器脚本库网站，里面有很多浏览器脚本，还有抢购脚本哦~<br>因为是手机和ipad所以我们得选择支持手机和移动端并且是支持Safari浏览器的插件<br>这里我们找到下图第二个“B站哔哩哔哩…”这个脚本，找不到的可以搜索下，或者点击右边总安装数排第二的插件。<br><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/h/IMG_0274.PNG\" alt=\"image.png\"></p>\n<p>点进去之后可以看下这个插件的详细功能介绍，然后直接安装此脚本。<br><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/h/IMG_0275.PNG\" alt=\"image.png\"></p>\n<p>提示成功之后，再点击右上角的创建按钮。<br><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/h/IMG_0276.PNG\" alt=\"image.png\"></p>\n<p>然后显示已激活就说明脚本安装成功了。<br><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/IMG_0277.PNG\" alt=\"image.png\"></p>\n<p>然后打开我们的Safari浏览器就可以看到地址栏里已经显示了当前运行的脚本<br><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/h/IMG_0278.PNG\" alt=\"image.png\"></p>\n<p>如果没有显示再去设置扩展里看下是否已经打开<br><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/h/IMG_0279.PNG\" alt=\"image.png\"></p>\n<p>这时候打开腾讯视频，我们选择一个VIP电影来看下。<br>此时我们是未登录状态下而且提示此片是会员才能看。<br>但视频的左边出现了两个图标一个VIP和一个火箭图标。<br><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/h/IMG_0280.PNG\" alt=\"image.png\"></p>\n<p>VIP图标我们可以切换视频源地址<br><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/IMG_0282.PNG\" alt=\"image.png\"></p>\n<p>点击火箭图标，直接就能跳转观看超清VIP电影了！<br><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/h/IMG_0281.PNG\" alt=\"image.png\"></p>\n<p>再也不用花钱看电视啦！</p>"},{"title":"vscode eslint 规则","date":"2021-02-25T10:01:00.000Z","_content":"### vscode eslint 规则\n<!-- more -->\n```javascript\n\"no-alert\": 0,//禁止使用alert confirm prompt\n\"no-array-constructor\": 2,//禁止使用数组构造器\n\"no-bitwise\": 0,//禁止使用按位运算符\n\"no-caller\": 1,//禁止使用arguments.caller或arguments.callee\n\"no-catch-shadow\": 2,//禁止catch子句参数与外部作用域变量同名\n\"no-class-assign\": 2,//禁止给类赋值\n\"no-cond-assign\": 2,//禁止在条件表达式中使用赋值语句\n\"no-console\": 2,//禁止使用console\n\"no-const-assign\": 2,//禁止修改const声明的变量\n\"no-constant-condition\": 2,//禁止在条件中使用常量表达式 if(true) if(1)\n\"no-continue\": 0,//禁止使用continue\n\"no-control-regex\": 2,//禁止在正则表达式中使用控制字符\n\"no-debugger\": 2,//禁止使用debugger\n\"no-delete-var\": 2,//不能对var声明的变量使用delete操作符\n\"no-div-regex\": 1,//不能使用看起来像除法的正则表达式/=foo/\n\"no-dupe-keys\": 2,//在创建对象字面量时不允许键重复 {a:1,a:1}\n\"no-dupe-args\": 2,//函数参数不能重复\n\"no-duplicate-case\": 2,//switch中的case标签不能重复\n\"no-else-return\": 2,//如果if语句里面有return,后面不能跟else语句\n\"no-empty\": 2,//块语句中的内容不能为空\n\"no-empty-character-class\": 2,//正则表达式中的[]内容不能为空\n\"no-empty-label\": 2,//禁止使用空label\n\"no-eq-null\": 2,//禁止对null使用==或!=运算符\n\"no-eval\": 1,//禁止使用eval\n\"no-ex-assign\": 2,//禁止给catch语句中的异常参数赋值\n\"no-extend-native\": 2,//禁止扩展native对象\n\"no-extra-bind\": 2,//禁止不必要的函数绑定\n\"no-extra-boolean-cast\": 2,//禁止不必要的bool转换\n\"no-extra-parens\": 2,//禁止非必要的括号\n\"no-extra-semi\": 2,//禁止多余的冒号\n\"no-fallthrough\": 1,//禁止switch穿透\n\"no-floating-decimal\": 2,//禁止省略浮点数中的0 .5 3.\n\"no-func-assign\": 2,//禁止重复的函数声明\n\"no-implicit-coercion\": 1,//禁止隐式转换\n\"no-implied-eval\": 2,//禁止使用隐式eval\n\"no-inline-comments\": 0,//禁止行内备注\n\"no-inner-declarations\": [2, \"functions\"],//禁止在块语句中使用声明（变量或函数）\n\"no-invalid-regexp\": 2,//禁止无效的正则表达式\n\"no-invalid-this\": 2,//禁止无效的this，只能用在构造器，类，对象字面量\n\"no-irregular-whitespace\": 2,//不能有不规则的空格\n\"no-iterator\": 2,//禁止使用__iterator__ 属性\n\"no-label-var\": 2,//label名不能与var声明的变量名相同\n\"no-labels\": 2,//禁止标签声明\n\"no-lone-blocks\": 2,//禁止不必要的嵌套块\n\"no-lonely-if\": 2,//禁止else语句内只有if语句\n\"no-loop-func\": 1,//禁止在循环中使用函数（如果没有引用外部变量不形成闭包就可以）\n\"no-mixed-requires\": [0, false],//声明时不能混用声明类型\n\"no-mixed-spaces-and-tabs\": [2, false],//禁止混用tab和空格\n\"linebreak-style\": [0, \"windows\"],//换行风格\n\"no-multi-spaces\": 1,//不能用多余的空格\n\"no-multi-str\": 2,//字符串不能用\\换行\n\"no-multiple-empty-lines\": [1, {\"max\": 2}],//空行最多不能超过2行\n\"no-native-reassign\": 2,//不能重写native对象\n\"no-negated-in-lhs\": 2,//in 操作符的左边不能有!\n\"no-nested-ternary\": 0,//禁止使用嵌套的三目运算\n\"no-new\": 1,//禁止在使用new构造一个实例后不赋值\n\"no-new-func\": 1,//禁止使用new Function\n\"no-new-object\": 2,//禁止使用new Object()\n\"no-new-require\": 2,//禁止使用new require\n\"no-new-wrappers\": 2,//禁止使用new创建包装实例，new String new Boolean new Number\n\"no-obj-calls\": 2,//不能调用内置的全局对象，比如Math() JSON()\n\"no-octal\": 2,//禁止使用八进制数字\n\"no-octal-escape\": 2,//禁止使用八进制转义序列\n\"no-param-reassign\": 2,//禁止给参数重新赋值\n\"no-path-concat\": 0,//node中不能使用__dirname或__filename做路径拼接\n\"no-plusplus\": 0,//禁止使用++，--\n\"no-process-env\": 0,//禁止使用process.env\n\"no-process-exit\": 0,//禁止使用process.exit()\n\"no-proto\": 2,//禁止使用__proto__属性\n\"no-redeclare\": 2,//禁止重复声明变量\n\"no-regex-spaces\": 2,//禁止在正则表达式字面量中使用多个空格 /foo bar/\n\"no-restricted-modules\": 0,//如果禁用了指定模块，使用就会报错\n\"no-return-assign\": 1,//return 语句中不能有赋值表达式\n\"no-script-url\": 0,//禁止使用javascript:void(0)\n\"no-self-compare\": 2,//不能比较自身\n\"no-sequences\": 0,//禁止使用逗号运算符\n\"no-shadow\": 2,//外部作用域中的变量不能与它所包含的作用域中的变量或参数同名\n\"no-shadow-restricted-names\": 2,//严格模式中规定的限制标识符不能作为声明时的变量名使用\n\"no-spaced-func\": 2,//函数调用时 函数名与()之间不能有空格\n\"no-sparse-arrays\": 2,//禁止稀疏数组， [1,,2]\n\"no-sync\": 0,//nodejs 禁止同步方法\n\"no-ternary\": 0,//禁止使用三目运算符\n\"no-trailing-spaces\": 1,//一行结束后面不要有空格\n\"no-this-before-super\": 0,//在调用super()之前不能使用this或super\n\"no-throw-literal\": 2,//禁止抛出字面量错误 throw \"error\";\n\"no-undef\": 1,//不能有未定义的变量\n\"no-undef-init\": 2,//变量初始化时不能直接给它赋值为undefined\n\"no-undefined\": 2,//不能使用undefined\n\"no-unexpected-multiline\": 2,//避免多行表达式\n\"no-underscore-dangle\": 1,//标识符不能以_开头或结尾\n\"no-unneeded-ternary\": 2,//禁止不必要的嵌套 var isYes = answer === 1 ? true : false;\n\"no-unreachable\": 2,//不能有无法执行的代码\n\"no-unused-expressions\": 2,//禁止无用的表达式\n\"no-unused-vars\": [2, {\"vars\": \"all\", \"args\": \"after-used\"}],//不能有声明后未被使用的变量或参数\n\"no-use-before-define\": 2,//未定义前不能使用\n\"no-useless-call\": 2,//禁止不必要的call和apply\n\"no-void\": 2,//禁用void操作符\n\"no-var\": 0,//禁用var，用let和const代替\n\"no-warning-comments\": [1, { \"terms\": [\"todo\", \"fixme\", \"xxx\"], \"location\": \"start\" }],//不能有警告备注\n\"no-with\": 2,//禁用with\n\"array-bracket-spacing\": [2, \"never\"],//是否允许非空数组里面有多余的空格\n\"arrow-parens\": 0,//箭头函数用小括号括起来\n\"arrow-spacing\": 0,//=>的前/后括号\n\"accessor-pairs\": 0,//在对象中使用getter/setter\n\"block-scoped-var\": 0,//块语句中使用var\n\"brace-style\": [1, \"1tbs\"],//大括号风格\n\"callback-return\": 1,//避免多次调用回调什么的\n\"camelcase\": 2,//强制驼峰法命名\n\"comma-dangle\": [2, \"never\"],//对象字面量项尾不能有逗号\n\"comma-spacing\": 0,//逗号前后的空格\n\"comma-style\": [2, \"last\"],//逗号风格，换行时在行首还是行尾\n\"complexity\": [0, 11],//循环复杂度\n\"computed-property-spacing\": [0, \"never\"],//是否允许计算后的键名什么的\n\"consistent-return\": 0,//return 后面是否允许省略\n\"consistent-this\": [2, \"that\"],//this别名\n\"constructor-super\": 0,//非派生类不能调用super，派生类必须调用super\n\"curly\": [2, \"all\"],//必须使用 if(){} 中的{}\n\"default-case\": 2,//switch语句最后必须有default\n\"dot-location\": 0,//对象访问符的位置，换行的时候在行首还是行尾\n\"dot-notation\": [0, { \"allowKeywords\": true }],//避免不必要的方括号\n\"eol-last\": 0,//文件以单一的换行符结束\n\"eqeqeq\": 2,//必须使用全等\n\"func-names\": 0,//函数表达式必须有名字\n\"func-style\": [0, \"declaration\"],//函数风格，规定只能使用函数声明/函数表达式\n\"generator-star-spacing\": 0,//生成器函数*的前后空格\n\"guard-for-in\": 0,//for in循环要用if语句过滤\n\"handle-callback-err\": 0,//nodejs 处理错误\n\"id-length\": 0,//变量名长度\n\"indent\": [2, 4],//缩进风格\n\"init-declarations\": 0,//声明时必须赋初值\n\"key-spacing\": [0, { \"beforeColon\": false, \"afterColon\": true }],//对象字面量中冒号的前后空格\n\"lines-around-comment\": 0,//行前/行后备注\n\"max-depth\": [0, 4],//嵌套块深度\n\"max-len\": [0, 80, 4],//字符串最大长度\n\"max-nested-callbacks\": [0, 2],//回调嵌套深度\n\"max-params\": [0, 3],//函数最多只能有3个参数\n\"max-statements\": [0, 10],//函数内最多有几个声明\n\"new-cap\": 2,//函数名首行大写必须使用new方式调用，首行小写必须用不带new方式调用\n\"new-parens\": 2,//new时必须加小括号\n\"newline-after-var\": 2,//变量声明后是否需要空一行\n\"object-curly-spacing\": [0, \"never\"],//大括号内是否允许不必要的空格\n\"object-shorthand\": 0,//强制对象字面量缩写语法\n\"one-var\": 1,//连续声明\n\"operator-assignment\": [0, \"always\"],//赋值运算符 += -=什么的\n\"operator-linebreak\": [2, \"after\"],//换行时运算符在行尾还是行首\n\"padded-blocks\": 0,//块语句内行首行尾是否要空行\n\"prefer-const\": 0,//首选const\n\"prefer-spread\": 0,//首选展开运算\n\"prefer-reflect\": 0,//首选Reflect的方法\n\"quotes\": [1, \"single\"],//引号类型 `` \"\" ''\n\"quote-props\":[2, \"always\"],//对象字面量中的属性名是否强制双引号\n\"radix\": 2,//parseInt必须指定第二个参数\n\"id-match\": 0,//命名检测\n\"require-yield\": 0,//生成器函数必须有yield\n\"semi\": [2, \"always\"],//语句强制分号结尾\n\"semi-spacing\": [0, {\"before\": false, \"after\": true}],//分号前后空格\n\"sort-vars\": 0,//变量声明时排序\n\"space-after-keywords\": [0, \"always\"],//关键字后面是否要空一格\n\"space-before-blocks\": [0, \"always\"],//不以新行开始的块{前面要不要有空格\n\"space-before-function-paren\": [0, \"always\"],//函数定义时括号前面要不要有空格\n\"space-in-parens\": [0, \"never\"],//小括号里面要不要有空格\n\"space-infix-ops\": 0,//中缀操作符周围要不要有空格\n\"space-return-throw-case\": 2,//return throw case后面要不要加空格\n\"space-unary-ops\": [0, { \"words\": true, \"nonwords\": false }],//一元运算符的前/后要不要加空格\n\"spaced-comment\": 0,//注释风格要不要有空格什么的\n\"strict\": 2,//使用严格模式\n\"use-isnan\": 2,//禁止比较时使用NaN，只能用isNaN()\n\"valid-jsdoc\": 0,//jsdoc规则\n\"valid-typeof\": 2,//必须使用合法的typeof的值\n\"vars-on-top\": 2,//var必须放在作用域顶部\n\"wrap-iife\": [2, \"inside\"],//立即执行函数表达式的小括号风格\n\"wrap-regex\": 0,//正则表达式字面量用小括号包起来\n\"yoda\": [2, \"never\"]//禁止尤达条件\n```\n","source":"_posts/vscode-eslint-规则.md","raw":"---\ntitle: vscode eslint 规则\ndate: 2021-02-25 18:01\ntags:\n---\n### vscode eslint 规则\n<!-- more -->\n```javascript\n\"no-alert\": 0,//禁止使用alert confirm prompt\n\"no-array-constructor\": 2,//禁止使用数组构造器\n\"no-bitwise\": 0,//禁止使用按位运算符\n\"no-caller\": 1,//禁止使用arguments.caller或arguments.callee\n\"no-catch-shadow\": 2,//禁止catch子句参数与外部作用域变量同名\n\"no-class-assign\": 2,//禁止给类赋值\n\"no-cond-assign\": 2,//禁止在条件表达式中使用赋值语句\n\"no-console\": 2,//禁止使用console\n\"no-const-assign\": 2,//禁止修改const声明的变量\n\"no-constant-condition\": 2,//禁止在条件中使用常量表达式 if(true) if(1)\n\"no-continue\": 0,//禁止使用continue\n\"no-control-regex\": 2,//禁止在正则表达式中使用控制字符\n\"no-debugger\": 2,//禁止使用debugger\n\"no-delete-var\": 2,//不能对var声明的变量使用delete操作符\n\"no-div-regex\": 1,//不能使用看起来像除法的正则表达式/=foo/\n\"no-dupe-keys\": 2,//在创建对象字面量时不允许键重复 {a:1,a:1}\n\"no-dupe-args\": 2,//函数参数不能重复\n\"no-duplicate-case\": 2,//switch中的case标签不能重复\n\"no-else-return\": 2,//如果if语句里面有return,后面不能跟else语句\n\"no-empty\": 2,//块语句中的内容不能为空\n\"no-empty-character-class\": 2,//正则表达式中的[]内容不能为空\n\"no-empty-label\": 2,//禁止使用空label\n\"no-eq-null\": 2,//禁止对null使用==或!=运算符\n\"no-eval\": 1,//禁止使用eval\n\"no-ex-assign\": 2,//禁止给catch语句中的异常参数赋值\n\"no-extend-native\": 2,//禁止扩展native对象\n\"no-extra-bind\": 2,//禁止不必要的函数绑定\n\"no-extra-boolean-cast\": 2,//禁止不必要的bool转换\n\"no-extra-parens\": 2,//禁止非必要的括号\n\"no-extra-semi\": 2,//禁止多余的冒号\n\"no-fallthrough\": 1,//禁止switch穿透\n\"no-floating-decimal\": 2,//禁止省略浮点数中的0 .5 3.\n\"no-func-assign\": 2,//禁止重复的函数声明\n\"no-implicit-coercion\": 1,//禁止隐式转换\n\"no-implied-eval\": 2,//禁止使用隐式eval\n\"no-inline-comments\": 0,//禁止行内备注\n\"no-inner-declarations\": [2, \"functions\"],//禁止在块语句中使用声明（变量或函数）\n\"no-invalid-regexp\": 2,//禁止无效的正则表达式\n\"no-invalid-this\": 2,//禁止无效的this，只能用在构造器，类，对象字面量\n\"no-irregular-whitespace\": 2,//不能有不规则的空格\n\"no-iterator\": 2,//禁止使用__iterator__ 属性\n\"no-label-var\": 2,//label名不能与var声明的变量名相同\n\"no-labels\": 2,//禁止标签声明\n\"no-lone-blocks\": 2,//禁止不必要的嵌套块\n\"no-lonely-if\": 2,//禁止else语句内只有if语句\n\"no-loop-func\": 1,//禁止在循环中使用函数（如果没有引用外部变量不形成闭包就可以）\n\"no-mixed-requires\": [0, false],//声明时不能混用声明类型\n\"no-mixed-spaces-and-tabs\": [2, false],//禁止混用tab和空格\n\"linebreak-style\": [0, \"windows\"],//换行风格\n\"no-multi-spaces\": 1,//不能用多余的空格\n\"no-multi-str\": 2,//字符串不能用\\换行\n\"no-multiple-empty-lines\": [1, {\"max\": 2}],//空行最多不能超过2行\n\"no-native-reassign\": 2,//不能重写native对象\n\"no-negated-in-lhs\": 2,//in 操作符的左边不能有!\n\"no-nested-ternary\": 0,//禁止使用嵌套的三目运算\n\"no-new\": 1,//禁止在使用new构造一个实例后不赋值\n\"no-new-func\": 1,//禁止使用new Function\n\"no-new-object\": 2,//禁止使用new Object()\n\"no-new-require\": 2,//禁止使用new require\n\"no-new-wrappers\": 2,//禁止使用new创建包装实例，new String new Boolean new Number\n\"no-obj-calls\": 2,//不能调用内置的全局对象，比如Math() JSON()\n\"no-octal\": 2,//禁止使用八进制数字\n\"no-octal-escape\": 2,//禁止使用八进制转义序列\n\"no-param-reassign\": 2,//禁止给参数重新赋值\n\"no-path-concat\": 0,//node中不能使用__dirname或__filename做路径拼接\n\"no-plusplus\": 0,//禁止使用++，--\n\"no-process-env\": 0,//禁止使用process.env\n\"no-process-exit\": 0,//禁止使用process.exit()\n\"no-proto\": 2,//禁止使用__proto__属性\n\"no-redeclare\": 2,//禁止重复声明变量\n\"no-regex-spaces\": 2,//禁止在正则表达式字面量中使用多个空格 /foo bar/\n\"no-restricted-modules\": 0,//如果禁用了指定模块，使用就会报错\n\"no-return-assign\": 1,//return 语句中不能有赋值表达式\n\"no-script-url\": 0,//禁止使用javascript:void(0)\n\"no-self-compare\": 2,//不能比较自身\n\"no-sequences\": 0,//禁止使用逗号运算符\n\"no-shadow\": 2,//外部作用域中的变量不能与它所包含的作用域中的变量或参数同名\n\"no-shadow-restricted-names\": 2,//严格模式中规定的限制标识符不能作为声明时的变量名使用\n\"no-spaced-func\": 2,//函数调用时 函数名与()之间不能有空格\n\"no-sparse-arrays\": 2,//禁止稀疏数组， [1,,2]\n\"no-sync\": 0,//nodejs 禁止同步方法\n\"no-ternary\": 0,//禁止使用三目运算符\n\"no-trailing-spaces\": 1,//一行结束后面不要有空格\n\"no-this-before-super\": 0,//在调用super()之前不能使用this或super\n\"no-throw-literal\": 2,//禁止抛出字面量错误 throw \"error\";\n\"no-undef\": 1,//不能有未定义的变量\n\"no-undef-init\": 2,//变量初始化时不能直接给它赋值为undefined\n\"no-undefined\": 2,//不能使用undefined\n\"no-unexpected-multiline\": 2,//避免多行表达式\n\"no-underscore-dangle\": 1,//标识符不能以_开头或结尾\n\"no-unneeded-ternary\": 2,//禁止不必要的嵌套 var isYes = answer === 1 ? true : false;\n\"no-unreachable\": 2,//不能有无法执行的代码\n\"no-unused-expressions\": 2,//禁止无用的表达式\n\"no-unused-vars\": [2, {\"vars\": \"all\", \"args\": \"after-used\"}],//不能有声明后未被使用的变量或参数\n\"no-use-before-define\": 2,//未定义前不能使用\n\"no-useless-call\": 2,//禁止不必要的call和apply\n\"no-void\": 2,//禁用void操作符\n\"no-var\": 0,//禁用var，用let和const代替\n\"no-warning-comments\": [1, { \"terms\": [\"todo\", \"fixme\", \"xxx\"], \"location\": \"start\" }],//不能有警告备注\n\"no-with\": 2,//禁用with\n\"array-bracket-spacing\": [2, \"never\"],//是否允许非空数组里面有多余的空格\n\"arrow-parens\": 0,//箭头函数用小括号括起来\n\"arrow-spacing\": 0,//=>的前/后括号\n\"accessor-pairs\": 0,//在对象中使用getter/setter\n\"block-scoped-var\": 0,//块语句中使用var\n\"brace-style\": [1, \"1tbs\"],//大括号风格\n\"callback-return\": 1,//避免多次调用回调什么的\n\"camelcase\": 2,//强制驼峰法命名\n\"comma-dangle\": [2, \"never\"],//对象字面量项尾不能有逗号\n\"comma-spacing\": 0,//逗号前后的空格\n\"comma-style\": [2, \"last\"],//逗号风格，换行时在行首还是行尾\n\"complexity\": [0, 11],//循环复杂度\n\"computed-property-spacing\": [0, \"never\"],//是否允许计算后的键名什么的\n\"consistent-return\": 0,//return 后面是否允许省略\n\"consistent-this\": [2, \"that\"],//this别名\n\"constructor-super\": 0,//非派生类不能调用super，派生类必须调用super\n\"curly\": [2, \"all\"],//必须使用 if(){} 中的{}\n\"default-case\": 2,//switch语句最后必须有default\n\"dot-location\": 0,//对象访问符的位置，换行的时候在行首还是行尾\n\"dot-notation\": [0, { \"allowKeywords\": true }],//避免不必要的方括号\n\"eol-last\": 0,//文件以单一的换行符结束\n\"eqeqeq\": 2,//必须使用全等\n\"func-names\": 0,//函数表达式必须有名字\n\"func-style\": [0, \"declaration\"],//函数风格，规定只能使用函数声明/函数表达式\n\"generator-star-spacing\": 0,//生成器函数*的前后空格\n\"guard-for-in\": 0,//for in循环要用if语句过滤\n\"handle-callback-err\": 0,//nodejs 处理错误\n\"id-length\": 0,//变量名长度\n\"indent\": [2, 4],//缩进风格\n\"init-declarations\": 0,//声明时必须赋初值\n\"key-spacing\": [0, { \"beforeColon\": false, \"afterColon\": true }],//对象字面量中冒号的前后空格\n\"lines-around-comment\": 0,//行前/行后备注\n\"max-depth\": [0, 4],//嵌套块深度\n\"max-len\": [0, 80, 4],//字符串最大长度\n\"max-nested-callbacks\": [0, 2],//回调嵌套深度\n\"max-params\": [0, 3],//函数最多只能有3个参数\n\"max-statements\": [0, 10],//函数内最多有几个声明\n\"new-cap\": 2,//函数名首行大写必须使用new方式调用，首行小写必须用不带new方式调用\n\"new-parens\": 2,//new时必须加小括号\n\"newline-after-var\": 2,//变量声明后是否需要空一行\n\"object-curly-spacing\": [0, \"never\"],//大括号内是否允许不必要的空格\n\"object-shorthand\": 0,//强制对象字面量缩写语法\n\"one-var\": 1,//连续声明\n\"operator-assignment\": [0, \"always\"],//赋值运算符 += -=什么的\n\"operator-linebreak\": [2, \"after\"],//换行时运算符在行尾还是行首\n\"padded-blocks\": 0,//块语句内行首行尾是否要空行\n\"prefer-const\": 0,//首选const\n\"prefer-spread\": 0,//首选展开运算\n\"prefer-reflect\": 0,//首选Reflect的方法\n\"quotes\": [1, \"single\"],//引号类型 `` \"\" ''\n\"quote-props\":[2, \"always\"],//对象字面量中的属性名是否强制双引号\n\"radix\": 2,//parseInt必须指定第二个参数\n\"id-match\": 0,//命名检测\n\"require-yield\": 0,//生成器函数必须有yield\n\"semi\": [2, \"always\"],//语句强制分号结尾\n\"semi-spacing\": [0, {\"before\": false, \"after\": true}],//分号前后空格\n\"sort-vars\": 0,//变量声明时排序\n\"space-after-keywords\": [0, \"always\"],//关键字后面是否要空一格\n\"space-before-blocks\": [0, \"always\"],//不以新行开始的块{前面要不要有空格\n\"space-before-function-paren\": [0, \"always\"],//函数定义时括号前面要不要有空格\n\"space-in-parens\": [0, \"never\"],//小括号里面要不要有空格\n\"space-infix-ops\": 0,//中缀操作符周围要不要有空格\n\"space-return-throw-case\": 2,//return throw case后面要不要加空格\n\"space-unary-ops\": [0, { \"words\": true, \"nonwords\": false }],//一元运算符的前/后要不要加空格\n\"spaced-comment\": 0,//注释风格要不要有空格什么的\n\"strict\": 2,//使用严格模式\n\"use-isnan\": 2,//禁止比较时使用NaN，只能用isNaN()\n\"valid-jsdoc\": 0,//jsdoc规则\n\"valid-typeof\": 2,//必须使用合法的typeof的值\n\"vars-on-top\": 2,//var必须放在作用域顶部\n\"wrap-iife\": [2, \"inside\"],//立即执行函数表达式的小括号风格\n\"wrap-regex\": 0,//正则表达式字面量用小括号包起来\n\"yoda\": [2, \"never\"]//禁止尤达条件\n```\n","slug":"vscode-eslint-规则","published":1,"updated":"2022-11-02T04:24:55.800Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clagmayfi00096c849yqahwxv","content":"<h3 id=\"vscode-eslint-规则\"><a href=\"#vscode-eslint-规则\" class=\"headerlink\" title=\"vscode eslint 规则\"></a>vscode eslint 规则</h3><span id=\"more\"></span>\n<pre><code class=\"javascript\">&quot;no-alert&quot;: 0,//禁止使用alert confirm prompt\n&quot;no-array-constructor&quot;: 2,//禁止使用数组构造器\n&quot;no-bitwise&quot;: 0,//禁止使用按位运算符\n&quot;no-caller&quot;: 1,//禁止使用arguments.caller或arguments.callee\n&quot;no-catch-shadow&quot;: 2,//禁止catch子句参数与外部作用域变量同名\n&quot;no-class-assign&quot;: 2,//禁止给类赋值\n&quot;no-cond-assign&quot;: 2,//禁止在条件表达式中使用赋值语句\n&quot;no-console&quot;: 2,//禁止使用console\n&quot;no-const-assign&quot;: 2,//禁止修改const声明的变量\n&quot;no-constant-condition&quot;: 2,//禁止在条件中使用常量表达式 if(true) if(1)\n&quot;no-continue&quot;: 0,//禁止使用continue\n&quot;no-control-regex&quot;: 2,//禁止在正则表达式中使用控制字符\n&quot;no-debugger&quot;: 2,//禁止使用debugger\n&quot;no-delete-var&quot;: 2,//不能对var声明的变量使用delete操作符\n&quot;no-div-regex&quot;: 1,//不能使用看起来像除法的正则表达式/=foo/\n&quot;no-dupe-keys&quot;: 2,//在创建对象字面量时不允许键重复 &#123;a:1,a:1&#125;\n&quot;no-dupe-args&quot;: 2,//函数参数不能重复\n&quot;no-duplicate-case&quot;: 2,//switch中的case标签不能重复\n&quot;no-else-return&quot;: 2,//如果if语句里面有return,后面不能跟else语句\n&quot;no-empty&quot;: 2,//块语句中的内容不能为空\n&quot;no-empty-character-class&quot;: 2,//正则表达式中的[]内容不能为空\n&quot;no-empty-label&quot;: 2,//禁止使用空label\n&quot;no-eq-null&quot;: 2,//禁止对null使用==或!=运算符\n&quot;no-eval&quot;: 1,//禁止使用eval\n&quot;no-ex-assign&quot;: 2,//禁止给catch语句中的异常参数赋值\n&quot;no-extend-native&quot;: 2,//禁止扩展native对象\n&quot;no-extra-bind&quot;: 2,//禁止不必要的函数绑定\n&quot;no-extra-boolean-cast&quot;: 2,//禁止不必要的bool转换\n&quot;no-extra-parens&quot;: 2,//禁止非必要的括号\n&quot;no-extra-semi&quot;: 2,//禁止多余的冒号\n&quot;no-fallthrough&quot;: 1,//禁止switch穿透\n&quot;no-floating-decimal&quot;: 2,//禁止省略浮点数中的0 .5 3.\n&quot;no-func-assign&quot;: 2,//禁止重复的函数声明\n&quot;no-implicit-coercion&quot;: 1,//禁止隐式转换\n&quot;no-implied-eval&quot;: 2,//禁止使用隐式eval\n&quot;no-inline-comments&quot;: 0,//禁止行内备注\n&quot;no-inner-declarations&quot;: [2, &quot;functions&quot;],//禁止在块语句中使用声明（变量或函数）\n&quot;no-invalid-regexp&quot;: 2,//禁止无效的正则表达式\n&quot;no-invalid-this&quot;: 2,//禁止无效的this，只能用在构造器，类，对象字面量\n&quot;no-irregular-whitespace&quot;: 2,//不能有不规则的空格\n&quot;no-iterator&quot;: 2,//禁止使用__iterator__ 属性\n&quot;no-label-var&quot;: 2,//label名不能与var声明的变量名相同\n&quot;no-labels&quot;: 2,//禁止标签声明\n&quot;no-lone-blocks&quot;: 2,//禁止不必要的嵌套块\n&quot;no-lonely-if&quot;: 2,//禁止else语句内只有if语句\n&quot;no-loop-func&quot;: 1,//禁止在循环中使用函数（如果没有引用外部变量不形成闭包就可以）\n&quot;no-mixed-requires&quot;: [0, false],//声明时不能混用声明类型\n&quot;no-mixed-spaces-and-tabs&quot;: [2, false],//禁止混用tab和空格\n&quot;linebreak-style&quot;: [0, &quot;windows&quot;],//换行风格\n&quot;no-multi-spaces&quot;: 1,//不能用多余的空格\n&quot;no-multi-str&quot;: 2,//字符串不能用\\换行\n&quot;no-multiple-empty-lines&quot;: [1, &#123;&quot;max&quot;: 2&#125;],//空行最多不能超过2行\n&quot;no-native-reassign&quot;: 2,//不能重写native对象\n&quot;no-negated-in-lhs&quot;: 2,//in 操作符的左边不能有!\n&quot;no-nested-ternary&quot;: 0,//禁止使用嵌套的三目运算\n&quot;no-new&quot;: 1,//禁止在使用new构造一个实例后不赋值\n&quot;no-new-func&quot;: 1,//禁止使用new Function\n&quot;no-new-object&quot;: 2,//禁止使用new Object()\n&quot;no-new-require&quot;: 2,//禁止使用new require\n&quot;no-new-wrappers&quot;: 2,//禁止使用new创建包装实例，new String new Boolean new Number\n&quot;no-obj-calls&quot;: 2,//不能调用内置的全局对象，比如Math() JSON()\n&quot;no-octal&quot;: 2,//禁止使用八进制数字\n&quot;no-octal-escape&quot;: 2,//禁止使用八进制转义序列\n&quot;no-param-reassign&quot;: 2,//禁止给参数重新赋值\n&quot;no-path-concat&quot;: 0,//node中不能使用__dirname或__filename做路径拼接\n&quot;no-plusplus&quot;: 0,//禁止使用++，--\n&quot;no-process-env&quot;: 0,//禁止使用process.env\n&quot;no-process-exit&quot;: 0,//禁止使用process.exit()\n&quot;no-proto&quot;: 2,//禁止使用__proto__属性\n&quot;no-redeclare&quot;: 2,//禁止重复声明变量\n&quot;no-regex-spaces&quot;: 2,//禁止在正则表达式字面量中使用多个空格 /foo bar/\n&quot;no-restricted-modules&quot;: 0,//如果禁用了指定模块，使用就会报错\n&quot;no-return-assign&quot;: 1,//return 语句中不能有赋值表达式\n&quot;no-script-url&quot;: 0,//禁止使用javascript:void(0)\n&quot;no-self-compare&quot;: 2,//不能比较自身\n&quot;no-sequences&quot;: 0,//禁止使用逗号运算符\n&quot;no-shadow&quot;: 2,//外部作用域中的变量不能与它所包含的作用域中的变量或参数同名\n&quot;no-shadow-restricted-names&quot;: 2,//严格模式中规定的限制标识符不能作为声明时的变量名使用\n&quot;no-spaced-func&quot;: 2,//函数调用时 函数名与()之间不能有空格\n&quot;no-sparse-arrays&quot;: 2,//禁止稀疏数组， [1,,2]\n&quot;no-sync&quot;: 0,//nodejs 禁止同步方法\n&quot;no-ternary&quot;: 0,//禁止使用三目运算符\n&quot;no-trailing-spaces&quot;: 1,//一行结束后面不要有空格\n&quot;no-this-before-super&quot;: 0,//在调用super()之前不能使用this或super\n&quot;no-throw-literal&quot;: 2,//禁止抛出字面量错误 throw &quot;error&quot;;\n&quot;no-undef&quot;: 1,//不能有未定义的变量\n&quot;no-undef-init&quot;: 2,//变量初始化时不能直接给它赋值为undefined\n&quot;no-undefined&quot;: 2,//不能使用undefined\n&quot;no-unexpected-multiline&quot;: 2,//避免多行表达式\n&quot;no-underscore-dangle&quot;: 1,//标识符不能以_开头或结尾\n&quot;no-unneeded-ternary&quot;: 2,//禁止不必要的嵌套 var isYes = answer === 1 ? true : false;\n&quot;no-unreachable&quot;: 2,//不能有无法执行的代码\n&quot;no-unused-expressions&quot;: 2,//禁止无用的表达式\n&quot;no-unused-vars&quot;: [2, &#123;&quot;vars&quot;: &quot;all&quot;, &quot;args&quot;: &quot;after-used&quot;&#125;],//不能有声明后未被使用的变量或参数\n&quot;no-use-before-define&quot;: 2,//未定义前不能使用\n&quot;no-useless-call&quot;: 2,//禁止不必要的call和apply\n&quot;no-void&quot;: 2,//禁用void操作符\n&quot;no-var&quot;: 0,//禁用var，用let和const代替\n&quot;no-warning-comments&quot;: [1, &#123; &quot;terms&quot;: [&quot;todo&quot;, &quot;fixme&quot;, &quot;xxx&quot;], &quot;location&quot;: &quot;start&quot; &#125;],//不能有警告备注\n&quot;no-with&quot;: 2,//禁用with\n&quot;array-bracket-spacing&quot;: [2, &quot;never&quot;],//是否允许非空数组里面有多余的空格\n&quot;arrow-parens&quot;: 0,//箭头函数用小括号括起来\n&quot;arrow-spacing&quot;: 0,//=&gt;的前/后括号\n&quot;accessor-pairs&quot;: 0,//在对象中使用getter/setter\n&quot;block-scoped-var&quot;: 0,//块语句中使用var\n&quot;brace-style&quot;: [1, &quot;1tbs&quot;],//大括号风格\n&quot;callback-return&quot;: 1,//避免多次调用回调什么的\n&quot;camelcase&quot;: 2,//强制驼峰法命名\n&quot;comma-dangle&quot;: [2, &quot;never&quot;],//对象字面量项尾不能有逗号\n&quot;comma-spacing&quot;: 0,//逗号前后的空格\n&quot;comma-style&quot;: [2, &quot;last&quot;],//逗号风格，换行时在行首还是行尾\n&quot;complexity&quot;: [0, 11],//循环复杂度\n&quot;computed-property-spacing&quot;: [0, &quot;never&quot;],//是否允许计算后的键名什么的\n&quot;consistent-return&quot;: 0,//return 后面是否允许省略\n&quot;consistent-this&quot;: [2, &quot;that&quot;],//this别名\n&quot;constructor-super&quot;: 0,//非派生类不能调用super，派生类必须调用super\n&quot;curly&quot;: [2, &quot;all&quot;],//必须使用 if()&#123;&#125; 中的&#123;&#125;\n&quot;default-case&quot;: 2,//switch语句最后必须有default\n&quot;dot-location&quot;: 0,//对象访问符的位置，换行的时候在行首还是行尾\n&quot;dot-notation&quot;: [0, &#123; &quot;allowKeywords&quot;: true &#125;],//避免不必要的方括号\n&quot;eol-last&quot;: 0,//文件以单一的换行符结束\n&quot;eqeqeq&quot;: 2,//必须使用全等\n&quot;func-names&quot;: 0,//函数表达式必须有名字\n&quot;func-style&quot;: [0, &quot;declaration&quot;],//函数风格，规定只能使用函数声明/函数表达式\n&quot;generator-star-spacing&quot;: 0,//生成器函数*的前后空格\n&quot;guard-for-in&quot;: 0,//for in循环要用if语句过滤\n&quot;handle-callback-err&quot;: 0,//nodejs 处理错误\n&quot;id-length&quot;: 0,//变量名长度\n&quot;indent&quot;: [2, 4],//缩进风格\n&quot;init-declarations&quot;: 0,//声明时必须赋初值\n&quot;key-spacing&quot;: [0, &#123; &quot;beforeColon&quot;: false, &quot;afterColon&quot;: true &#125;],//对象字面量中冒号的前后空格\n&quot;lines-around-comment&quot;: 0,//行前/行后备注\n&quot;max-depth&quot;: [0, 4],//嵌套块深度\n&quot;max-len&quot;: [0, 80, 4],//字符串最大长度\n&quot;max-nested-callbacks&quot;: [0, 2],//回调嵌套深度\n&quot;max-params&quot;: [0, 3],//函数最多只能有3个参数\n&quot;max-statements&quot;: [0, 10],//函数内最多有几个声明\n&quot;new-cap&quot;: 2,//函数名首行大写必须使用new方式调用，首行小写必须用不带new方式调用\n&quot;new-parens&quot;: 2,//new时必须加小括号\n&quot;newline-after-var&quot;: 2,//变量声明后是否需要空一行\n&quot;object-curly-spacing&quot;: [0, &quot;never&quot;],//大括号内是否允许不必要的空格\n&quot;object-shorthand&quot;: 0,//强制对象字面量缩写语法\n&quot;one-var&quot;: 1,//连续声明\n&quot;operator-assignment&quot;: [0, &quot;always&quot;],//赋值运算符 += -=什么的\n&quot;operator-linebreak&quot;: [2, &quot;after&quot;],//换行时运算符在行尾还是行首\n&quot;padded-blocks&quot;: 0,//块语句内行首行尾是否要空行\n&quot;prefer-const&quot;: 0,//首选const\n&quot;prefer-spread&quot;: 0,//首选展开运算\n&quot;prefer-reflect&quot;: 0,//首选Reflect的方法\n&quot;quotes&quot;: [1, &quot;single&quot;],//引号类型 `` &quot;&quot; &#39;&#39;\n&quot;quote-props&quot;:[2, &quot;always&quot;],//对象字面量中的属性名是否强制双引号\n&quot;radix&quot;: 2,//parseInt必须指定第二个参数\n&quot;id-match&quot;: 0,//命名检测\n&quot;require-yield&quot;: 0,//生成器函数必须有yield\n&quot;semi&quot;: [2, &quot;always&quot;],//语句强制分号结尾\n&quot;semi-spacing&quot;: [0, &#123;&quot;before&quot;: false, &quot;after&quot;: true&#125;],//分号前后空格\n&quot;sort-vars&quot;: 0,//变量声明时排序\n&quot;space-after-keywords&quot;: [0, &quot;always&quot;],//关键字后面是否要空一格\n&quot;space-before-blocks&quot;: [0, &quot;always&quot;],//不以新行开始的块&#123;前面要不要有空格\n&quot;space-before-function-paren&quot;: [0, &quot;always&quot;],//函数定义时括号前面要不要有空格\n&quot;space-in-parens&quot;: [0, &quot;never&quot;],//小括号里面要不要有空格\n&quot;space-infix-ops&quot;: 0,//中缀操作符周围要不要有空格\n&quot;space-return-throw-case&quot;: 2,//return throw case后面要不要加空格\n&quot;space-unary-ops&quot;: [0, &#123; &quot;words&quot;: true, &quot;nonwords&quot;: false &#125;],//一元运算符的前/后要不要加空格\n&quot;spaced-comment&quot;: 0,//注释风格要不要有空格什么的\n&quot;strict&quot;: 2,//使用严格模式\n&quot;use-isnan&quot;: 2,//禁止比较时使用NaN，只能用isNaN()\n&quot;valid-jsdoc&quot;: 0,//jsdoc规则\n&quot;valid-typeof&quot;: 2,//必须使用合法的typeof的值\n&quot;vars-on-top&quot;: 2,//var必须放在作用域顶部\n&quot;wrap-iife&quot;: [2, &quot;inside&quot;],//立即执行函数表达式的小括号风格\n&quot;wrap-regex&quot;: 0,//正则表达式字面量用小括号包起来\n&quot;yoda&quot;: [2, &quot;never&quot;]//禁止尤达条件\n</code></pre>\n","site":{"data":{"friends":[{"category":"技术","data":[{"name":"stackblitz","url":"https://stackblitz.com"},{"name":"serverless-devs","url":"http://www.serverless-devs.com/"},{"name":"cypress自动化测试","url":"https://www.cypress.io/"},{"name":"微前端架构","url":"https://micro-frontends.ice.work/"},{"name":"gin+vue进行极速开发的全栈开发基础平台","url":"https://www.gin-vue-admin.com/"},{"name":"cloudbase","url":"https://docs.cloudbase.net/"},{"name":"supabase","url":"https://supabase.com/"}]},{"category":"工具","data":[{"name":"程序员工具集合大全","url":"https://www.bejson.com/"},{"name":"图片处理","url":"https://imagestool.com/zh_CN/index.html"},{"name":"免费在线抠图","url":"https://picwish.cn/"},{"name":"LOGO海报设计","url":"https://www.canva.cn/"},{"name":"图片无损缩放","url":"http://waifu2x.udp.jp/"},{"name":"图片格式转换器","url":"https://renzhezhilu.github.io/webp2jpg-online/"},{"name":"PDF工具集合","url":"https://tools.pdf24.org/zh/"},{"name":"UI直接生成代码","url":"https://code.fun/"},{"name":"markdown转公众号知乎","url":"https://editor.mdnice.com/"},{"name":"油猴脚本库","url":"https://greasyfork.org/zh-CN"},{"name":"代码片段转图片","url":"https://ray.so/"},{"name":"nginx配置器","url":"https://www.digitalocean.com/community/tools/nginx?global.app.lang=zhCN"},{"name":"前端插件库","url":"https://awesomejs.dev/"},{"name":"独特工具箱啥都有","url":"https://www.dute.org/"},{"name":"url编码解码","url":"http://www.jsons.cn/urlencode"},{"name":"菜鸟工具(正则测试等)","url":"https://c.runoob.com/front-end/854/"},{"name":"JSON编辑器格式化","url":"https://www.jsont.run/"},{"name":"七夜导航各类工具集","url":"https://nav.qinight.com/"},{"name":"生活百科wiki","url":"https://zh.wikihow.com/"},{"name":"表情包搜索网站","url":"https://www.dbbqb.com/"},{"name":"果汁工具大全(生活类)","url":"http://guozhivip.com/tool/"},{"name":"谷歌插件国内下载","url":"https://chrome.zzzmh.cn"},{"name":"PDF/图片/视频/音频/格式转换","url":"https://www.aconvert.com/cn/"},{"name":"JSON转各类代码","url":"https://app.quicktype.io/"},{"name":"markdown笔记","url":"https://yank-note.vercel.app"},{"name":"网页版API接口调试(界面清爽)","url":"https://httpie.io/app"},{"name":"在线开发神器手机网页开发同步","url":"https://replit.com/"},{"name":"在网页上运行安卓app","url":"https://www.wolfia.com/"},{"name":"在线工具开发手机web同步开发","url":"https://replit.com/"},{"name":"在线http接口调试","url":"https://httpie.io/app"}]},{"category":"素材","data":[{"name":"免费壁纸","url":"https://wallpaperhub.app"},{"name":"UI设计库","url":"https://screenlane.com/"},{"name":"摄图网","url":"https://699pic.com/"}]},{"category":"学习","data":[{"name":"面试基础知识","url":"https://micro-frontends.ice.work/"},{"name":"各类语言框架语法大全查询","url":"https://socode.pro/"},{"name":"前端人俱乐部","url":"http://f2er.club/"},{"name":"vue3+ts","url":"https://24kcs.github.io/vue3_study/"}]},{"category":"软件","data":[{"name":"正版软件购买","url":"https://apsgo.com/"}]},{"category":"前端","data":[{"name":"图标库","url":"https://iconoir.com/"},{"name":"前端大全","url":"https://docschina.org/"},{"name":"使用 Vue.js 开发小程序的前端框架","url":"http://mpvue.com/"},{"name":"uviewui","url":"https://www.uviewui.com/"},{"name":"varlet","url":"https://varlet.gitee.io/varlet-ui/#/zh-CN/index"},{"name":"vant","url":"https://vant-contrib.gitee.io/vant/#/zh-CN"},{"name":"tdesign","url":"https://tdesign.tencent.com/"},{"name":"前端开发UI素材","url":"https://www.creative-tim.com/"},{"name":"vue-treeselect","url":"https://www.vue-treeselect.cn/"},{"name":"semi","url":"https://semi.design/zh-CN/"},{"name":"tailwindcss","url":"https://www.tailwindcss.cn/"},{"name":"fontawesome图标","url":"https://fontawesome.com/"},{"name":"vantajs动画","url":"https://www.vantajs.com/"},{"name":"视差效果pushinjs","url":"https://nateplusplus.github.io/pushin/"}]}],"photography":[{"thumbnail":"https://thumbnail.jpg","photo":"https://photo.jpg","title":"This is title.","icon":"camera","place":"China"},{"thumbnail":"https://thumbnail.jpg","photo":"https://photo.jpg","title":"This is title.","icon":"camera","place":"China"}]}},"excerpt":"<h3 id=\"vscode-eslint-规则\"><a href=\"#vscode-eslint-规则\" class=\"headerlink\" title=\"vscode eslint 规则\"></a>vscode eslint 规则</h3>","more":"<pre><code class=\"javascript\">&quot;no-alert&quot;: 0,//禁止使用alert confirm prompt\n&quot;no-array-constructor&quot;: 2,//禁止使用数组构造器\n&quot;no-bitwise&quot;: 0,//禁止使用按位运算符\n&quot;no-caller&quot;: 1,//禁止使用arguments.caller或arguments.callee\n&quot;no-catch-shadow&quot;: 2,//禁止catch子句参数与外部作用域变量同名\n&quot;no-class-assign&quot;: 2,//禁止给类赋值\n&quot;no-cond-assign&quot;: 2,//禁止在条件表达式中使用赋值语句\n&quot;no-console&quot;: 2,//禁止使用console\n&quot;no-const-assign&quot;: 2,//禁止修改const声明的变量\n&quot;no-constant-condition&quot;: 2,//禁止在条件中使用常量表达式 if(true) if(1)\n&quot;no-continue&quot;: 0,//禁止使用continue\n&quot;no-control-regex&quot;: 2,//禁止在正则表达式中使用控制字符\n&quot;no-debugger&quot;: 2,//禁止使用debugger\n&quot;no-delete-var&quot;: 2,//不能对var声明的变量使用delete操作符\n&quot;no-div-regex&quot;: 1,//不能使用看起来像除法的正则表达式/=foo/\n&quot;no-dupe-keys&quot;: 2,//在创建对象字面量时不允许键重复 &#123;a:1,a:1&#125;\n&quot;no-dupe-args&quot;: 2,//函数参数不能重复\n&quot;no-duplicate-case&quot;: 2,//switch中的case标签不能重复\n&quot;no-else-return&quot;: 2,//如果if语句里面有return,后面不能跟else语句\n&quot;no-empty&quot;: 2,//块语句中的内容不能为空\n&quot;no-empty-character-class&quot;: 2,//正则表达式中的[]内容不能为空\n&quot;no-empty-label&quot;: 2,//禁止使用空label\n&quot;no-eq-null&quot;: 2,//禁止对null使用==或!=运算符\n&quot;no-eval&quot;: 1,//禁止使用eval\n&quot;no-ex-assign&quot;: 2,//禁止给catch语句中的异常参数赋值\n&quot;no-extend-native&quot;: 2,//禁止扩展native对象\n&quot;no-extra-bind&quot;: 2,//禁止不必要的函数绑定\n&quot;no-extra-boolean-cast&quot;: 2,//禁止不必要的bool转换\n&quot;no-extra-parens&quot;: 2,//禁止非必要的括号\n&quot;no-extra-semi&quot;: 2,//禁止多余的冒号\n&quot;no-fallthrough&quot;: 1,//禁止switch穿透\n&quot;no-floating-decimal&quot;: 2,//禁止省略浮点数中的0 .5 3.\n&quot;no-func-assign&quot;: 2,//禁止重复的函数声明\n&quot;no-implicit-coercion&quot;: 1,//禁止隐式转换\n&quot;no-implied-eval&quot;: 2,//禁止使用隐式eval\n&quot;no-inline-comments&quot;: 0,//禁止行内备注\n&quot;no-inner-declarations&quot;: [2, &quot;functions&quot;],//禁止在块语句中使用声明（变量或函数）\n&quot;no-invalid-regexp&quot;: 2,//禁止无效的正则表达式\n&quot;no-invalid-this&quot;: 2,//禁止无效的this，只能用在构造器，类，对象字面量\n&quot;no-irregular-whitespace&quot;: 2,//不能有不规则的空格\n&quot;no-iterator&quot;: 2,//禁止使用__iterator__ 属性\n&quot;no-label-var&quot;: 2,//label名不能与var声明的变量名相同\n&quot;no-labels&quot;: 2,//禁止标签声明\n&quot;no-lone-blocks&quot;: 2,//禁止不必要的嵌套块\n&quot;no-lonely-if&quot;: 2,//禁止else语句内只有if语句\n&quot;no-loop-func&quot;: 1,//禁止在循环中使用函数（如果没有引用外部变量不形成闭包就可以）\n&quot;no-mixed-requires&quot;: [0, false],//声明时不能混用声明类型\n&quot;no-mixed-spaces-and-tabs&quot;: [2, false],//禁止混用tab和空格\n&quot;linebreak-style&quot;: [0, &quot;windows&quot;],//换行风格\n&quot;no-multi-spaces&quot;: 1,//不能用多余的空格\n&quot;no-multi-str&quot;: 2,//字符串不能用\\换行\n&quot;no-multiple-empty-lines&quot;: [1, &#123;&quot;max&quot;: 2&#125;],//空行最多不能超过2行\n&quot;no-native-reassign&quot;: 2,//不能重写native对象\n&quot;no-negated-in-lhs&quot;: 2,//in 操作符的左边不能有!\n&quot;no-nested-ternary&quot;: 0,//禁止使用嵌套的三目运算\n&quot;no-new&quot;: 1,//禁止在使用new构造一个实例后不赋值\n&quot;no-new-func&quot;: 1,//禁止使用new Function\n&quot;no-new-object&quot;: 2,//禁止使用new Object()\n&quot;no-new-require&quot;: 2,//禁止使用new require\n&quot;no-new-wrappers&quot;: 2,//禁止使用new创建包装实例，new String new Boolean new Number\n&quot;no-obj-calls&quot;: 2,//不能调用内置的全局对象，比如Math() JSON()\n&quot;no-octal&quot;: 2,//禁止使用八进制数字\n&quot;no-octal-escape&quot;: 2,//禁止使用八进制转义序列\n&quot;no-param-reassign&quot;: 2,//禁止给参数重新赋值\n&quot;no-path-concat&quot;: 0,//node中不能使用__dirname或__filename做路径拼接\n&quot;no-plusplus&quot;: 0,//禁止使用++，--\n&quot;no-process-env&quot;: 0,//禁止使用process.env\n&quot;no-process-exit&quot;: 0,//禁止使用process.exit()\n&quot;no-proto&quot;: 2,//禁止使用__proto__属性\n&quot;no-redeclare&quot;: 2,//禁止重复声明变量\n&quot;no-regex-spaces&quot;: 2,//禁止在正则表达式字面量中使用多个空格 /foo bar/\n&quot;no-restricted-modules&quot;: 0,//如果禁用了指定模块，使用就会报错\n&quot;no-return-assign&quot;: 1,//return 语句中不能有赋值表达式\n&quot;no-script-url&quot;: 0,//禁止使用javascript:void(0)\n&quot;no-self-compare&quot;: 2,//不能比较自身\n&quot;no-sequences&quot;: 0,//禁止使用逗号运算符\n&quot;no-shadow&quot;: 2,//外部作用域中的变量不能与它所包含的作用域中的变量或参数同名\n&quot;no-shadow-restricted-names&quot;: 2,//严格模式中规定的限制标识符不能作为声明时的变量名使用\n&quot;no-spaced-func&quot;: 2,//函数调用时 函数名与()之间不能有空格\n&quot;no-sparse-arrays&quot;: 2,//禁止稀疏数组， [1,,2]\n&quot;no-sync&quot;: 0,//nodejs 禁止同步方法\n&quot;no-ternary&quot;: 0,//禁止使用三目运算符\n&quot;no-trailing-spaces&quot;: 1,//一行结束后面不要有空格\n&quot;no-this-before-super&quot;: 0,//在调用super()之前不能使用this或super\n&quot;no-throw-literal&quot;: 2,//禁止抛出字面量错误 throw &quot;error&quot;;\n&quot;no-undef&quot;: 1,//不能有未定义的变量\n&quot;no-undef-init&quot;: 2,//变量初始化时不能直接给它赋值为undefined\n&quot;no-undefined&quot;: 2,//不能使用undefined\n&quot;no-unexpected-multiline&quot;: 2,//避免多行表达式\n&quot;no-underscore-dangle&quot;: 1,//标识符不能以_开头或结尾\n&quot;no-unneeded-ternary&quot;: 2,//禁止不必要的嵌套 var isYes = answer === 1 ? true : false;\n&quot;no-unreachable&quot;: 2,//不能有无法执行的代码\n&quot;no-unused-expressions&quot;: 2,//禁止无用的表达式\n&quot;no-unused-vars&quot;: [2, &#123;&quot;vars&quot;: &quot;all&quot;, &quot;args&quot;: &quot;after-used&quot;&#125;],//不能有声明后未被使用的变量或参数\n&quot;no-use-before-define&quot;: 2,//未定义前不能使用\n&quot;no-useless-call&quot;: 2,//禁止不必要的call和apply\n&quot;no-void&quot;: 2,//禁用void操作符\n&quot;no-var&quot;: 0,//禁用var，用let和const代替\n&quot;no-warning-comments&quot;: [1, &#123; &quot;terms&quot;: [&quot;todo&quot;, &quot;fixme&quot;, &quot;xxx&quot;], &quot;location&quot;: &quot;start&quot; &#125;],//不能有警告备注\n&quot;no-with&quot;: 2,//禁用with\n&quot;array-bracket-spacing&quot;: [2, &quot;never&quot;],//是否允许非空数组里面有多余的空格\n&quot;arrow-parens&quot;: 0,//箭头函数用小括号括起来\n&quot;arrow-spacing&quot;: 0,//=&gt;的前/后括号\n&quot;accessor-pairs&quot;: 0,//在对象中使用getter/setter\n&quot;block-scoped-var&quot;: 0,//块语句中使用var\n&quot;brace-style&quot;: [1, &quot;1tbs&quot;],//大括号风格\n&quot;callback-return&quot;: 1,//避免多次调用回调什么的\n&quot;camelcase&quot;: 2,//强制驼峰法命名\n&quot;comma-dangle&quot;: [2, &quot;never&quot;],//对象字面量项尾不能有逗号\n&quot;comma-spacing&quot;: 0,//逗号前后的空格\n&quot;comma-style&quot;: [2, &quot;last&quot;],//逗号风格，换行时在行首还是行尾\n&quot;complexity&quot;: [0, 11],//循环复杂度\n&quot;computed-property-spacing&quot;: [0, &quot;never&quot;],//是否允许计算后的键名什么的\n&quot;consistent-return&quot;: 0,//return 后面是否允许省略\n&quot;consistent-this&quot;: [2, &quot;that&quot;],//this别名\n&quot;constructor-super&quot;: 0,//非派生类不能调用super，派生类必须调用super\n&quot;curly&quot;: [2, &quot;all&quot;],//必须使用 if()&#123;&#125; 中的&#123;&#125;\n&quot;default-case&quot;: 2,//switch语句最后必须有default\n&quot;dot-location&quot;: 0,//对象访问符的位置，换行的时候在行首还是行尾\n&quot;dot-notation&quot;: [0, &#123; &quot;allowKeywords&quot;: true &#125;],//避免不必要的方括号\n&quot;eol-last&quot;: 0,//文件以单一的换行符结束\n&quot;eqeqeq&quot;: 2,//必须使用全等\n&quot;func-names&quot;: 0,//函数表达式必须有名字\n&quot;func-style&quot;: [0, &quot;declaration&quot;],//函数风格，规定只能使用函数声明/函数表达式\n&quot;generator-star-spacing&quot;: 0,//生成器函数*的前后空格\n&quot;guard-for-in&quot;: 0,//for in循环要用if语句过滤\n&quot;handle-callback-err&quot;: 0,//nodejs 处理错误\n&quot;id-length&quot;: 0,//变量名长度\n&quot;indent&quot;: [2, 4],//缩进风格\n&quot;init-declarations&quot;: 0,//声明时必须赋初值\n&quot;key-spacing&quot;: [0, &#123; &quot;beforeColon&quot;: false, &quot;afterColon&quot;: true &#125;],//对象字面量中冒号的前后空格\n&quot;lines-around-comment&quot;: 0,//行前/行后备注\n&quot;max-depth&quot;: [0, 4],//嵌套块深度\n&quot;max-len&quot;: [0, 80, 4],//字符串最大长度\n&quot;max-nested-callbacks&quot;: [0, 2],//回调嵌套深度\n&quot;max-params&quot;: [0, 3],//函数最多只能有3个参数\n&quot;max-statements&quot;: [0, 10],//函数内最多有几个声明\n&quot;new-cap&quot;: 2,//函数名首行大写必须使用new方式调用，首行小写必须用不带new方式调用\n&quot;new-parens&quot;: 2,//new时必须加小括号\n&quot;newline-after-var&quot;: 2,//变量声明后是否需要空一行\n&quot;object-curly-spacing&quot;: [0, &quot;never&quot;],//大括号内是否允许不必要的空格\n&quot;object-shorthand&quot;: 0,//强制对象字面量缩写语法\n&quot;one-var&quot;: 1,//连续声明\n&quot;operator-assignment&quot;: [0, &quot;always&quot;],//赋值运算符 += -=什么的\n&quot;operator-linebreak&quot;: [2, &quot;after&quot;],//换行时运算符在行尾还是行首\n&quot;padded-blocks&quot;: 0,//块语句内行首行尾是否要空行\n&quot;prefer-const&quot;: 0,//首选const\n&quot;prefer-spread&quot;: 0,//首选展开运算\n&quot;prefer-reflect&quot;: 0,//首选Reflect的方法\n&quot;quotes&quot;: [1, &quot;single&quot;],//引号类型 `` &quot;&quot; &#39;&#39;\n&quot;quote-props&quot;:[2, &quot;always&quot;],//对象字面量中的属性名是否强制双引号\n&quot;radix&quot;: 2,//parseInt必须指定第二个参数\n&quot;id-match&quot;: 0,//命名检测\n&quot;require-yield&quot;: 0,//生成器函数必须有yield\n&quot;semi&quot;: [2, &quot;always&quot;],//语句强制分号结尾\n&quot;semi-spacing&quot;: [0, &#123;&quot;before&quot;: false, &quot;after&quot;: true&#125;],//分号前后空格\n&quot;sort-vars&quot;: 0,//变量声明时排序\n&quot;space-after-keywords&quot;: [0, &quot;always&quot;],//关键字后面是否要空一格\n&quot;space-before-blocks&quot;: [0, &quot;always&quot;],//不以新行开始的块&#123;前面要不要有空格\n&quot;space-before-function-paren&quot;: [0, &quot;always&quot;],//函数定义时括号前面要不要有空格\n&quot;space-in-parens&quot;: [0, &quot;never&quot;],//小括号里面要不要有空格\n&quot;space-infix-ops&quot;: 0,//中缀操作符周围要不要有空格\n&quot;space-return-throw-case&quot;: 2,//return throw case后面要不要加空格\n&quot;space-unary-ops&quot;: [0, &#123; &quot;words&quot;: true, &quot;nonwords&quot;: false &#125;],//一元运算符的前/后要不要加空格\n&quot;spaced-comment&quot;: 0,//注释风格要不要有空格什么的\n&quot;strict&quot;: 2,//使用严格模式\n&quot;use-isnan&quot;: 2,//禁止比较时使用NaN，只能用isNaN()\n&quot;valid-jsdoc&quot;: 0,//jsdoc规则\n&quot;valid-typeof&quot;: 2,//必须使用合法的typeof的值\n&quot;vars-on-top&quot;: 2,//var必须放在作用域顶部\n&quot;wrap-iife&quot;: [2, &quot;inside&quot;],//立即执行函数表达式的小括号风格\n&quot;wrap-regex&quot;: 0,//正则表达式字面量用小括号包起来\n&quot;yoda&quot;: [2, &quot;never&quot;]//禁止尤达条件\n</code></pre>"},{"title":"vscode漂亮的代码格式化prettier","date":"2021-04-25T09:57:00.000Z","_content":"\n首先在vscode内安装插件[Prettier - Code formatter](https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode)\n在你的项目里新建下面文件\n<!-- more -->\n.prettierrc.js\n```javascript\nmodule.exports = {\n  trailingComma: 'none', // 在对象或数组最后一个元素后面是否加逗号\n  useTabs: false, // 缩进不使用tab，使用空格\n  printWidth: 80, // 最大列宽 默认80\n  tabWidth: 2, // 缩进字节数\n  semi: true, // 句尾添加分号\n  singleQuote: true, // 使用单引号代替双引号\n  bracketSpacing: true, // 在对象，数组括号与文字之间加空格 \"{ foo: bar }\"\n  jsxBracketSameLine: true, // 将>多行JSX元素的放在最后一行的末尾，而不是放在下一行\n  jsxSingleQuote: true, // 在JSX中使用单引号而不是双引号\n  arrowParens: 'always', // always:(x) => x  avoid: x => x\n  vueIndentScriptAndStyle: true, // 是否缩进Vue文件中的代码<script>和<style>标记\n  insertPragma: false // 顶部插入<!-- @format -->\n};\n\n```\n以上是我列举的我的配置，你也可以去[官网](https://prettier.io/docs/en/options.html)查看其它配置。\n\n\n","source":"_posts/vscode漂亮的代码格式化prettier.md","raw":"---\ntitle: vscode漂亮的代码格式化prettier\ndate: 2021-04-25 17:57\ntags:\n---\n\n首先在vscode内安装插件[Prettier - Code formatter](https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode)\n在你的项目里新建下面文件\n<!-- more -->\n.prettierrc.js\n```javascript\nmodule.exports = {\n  trailingComma: 'none', // 在对象或数组最后一个元素后面是否加逗号\n  useTabs: false, // 缩进不使用tab，使用空格\n  printWidth: 80, // 最大列宽 默认80\n  tabWidth: 2, // 缩进字节数\n  semi: true, // 句尾添加分号\n  singleQuote: true, // 使用单引号代替双引号\n  bracketSpacing: true, // 在对象，数组括号与文字之间加空格 \"{ foo: bar }\"\n  jsxBracketSameLine: true, // 将>多行JSX元素的放在最后一行的末尾，而不是放在下一行\n  jsxSingleQuote: true, // 在JSX中使用单引号而不是双引号\n  arrowParens: 'always', // always:(x) => x  avoid: x => x\n  vueIndentScriptAndStyle: true, // 是否缩进Vue文件中的代码<script>和<style>标记\n  insertPragma: false // 顶部插入<!-- @format -->\n};\n\n```\n以上是我列举的我的配置，你也可以去[官网](https://prettier.io/docs/en/options.html)查看其它配置。\n\n\n","slug":"vscode漂亮的代码格式化prettier","published":1,"updated":"2022-11-02T04:24:55.800Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clagmayfk000a6c8475150kcb","content":"<p>首先在vscode内安装插件<a href=\"https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode\">Prettier - Code formatter</a><br>在你的项目里新建下面文件</p>\n<span id=\"more\"></span>\n<p>.prettierrc.js</p>\n<pre><code class=\"javascript\">module.exports = &#123;\n  trailingComma: &#39;none&#39;, // 在对象或数组最后一个元素后面是否加逗号\n  useTabs: false, // 缩进不使用tab，使用空格\n  printWidth: 80, // 最大列宽 默认80\n  tabWidth: 2, // 缩进字节数\n  semi: true, // 句尾添加分号\n  singleQuote: true, // 使用单引号代替双引号\n  bracketSpacing: true, // 在对象，数组括号与文字之间加空格 &quot;&#123; foo: bar &#125;&quot;\n  jsxBracketSameLine: true, // 将&gt;多行JSX元素的放在最后一行的末尾，而不是放在下一行\n  jsxSingleQuote: true, // 在JSX中使用单引号而不是双引号\n  arrowParens: &#39;always&#39;, // always:(x) =&gt; x  avoid: x =&gt; x\n  vueIndentScriptAndStyle: true, // 是否缩进Vue文件中的代码&lt;script&gt;和&lt;style&gt;标记\n  insertPragma: false // 顶部插入&lt;!-- @format --&gt;\n&#125;;\n</code></pre>\n<p>以上是我列举的我的配置，你也可以去<a href=\"https://prettier.io/docs/en/options.html\">官网</a>查看其它配置。</p>\n","site":{"data":{"friends":[{"category":"技术","data":[{"name":"stackblitz","url":"https://stackblitz.com"},{"name":"serverless-devs","url":"http://www.serverless-devs.com/"},{"name":"cypress自动化测试","url":"https://www.cypress.io/"},{"name":"微前端架构","url":"https://micro-frontends.ice.work/"},{"name":"gin+vue进行极速开发的全栈开发基础平台","url":"https://www.gin-vue-admin.com/"},{"name":"cloudbase","url":"https://docs.cloudbase.net/"},{"name":"supabase","url":"https://supabase.com/"}]},{"category":"工具","data":[{"name":"程序员工具集合大全","url":"https://www.bejson.com/"},{"name":"图片处理","url":"https://imagestool.com/zh_CN/index.html"},{"name":"免费在线抠图","url":"https://picwish.cn/"},{"name":"LOGO海报设计","url":"https://www.canva.cn/"},{"name":"图片无损缩放","url":"http://waifu2x.udp.jp/"},{"name":"图片格式转换器","url":"https://renzhezhilu.github.io/webp2jpg-online/"},{"name":"PDF工具集合","url":"https://tools.pdf24.org/zh/"},{"name":"UI直接生成代码","url":"https://code.fun/"},{"name":"markdown转公众号知乎","url":"https://editor.mdnice.com/"},{"name":"油猴脚本库","url":"https://greasyfork.org/zh-CN"},{"name":"代码片段转图片","url":"https://ray.so/"},{"name":"nginx配置器","url":"https://www.digitalocean.com/community/tools/nginx?global.app.lang=zhCN"},{"name":"前端插件库","url":"https://awesomejs.dev/"},{"name":"独特工具箱啥都有","url":"https://www.dute.org/"},{"name":"url编码解码","url":"http://www.jsons.cn/urlencode"},{"name":"菜鸟工具(正则测试等)","url":"https://c.runoob.com/front-end/854/"},{"name":"JSON编辑器格式化","url":"https://www.jsont.run/"},{"name":"七夜导航各类工具集","url":"https://nav.qinight.com/"},{"name":"生活百科wiki","url":"https://zh.wikihow.com/"},{"name":"表情包搜索网站","url":"https://www.dbbqb.com/"},{"name":"果汁工具大全(生活类)","url":"http://guozhivip.com/tool/"},{"name":"谷歌插件国内下载","url":"https://chrome.zzzmh.cn"},{"name":"PDF/图片/视频/音频/格式转换","url":"https://www.aconvert.com/cn/"},{"name":"JSON转各类代码","url":"https://app.quicktype.io/"},{"name":"markdown笔记","url":"https://yank-note.vercel.app"},{"name":"网页版API接口调试(界面清爽)","url":"https://httpie.io/app"},{"name":"在线开发神器手机网页开发同步","url":"https://replit.com/"},{"name":"在网页上运行安卓app","url":"https://www.wolfia.com/"},{"name":"在线工具开发手机web同步开发","url":"https://replit.com/"},{"name":"在线http接口调试","url":"https://httpie.io/app"}]},{"category":"素材","data":[{"name":"免费壁纸","url":"https://wallpaperhub.app"},{"name":"UI设计库","url":"https://screenlane.com/"},{"name":"摄图网","url":"https://699pic.com/"}]},{"category":"学习","data":[{"name":"面试基础知识","url":"https://micro-frontends.ice.work/"},{"name":"各类语言框架语法大全查询","url":"https://socode.pro/"},{"name":"前端人俱乐部","url":"http://f2er.club/"},{"name":"vue3+ts","url":"https://24kcs.github.io/vue3_study/"}]},{"category":"软件","data":[{"name":"正版软件购买","url":"https://apsgo.com/"}]},{"category":"前端","data":[{"name":"图标库","url":"https://iconoir.com/"},{"name":"前端大全","url":"https://docschina.org/"},{"name":"使用 Vue.js 开发小程序的前端框架","url":"http://mpvue.com/"},{"name":"uviewui","url":"https://www.uviewui.com/"},{"name":"varlet","url":"https://varlet.gitee.io/varlet-ui/#/zh-CN/index"},{"name":"vant","url":"https://vant-contrib.gitee.io/vant/#/zh-CN"},{"name":"tdesign","url":"https://tdesign.tencent.com/"},{"name":"前端开发UI素材","url":"https://www.creative-tim.com/"},{"name":"vue-treeselect","url":"https://www.vue-treeselect.cn/"},{"name":"semi","url":"https://semi.design/zh-CN/"},{"name":"tailwindcss","url":"https://www.tailwindcss.cn/"},{"name":"fontawesome图标","url":"https://fontawesome.com/"},{"name":"vantajs动画","url":"https://www.vantajs.com/"},{"name":"视差效果pushinjs","url":"https://nateplusplus.github.io/pushin/"}]}],"photography":[{"thumbnail":"https://thumbnail.jpg","photo":"https://photo.jpg","title":"This is title.","icon":"camera","place":"China"},{"thumbnail":"https://thumbnail.jpg","photo":"https://photo.jpg","title":"This is title.","icon":"camera","place":"China"}]}},"excerpt":"<p>首先在vscode内安装插件<a href=\"https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode\">Prettier - Code formatter</a><br>在你的项目里新建下面文件</p>","more":"<p>.prettierrc.js</p>\n<pre><code class=\"javascript\">module.exports = &#123;\n  trailingComma: &#39;none&#39;, // 在对象或数组最后一个元素后面是否加逗号\n  useTabs: false, // 缩进不使用tab，使用空格\n  printWidth: 80, // 最大列宽 默认80\n  tabWidth: 2, // 缩进字节数\n  semi: true, // 句尾添加分号\n  singleQuote: true, // 使用单引号代替双引号\n  bracketSpacing: true, // 在对象，数组括号与文字之间加空格 &quot;&#123; foo: bar &#125;&quot;\n  jsxBracketSameLine: true, // 将&gt;多行JSX元素的放在最后一行的末尾，而不是放在下一行\n  jsxSingleQuote: true, // 在JSX中使用单引号而不是双引号\n  arrowParens: &#39;always&#39;, // always:(x) =&gt; x  avoid: x =&gt; x\n  vueIndentScriptAndStyle: true, // 是否缩进Vue文件中的代码&lt;script&gt;和&lt;style&gt;标记\n  insertPragma: false // 顶部插入&lt;!-- @format --&gt;\n&#125;;\n</code></pre>\n<p>以上是我列举的我的配置，你也可以去<a href=\"https://prettier.io/docs/en/options.html\">官网</a>查看其它配置。</p>"},{"title":"vue2老项目升级Vite优化提升16倍","date":"2022-11-17T09:57:00.000Z","_content":"\n## 老的vue2项目如何升级到Vite?\n很多vue2老项目可能是vue-cli脚手架，甚至有的还是webpack构建的。现在都2022年了，对于刚入行前端的同学来说来花时间去学一遍webpack，费时又费力，苦涩又难懂，一堆的配置项，看的头皮发麻。\n而对于上一代vue-cli脚手架，相比webpack易上手很多，vue-ui的可视化界面搭建配置项目也非常友好。\n但是，尤大极力推荐Vite才是未来，可以说Vite打遍天下无敌手，是现在最快最好的构建工具。\n<!-- more -->\n废话不多说了，上图！\n\n老vue2 vue-cli脚手架项目资源下载情况：\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/h/WeChat3915120712479346fd5eed8f2e4c69f6.png)\n\n升级vite后项目资源下载情况：\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/h/WeChatb437da539274f4656abb05d5026522d5.png)\n\nvite构建后面资源体积小了3倍，这里主要也有配置了gzip的功劳。\n\n再来看构建速度对比：\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/h/WeChat04b370310ff4e0130afe2ffe663294b8.png)\n\nId753构建为老项目构建速度ID754为升级为Vite后的构建速度，构建速度减少了一半！\n\n在来看项目启动速度\n老vue2 vue-cli脚手架项目启动速度：16980ms\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/h/WechatIMG6821.png)\n\n升级vite后项目启动速度：621ms\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/h/WechatIMG6822.png)\n\n快了将近16秒，足足提升了16倍时间！大大节省了我们的开发时间。\n\n那么vue2老项目如何升级Vite呢？\n大家可能都知道，Vite对vue3的支持比较好，我们利用Vite去创建项目的时候默认都是vue@3+以上的版本，就像这样：\n``` json \n\"dependencies\": {\n  \"vue\": \"^3.2.41\"\n},\n\"devDependencies\": {\n  \"@vitejs/plugin-vue\": \"^3.2.0\",\n  \"vite\": \"^3.2.3\"\n}\n```\n\n那么如何让我们vue2的项目也能用到Vite呢？那么需要一个Vite插件 [vite-plugin-vue2](https://github.com/underfin/vite-plugin-vue2)\n\n如果是老的webpack项目就删除掉以下几个文件，当然删之前先得看下环境配置，以及是否有一些特殊的配置项，这个根据自己的项目实际情况来。\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/h/WX20221114-165721%402x.png)\n\n如果是vue-cli脚手架项目就把vue.config.js改为vite.config.js，webpack项目新增这个配置文件。\n\n然后根据自己项目的环境配置新建环境配置文件：\n.evn.development\n.env.qa\n.env.pre\n.env.production\n\n环境文件内主要配置我们各个环境的api域名地址，如：\nNODE_ENV='development'\nVITE_APP_URL='http://dev.domainapi.com/'\n这里必须以VITE_开头，熟悉vue-cli脚手架的可能知道是VUE_开头的\n如：VUE_APP_URL='http://dev.domainapi.com/'\n\n然后再在项目中调整配置api，可以用import.meta.env.VITE_APP_API_URL来获取配置文件。\n\n然后调整package.json\n删除webpack相关依赖。\n删除@vue/cli-相关依赖。\n\n删除package-lock.json\n\n安装vite和vite-plugin-vue2\n``` bash\nnpm install vite@latest\nnpm install vite-plugin-vue2\n```\n\n注：在vite项目里是不支持require引用依赖库的，必须全部调整为import引用。\n\n把我们的项目结构调整为类似如下结构：\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/h/WX20221114-165809%402x.png)\n\npackage.json部分如下:\n``` json \n...\n\"scripts\": {\n  \"dev\": \"vite\",\n  \"build:dev\": \"vite build --mode development\",\n  \"build:qa\": \"vite build --mode qa\",\n  \"build:pre\": \"vite build --mode pre\",\n  \"build:prod\": \"vite build --mode production\",\n  \"build\": \"npm run build:prod\",\n  \"preview\": \"vite preview\"\n},\n\"dependencies\": {\n  ...\n  \"vue\": \"^2.6.11\",\n  \"axios\": \"^0.15.3\",\n  \"iview\": \"2.13.1\",\n  \"vue-router\": \"^2.8.1\",\n  \"vuex\": \"^2.5.0\",\n},\n\"devDependencies\": {\n  ...\n  \"vite-plugin-vue2\": \"^2.0.2\",\n  \"vite\": \"^3.2.3\"\n}\n```\n\nindex.html如下：\n``` html\n<body>\n    <div id=\"app\"></div>\n    <script type=\"module\" src=\"/src/main.js\"></script>\n    <!-- built files will be auto injected -->\n  </body>\n```\n\nvite.config.js如下：\n```js\nimport { createVuePlugin } from \"vite-plugin-vue2\";\nimport viteCompression from 'vite-plugin-compression'; // gizp压缩\nimport { defineConfig } from \"vite\";\nimport path from \"path\";\n\n/**\n * @param newFilename {string}\n * @returns {import('vite').Plugin}\n * @des 可以重命名打包后index.html文件名\n */\n const renameIndexPlugin = newFilename => {\n  if (!newFilename) return\n\n  return {\n    name: 'renameIndex',\n    enforce: 'post',\n    generateBundle(options, bundle) {\n      const indexHtml = bundle['index.html']\n      indexHtml.fileName = newFilename\n    },\n  }\n}\n\nexport default defineConfig({\n    base: '/dist/',\n    plugins: [\n      createVuePlugin(),\n      viteCompression(),\n      renameIndexPlugin('index_prod.html')\n    ],\n    envDir:'./env',\n    server: {\n      host: 'localhost',\n      port: 8080,\n      open: true\n    },\n    build:{\n      outDir: 'dist',\n      assetsDir: 'static',\n    },\n    resolve: {\n      alias: [\n        {\n          find: '@',\n          replacement: path.resolve(__dirname, \"src\"),\n        }\n      ]\n    }\n})\n```\n\n这是根据我项目实际配置的，\n打包后域名路径必须为dist，正常来说默认不需要配置base项，\n打包后的index.html会改为index_prod.html，正常来说可以去掉renameIndexPlugin()\nvite-plugin-compression插件为启用gzip压缩，更好的减少我们构建后项目资源的体积。\n其他具体的配置项也可以去参考Vite官网。\n\n最后重新删除package-lock.json和node_modules，执行npm install\n\n运行npm run dev \n查看报错情况，根据提示一步一步修改问题。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/vue老项目升级Vite优化提升16倍.md","raw":"---\ntitle: vue2老项目升级Vite优化提升16倍\ndate: 2022-11-17 17:57\ntags:\n---\n\n## 老的vue2项目如何升级到Vite?\n很多vue2老项目可能是vue-cli脚手架，甚至有的还是webpack构建的。现在都2022年了，对于刚入行前端的同学来说来花时间去学一遍webpack，费时又费力，苦涩又难懂，一堆的配置项，看的头皮发麻。\n而对于上一代vue-cli脚手架，相比webpack易上手很多，vue-ui的可视化界面搭建配置项目也非常友好。\n但是，尤大极力推荐Vite才是未来，可以说Vite打遍天下无敌手，是现在最快最好的构建工具。\n<!-- more -->\n废话不多说了，上图！\n\n老vue2 vue-cli脚手架项目资源下载情况：\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/h/WeChat3915120712479346fd5eed8f2e4c69f6.png)\n\n升级vite后项目资源下载情况：\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/h/WeChatb437da539274f4656abb05d5026522d5.png)\n\nvite构建后面资源体积小了3倍，这里主要也有配置了gzip的功劳。\n\n再来看构建速度对比：\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/h/WeChat04b370310ff4e0130afe2ffe663294b8.png)\n\nId753构建为老项目构建速度ID754为升级为Vite后的构建速度，构建速度减少了一半！\n\n在来看项目启动速度\n老vue2 vue-cli脚手架项目启动速度：16980ms\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/h/WechatIMG6821.png)\n\n升级vite后项目启动速度：621ms\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/h/WechatIMG6822.png)\n\n快了将近16秒，足足提升了16倍时间！大大节省了我们的开发时间。\n\n那么vue2老项目如何升级Vite呢？\n大家可能都知道，Vite对vue3的支持比较好，我们利用Vite去创建项目的时候默认都是vue@3+以上的版本，就像这样：\n``` json \n\"dependencies\": {\n  \"vue\": \"^3.2.41\"\n},\n\"devDependencies\": {\n  \"@vitejs/plugin-vue\": \"^3.2.0\",\n  \"vite\": \"^3.2.3\"\n}\n```\n\n那么如何让我们vue2的项目也能用到Vite呢？那么需要一个Vite插件 [vite-plugin-vue2](https://github.com/underfin/vite-plugin-vue2)\n\n如果是老的webpack项目就删除掉以下几个文件，当然删之前先得看下环境配置，以及是否有一些特殊的配置项，这个根据自己的项目实际情况来。\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/h/WX20221114-165721%402x.png)\n\n如果是vue-cli脚手架项目就把vue.config.js改为vite.config.js，webpack项目新增这个配置文件。\n\n然后根据自己项目的环境配置新建环境配置文件：\n.evn.development\n.env.qa\n.env.pre\n.env.production\n\n环境文件内主要配置我们各个环境的api域名地址，如：\nNODE_ENV='development'\nVITE_APP_URL='http://dev.domainapi.com/'\n这里必须以VITE_开头，熟悉vue-cli脚手架的可能知道是VUE_开头的\n如：VUE_APP_URL='http://dev.domainapi.com/'\n\n然后再在项目中调整配置api，可以用import.meta.env.VITE_APP_API_URL来获取配置文件。\n\n然后调整package.json\n删除webpack相关依赖。\n删除@vue/cli-相关依赖。\n\n删除package-lock.json\n\n安装vite和vite-plugin-vue2\n``` bash\nnpm install vite@latest\nnpm install vite-plugin-vue2\n```\n\n注：在vite项目里是不支持require引用依赖库的，必须全部调整为import引用。\n\n把我们的项目结构调整为类似如下结构：\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/h/WX20221114-165809%402x.png)\n\npackage.json部分如下:\n``` json \n...\n\"scripts\": {\n  \"dev\": \"vite\",\n  \"build:dev\": \"vite build --mode development\",\n  \"build:qa\": \"vite build --mode qa\",\n  \"build:pre\": \"vite build --mode pre\",\n  \"build:prod\": \"vite build --mode production\",\n  \"build\": \"npm run build:prod\",\n  \"preview\": \"vite preview\"\n},\n\"dependencies\": {\n  ...\n  \"vue\": \"^2.6.11\",\n  \"axios\": \"^0.15.3\",\n  \"iview\": \"2.13.1\",\n  \"vue-router\": \"^2.8.1\",\n  \"vuex\": \"^2.5.0\",\n},\n\"devDependencies\": {\n  ...\n  \"vite-plugin-vue2\": \"^2.0.2\",\n  \"vite\": \"^3.2.3\"\n}\n```\n\nindex.html如下：\n``` html\n<body>\n    <div id=\"app\"></div>\n    <script type=\"module\" src=\"/src/main.js\"></script>\n    <!-- built files will be auto injected -->\n  </body>\n```\n\nvite.config.js如下：\n```js\nimport { createVuePlugin } from \"vite-plugin-vue2\";\nimport viteCompression from 'vite-plugin-compression'; // gizp压缩\nimport { defineConfig } from \"vite\";\nimport path from \"path\";\n\n/**\n * @param newFilename {string}\n * @returns {import('vite').Plugin}\n * @des 可以重命名打包后index.html文件名\n */\n const renameIndexPlugin = newFilename => {\n  if (!newFilename) return\n\n  return {\n    name: 'renameIndex',\n    enforce: 'post',\n    generateBundle(options, bundle) {\n      const indexHtml = bundle['index.html']\n      indexHtml.fileName = newFilename\n    },\n  }\n}\n\nexport default defineConfig({\n    base: '/dist/',\n    plugins: [\n      createVuePlugin(),\n      viteCompression(),\n      renameIndexPlugin('index_prod.html')\n    ],\n    envDir:'./env',\n    server: {\n      host: 'localhost',\n      port: 8080,\n      open: true\n    },\n    build:{\n      outDir: 'dist',\n      assetsDir: 'static',\n    },\n    resolve: {\n      alias: [\n        {\n          find: '@',\n          replacement: path.resolve(__dirname, \"src\"),\n        }\n      ]\n    }\n})\n```\n\n这是根据我项目实际配置的，\n打包后域名路径必须为dist，正常来说默认不需要配置base项，\n打包后的index.html会改为index_prod.html，正常来说可以去掉renameIndexPlugin()\nvite-plugin-compression插件为启用gzip压缩，更好的减少我们构建后项目资源的体积。\n其他具体的配置项也可以去参考Vite官网。\n\n最后重新删除package-lock.json和node_modules，执行npm install\n\n运行npm run dev \n查看报错情况，根据提示一步一步修改问题。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"vue老项目升级Vite优化提升16倍","published":1,"updated":"2022-11-14T10:01:14.159Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clagmayfm000b6c845ct5br8i","content":"<h2 id=\"老的vue2项目如何升级到Vite\"><a href=\"#老的vue2项目如何升级到Vite\" class=\"headerlink\" title=\"老的vue2项目如何升级到Vite?\"></a>老的vue2项目如何升级到Vite?</h2><p>很多vue2老项目可能是vue-cli脚手架，甚至有的还是webpack构建的。现在都2022年了，对于刚入行前端的同学来说来花时间去学一遍webpack，费时又费力，苦涩又难懂，一堆的配置项，看的头皮发麻。<br>而对于上一代vue-cli脚手架，相比webpack易上手很多，vue-ui的可视化界面搭建配置项目也非常友好。<br>但是，尤大极力推荐Vite才是未来，可以说Vite打遍天下无敌手，是现在最快最好的构建工具。</p>\n<span id=\"more\"></span>\n<p>废话不多说了，上图！</p>\n<p>老vue2 vue-cli脚手架项目资源下载情况：<br><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/h/WeChat3915120712479346fd5eed8f2e4c69f6.png\" alt=\"image.png\"></p>\n<p>升级vite后项目资源下载情况：<br><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/h/WeChatb437da539274f4656abb05d5026522d5.png\" alt=\"image.png\"></p>\n<p>vite构建后面资源体积小了3倍，这里主要也有配置了gzip的功劳。</p>\n<p>再来看构建速度对比：<br><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/h/WeChat04b370310ff4e0130afe2ffe663294b8.png\" alt=\"image.png\"></p>\n<p>Id753构建为老项目构建速度ID754为升级为Vite后的构建速度，构建速度减少了一半！</p>\n<p>在来看项目启动速度<br>老vue2 vue-cli脚手架项目启动速度：16980ms<br><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/h/WechatIMG6821.png\" alt=\"image.png\"></p>\n<p>升级vite后项目启动速度：621ms<br><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/h/WechatIMG6822.png\" alt=\"image.png\"></p>\n<p>快了将近16秒，足足提升了16倍时间！大大节省了我们的开发时间。</p>\n<p>那么vue2老项目如何升级Vite呢？<br>大家可能都知道，Vite对vue3的支持比较好，我们利用Vite去创建项目的时候默认都是vue@3+以上的版本，就像这样：</p>\n<pre><code class=\"json\">&quot;dependencies&quot;: &#123;\n  &quot;vue&quot;: &quot;^3.2.41&quot;\n&#125;,\n&quot;devDependencies&quot;: &#123;\n  &quot;@vitejs/plugin-vue&quot;: &quot;^3.2.0&quot;,\n  &quot;vite&quot;: &quot;^3.2.3&quot;\n&#125;\n</code></pre>\n<p>那么如何让我们vue2的项目也能用到Vite呢？那么需要一个Vite插件 <a href=\"https://github.com/underfin/vite-plugin-vue2\">vite-plugin-vue2</a></p>\n<p>如果是老的webpack项目就删除掉以下几个文件，当然删之前先得看下环境配置，以及是否有一些特殊的配置项，这个根据自己的项目实际情况来。<br><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/h/WX20221114-165721%402x.png\" alt=\"image.png\"></p>\n<p>如果是vue-cli脚手架项目就把vue.config.js改为vite.config.js，webpack项目新增这个配置文件。</p>\n<p>然后根据自己项目的环境配置新建环境配置文件：<br>.evn.development<br>.env.qa<br>.env.pre<br>.env.production</p>\n<p>环境文件内主要配置我们各个环境的api域名地址，如：<br>NODE_ENV&#x3D;’development’<br>VITE_APP_URL&#x3D;’<a href=\"http://dev.domainapi.com/&#39;\">http://dev.domainapi.com/&#39;</a><br>这里必须以VITE_开头，熟悉vue-cli脚手架的可能知道是VUE_开头的<br>如：VUE_APP_URL&#x3D;’<a href=\"http://dev.domainapi.com/&#39;\">http://dev.domainapi.com/&#39;</a></p>\n<p>然后再在项目中调整配置api，可以用import.meta.env.VITE_APP_API_URL来获取配置文件。</p>\n<p>然后调整package.json<br>删除webpack相关依赖。<br>删除@vue&#x2F;cli-相关依赖。</p>\n<p>删除package-lock.json</p>\n<p>安装vite和vite-plugin-vue2</p>\n<pre><code class=\"bash\">npm install vite@latest\nnpm install vite-plugin-vue2\n</code></pre>\n<p>注：在vite项目里是不支持require引用依赖库的，必须全部调整为import引用。</p>\n<p>把我们的项目结构调整为类似如下结构：<br><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/h/WX20221114-165809%402x.png\" alt=\"image.png\"></p>\n<p>package.json部分如下:</p>\n<pre><code class=\"json\">...\n&quot;scripts&quot;: &#123;\n  &quot;dev&quot;: &quot;vite&quot;,\n  &quot;build:dev&quot;: &quot;vite build --mode development&quot;,\n  &quot;build:qa&quot;: &quot;vite build --mode qa&quot;,\n  &quot;build:pre&quot;: &quot;vite build --mode pre&quot;,\n  &quot;build:prod&quot;: &quot;vite build --mode production&quot;,\n  &quot;build&quot;: &quot;npm run build:prod&quot;,\n  &quot;preview&quot;: &quot;vite preview&quot;\n&#125;,\n&quot;dependencies&quot;: &#123;\n  ...\n  &quot;vue&quot;: &quot;^2.6.11&quot;,\n  &quot;axios&quot;: &quot;^0.15.3&quot;,\n  &quot;iview&quot;: &quot;2.13.1&quot;,\n  &quot;vue-router&quot;: &quot;^2.8.1&quot;,\n  &quot;vuex&quot;: &quot;^2.5.0&quot;,\n&#125;,\n&quot;devDependencies&quot;: &#123;\n  ...\n  &quot;vite-plugin-vue2&quot;: &quot;^2.0.2&quot;,\n  &quot;vite&quot;: &quot;^3.2.3&quot;\n&#125;\n</code></pre>\n<p>index.html如下：</p>\n<pre><code class=\"html\">&lt;body&gt;\n    &lt;div id=&quot;app&quot;&gt;&lt;/div&gt;\n    &lt;script type=&quot;module&quot; src=&quot;/src/main.js&quot;&gt;&lt;/script&gt;\n    &lt;!-- built files will be auto injected --&gt;\n  &lt;/body&gt;\n</code></pre>\n<p>vite.config.js如下：</p>\n<pre><code class=\"js\">import &#123; createVuePlugin &#125; from &quot;vite-plugin-vue2&quot;;\nimport viteCompression from &#39;vite-plugin-compression&#39;; // gizp压缩\nimport &#123; defineConfig &#125; from &quot;vite&quot;;\nimport path from &quot;path&quot;;\n\n/**\n * @param newFilename &#123;string&#125;\n * @returns &#123;import(&#39;vite&#39;).Plugin&#125;\n * @des 可以重命名打包后index.html文件名\n */\n const renameIndexPlugin = newFilename =&gt; &#123;\n  if (!newFilename) return\n\n  return &#123;\n    name: &#39;renameIndex&#39;,\n    enforce: &#39;post&#39;,\n    generateBundle(options, bundle) &#123;\n      const indexHtml = bundle[&#39;index.html&#39;]\n      indexHtml.fileName = newFilename\n    &#125;,\n  &#125;\n&#125;\n\nexport default defineConfig(&#123;\n    base: &#39;/dist/&#39;,\n    plugins: [\n      createVuePlugin(),\n      viteCompression(),\n      renameIndexPlugin(&#39;index_prod.html&#39;)\n    ],\n    envDir:&#39;./env&#39;,\n    server: &#123;\n      host: &#39;localhost&#39;,\n      port: 8080,\n      open: true\n    &#125;,\n    build:&#123;\n      outDir: &#39;dist&#39;,\n      assetsDir: &#39;static&#39;,\n    &#125;,\n    resolve: &#123;\n      alias: [\n        &#123;\n          find: &#39;@&#39;,\n          replacement: path.resolve(__dirname, &quot;src&quot;),\n        &#125;\n      ]\n    &#125;\n&#125;)\n</code></pre>\n<p>这是根据我项目实际配置的，<br>打包后域名路径必须为dist，正常来说默认不需要配置base项，<br>打包后的index.html会改为index_prod.html，正常来说可以去掉renameIndexPlugin()<br>vite-plugin-compression插件为启用gzip压缩，更好的减少我们构建后项目资源的体积。<br>其他具体的配置项也可以去参考Vite官网。</p>\n<p>最后重新删除package-lock.json和node_modules，执行npm install</p>\n<p>运行npm run dev<br>查看报错情况，根据提示一步一步修改问题。</p>\n","site":{"data":{"friends":[{"category":"技术","data":[{"name":"stackblitz","url":"https://stackblitz.com"},{"name":"serverless-devs","url":"http://www.serverless-devs.com/"},{"name":"cypress自动化测试","url":"https://www.cypress.io/"},{"name":"微前端架构","url":"https://micro-frontends.ice.work/"},{"name":"gin+vue进行极速开发的全栈开发基础平台","url":"https://www.gin-vue-admin.com/"},{"name":"cloudbase","url":"https://docs.cloudbase.net/"},{"name":"supabase","url":"https://supabase.com/"}]},{"category":"工具","data":[{"name":"程序员工具集合大全","url":"https://www.bejson.com/"},{"name":"图片处理","url":"https://imagestool.com/zh_CN/index.html"},{"name":"免费在线抠图","url":"https://picwish.cn/"},{"name":"LOGO海报设计","url":"https://www.canva.cn/"},{"name":"图片无损缩放","url":"http://waifu2x.udp.jp/"},{"name":"图片格式转换器","url":"https://renzhezhilu.github.io/webp2jpg-online/"},{"name":"PDF工具集合","url":"https://tools.pdf24.org/zh/"},{"name":"UI直接生成代码","url":"https://code.fun/"},{"name":"markdown转公众号知乎","url":"https://editor.mdnice.com/"},{"name":"油猴脚本库","url":"https://greasyfork.org/zh-CN"},{"name":"代码片段转图片","url":"https://ray.so/"},{"name":"nginx配置器","url":"https://www.digitalocean.com/community/tools/nginx?global.app.lang=zhCN"},{"name":"前端插件库","url":"https://awesomejs.dev/"},{"name":"独特工具箱啥都有","url":"https://www.dute.org/"},{"name":"url编码解码","url":"http://www.jsons.cn/urlencode"},{"name":"菜鸟工具(正则测试等)","url":"https://c.runoob.com/front-end/854/"},{"name":"JSON编辑器格式化","url":"https://www.jsont.run/"},{"name":"七夜导航各类工具集","url":"https://nav.qinight.com/"},{"name":"生活百科wiki","url":"https://zh.wikihow.com/"},{"name":"表情包搜索网站","url":"https://www.dbbqb.com/"},{"name":"果汁工具大全(生活类)","url":"http://guozhivip.com/tool/"},{"name":"谷歌插件国内下载","url":"https://chrome.zzzmh.cn"},{"name":"PDF/图片/视频/音频/格式转换","url":"https://www.aconvert.com/cn/"},{"name":"JSON转各类代码","url":"https://app.quicktype.io/"},{"name":"markdown笔记","url":"https://yank-note.vercel.app"},{"name":"网页版API接口调试(界面清爽)","url":"https://httpie.io/app"},{"name":"在线开发神器手机网页开发同步","url":"https://replit.com/"},{"name":"在网页上运行安卓app","url":"https://www.wolfia.com/"},{"name":"在线工具开发手机web同步开发","url":"https://replit.com/"},{"name":"在线http接口调试","url":"https://httpie.io/app"}]},{"category":"素材","data":[{"name":"免费壁纸","url":"https://wallpaperhub.app"},{"name":"UI设计库","url":"https://screenlane.com/"},{"name":"摄图网","url":"https://699pic.com/"}]},{"category":"学习","data":[{"name":"面试基础知识","url":"https://micro-frontends.ice.work/"},{"name":"各类语言框架语法大全查询","url":"https://socode.pro/"},{"name":"前端人俱乐部","url":"http://f2er.club/"},{"name":"vue3+ts","url":"https://24kcs.github.io/vue3_study/"}]},{"category":"软件","data":[{"name":"正版软件购买","url":"https://apsgo.com/"}]},{"category":"前端","data":[{"name":"图标库","url":"https://iconoir.com/"},{"name":"前端大全","url":"https://docschina.org/"},{"name":"使用 Vue.js 开发小程序的前端框架","url":"http://mpvue.com/"},{"name":"uviewui","url":"https://www.uviewui.com/"},{"name":"varlet","url":"https://varlet.gitee.io/varlet-ui/#/zh-CN/index"},{"name":"vant","url":"https://vant-contrib.gitee.io/vant/#/zh-CN"},{"name":"tdesign","url":"https://tdesign.tencent.com/"},{"name":"前端开发UI素材","url":"https://www.creative-tim.com/"},{"name":"vue-treeselect","url":"https://www.vue-treeselect.cn/"},{"name":"semi","url":"https://semi.design/zh-CN/"},{"name":"tailwindcss","url":"https://www.tailwindcss.cn/"},{"name":"fontawesome图标","url":"https://fontawesome.com/"},{"name":"vantajs动画","url":"https://www.vantajs.com/"},{"name":"视差效果pushinjs","url":"https://nateplusplus.github.io/pushin/"}]}],"photography":[{"thumbnail":"https://thumbnail.jpg","photo":"https://photo.jpg","title":"This is title.","icon":"camera","place":"China"},{"thumbnail":"https://thumbnail.jpg","photo":"https://photo.jpg","title":"This is title.","icon":"camera","place":"China"}]}},"excerpt":"<h2 id=\"老的vue2项目如何升级到Vite\"><a href=\"#老的vue2项目如何升级到Vite\" class=\"headerlink\" title=\"老的vue2项目如何升级到Vite?\"></a>老的vue2项目如何升级到Vite?</h2><p>很多vue2老项目可能是vue-cli脚手架，甚至有的还是webpack构建的。现在都2022年了，对于刚入行前端的同学来说来花时间去学一遍webpack，费时又费力，苦涩又难懂，一堆的配置项，看的头皮发麻。<br>而对于上一代vue-cli脚手架，相比webpack易上手很多，vue-ui的可视化界面搭建配置项目也非常友好。<br>但是，尤大极力推荐Vite才是未来，可以说Vite打遍天下无敌手，是现在最快最好的构建工具。</p>","more":"<p>废话不多说了，上图！</p>\n<p>老vue2 vue-cli脚手架项目资源下载情况：<br><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/h/WeChat3915120712479346fd5eed8f2e4c69f6.png\" alt=\"image.png\"></p>\n<p>升级vite后项目资源下载情况：<br><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/h/WeChatb437da539274f4656abb05d5026522d5.png\" alt=\"image.png\"></p>\n<p>vite构建后面资源体积小了3倍，这里主要也有配置了gzip的功劳。</p>\n<p>再来看构建速度对比：<br><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/h/WeChat04b370310ff4e0130afe2ffe663294b8.png\" alt=\"image.png\"></p>\n<p>Id753构建为老项目构建速度ID754为升级为Vite后的构建速度，构建速度减少了一半！</p>\n<p>在来看项目启动速度<br>老vue2 vue-cli脚手架项目启动速度：16980ms<br><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/h/WechatIMG6821.png\" alt=\"image.png\"></p>\n<p>升级vite后项目启动速度：621ms<br><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/h/WechatIMG6822.png\" alt=\"image.png\"></p>\n<p>快了将近16秒，足足提升了16倍时间！大大节省了我们的开发时间。</p>\n<p>那么vue2老项目如何升级Vite呢？<br>大家可能都知道，Vite对vue3的支持比较好，我们利用Vite去创建项目的时候默认都是vue@3+以上的版本，就像这样：</p>\n<pre><code class=\"json\">&quot;dependencies&quot;: &#123;\n  &quot;vue&quot;: &quot;^3.2.41&quot;\n&#125;,\n&quot;devDependencies&quot;: &#123;\n  &quot;@vitejs/plugin-vue&quot;: &quot;^3.2.0&quot;,\n  &quot;vite&quot;: &quot;^3.2.3&quot;\n&#125;\n</code></pre>\n<p>那么如何让我们vue2的项目也能用到Vite呢？那么需要一个Vite插件 <a href=\"https://github.com/underfin/vite-plugin-vue2\">vite-plugin-vue2</a></p>\n<p>如果是老的webpack项目就删除掉以下几个文件，当然删之前先得看下环境配置，以及是否有一些特殊的配置项，这个根据自己的项目实际情况来。<br><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/h/WX20221114-165721%402x.png\" alt=\"image.png\"></p>\n<p>如果是vue-cli脚手架项目就把vue.config.js改为vite.config.js，webpack项目新增这个配置文件。</p>\n<p>然后根据自己项目的环境配置新建环境配置文件：<br>.evn.development<br>.env.qa<br>.env.pre<br>.env.production</p>\n<p>环境文件内主要配置我们各个环境的api域名地址，如：<br>NODE_ENV&#x3D;’development’<br>VITE_APP_URL&#x3D;’<a href=\"http://dev.domainapi.com/&#39;\">http://dev.domainapi.com/&#39;</a><br>这里必须以VITE_开头，熟悉vue-cli脚手架的可能知道是VUE_开头的<br>如：VUE_APP_URL&#x3D;’<a href=\"http://dev.domainapi.com/&#39;\">http://dev.domainapi.com/&#39;</a></p>\n<p>然后再在项目中调整配置api，可以用import.meta.env.VITE_APP_API_URL来获取配置文件。</p>\n<p>然后调整package.json<br>删除webpack相关依赖。<br>删除@vue&#x2F;cli-相关依赖。</p>\n<p>删除package-lock.json</p>\n<p>安装vite和vite-plugin-vue2</p>\n<pre><code class=\"bash\">npm install vite@latest\nnpm install vite-plugin-vue2\n</code></pre>\n<p>注：在vite项目里是不支持require引用依赖库的，必须全部调整为import引用。</p>\n<p>把我们的项目结构调整为类似如下结构：<br><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/h/WX20221114-165809%402x.png\" alt=\"image.png\"></p>\n<p>package.json部分如下:</p>\n<pre><code class=\"json\">...\n&quot;scripts&quot;: &#123;\n  &quot;dev&quot;: &quot;vite&quot;,\n  &quot;build:dev&quot;: &quot;vite build --mode development&quot;,\n  &quot;build:qa&quot;: &quot;vite build --mode qa&quot;,\n  &quot;build:pre&quot;: &quot;vite build --mode pre&quot;,\n  &quot;build:prod&quot;: &quot;vite build --mode production&quot;,\n  &quot;build&quot;: &quot;npm run build:prod&quot;,\n  &quot;preview&quot;: &quot;vite preview&quot;\n&#125;,\n&quot;dependencies&quot;: &#123;\n  ...\n  &quot;vue&quot;: &quot;^2.6.11&quot;,\n  &quot;axios&quot;: &quot;^0.15.3&quot;,\n  &quot;iview&quot;: &quot;2.13.1&quot;,\n  &quot;vue-router&quot;: &quot;^2.8.1&quot;,\n  &quot;vuex&quot;: &quot;^2.5.0&quot;,\n&#125;,\n&quot;devDependencies&quot;: &#123;\n  ...\n  &quot;vite-plugin-vue2&quot;: &quot;^2.0.2&quot;,\n  &quot;vite&quot;: &quot;^3.2.3&quot;\n&#125;\n</code></pre>\n<p>index.html如下：</p>\n<pre><code class=\"html\">&lt;body&gt;\n    &lt;div id=&quot;app&quot;&gt;&lt;/div&gt;\n    &lt;script type=&quot;module&quot; src=&quot;/src/main.js&quot;&gt;&lt;/script&gt;\n    &lt;!-- built files will be auto injected --&gt;\n  &lt;/body&gt;\n</code></pre>\n<p>vite.config.js如下：</p>\n<pre><code class=\"js\">import &#123; createVuePlugin &#125; from &quot;vite-plugin-vue2&quot;;\nimport viteCompression from &#39;vite-plugin-compression&#39;; // gizp压缩\nimport &#123; defineConfig &#125; from &quot;vite&quot;;\nimport path from &quot;path&quot;;\n\n/**\n * @param newFilename &#123;string&#125;\n * @returns &#123;import(&#39;vite&#39;).Plugin&#125;\n * @des 可以重命名打包后index.html文件名\n */\n const renameIndexPlugin = newFilename =&gt; &#123;\n  if (!newFilename) return\n\n  return &#123;\n    name: &#39;renameIndex&#39;,\n    enforce: &#39;post&#39;,\n    generateBundle(options, bundle) &#123;\n      const indexHtml = bundle[&#39;index.html&#39;]\n      indexHtml.fileName = newFilename\n    &#125;,\n  &#125;\n&#125;\n\nexport default defineConfig(&#123;\n    base: &#39;/dist/&#39;,\n    plugins: [\n      createVuePlugin(),\n      viteCompression(),\n      renameIndexPlugin(&#39;index_prod.html&#39;)\n    ],\n    envDir:&#39;./env&#39;,\n    server: &#123;\n      host: &#39;localhost&#39;,\n      port: 8080,\n      open: true\n    &#125;,\n    build:&#123;\n      outDir: &#39;dist&#39;,\n      assetsDir: &#39;static&#39;,\n    &#125;,\n    resolve: &#123;\n      alias: [\n        &#123;\n          find: &#39;@&#39;,\n          replacement: path.resolve(__dirname, &quot;src&quot;),\n        &#125;\n      ]\n    &#125;\n&#125;)\n</code></pre>\n<p>这是根据我项目实际配置的，<br>打包后域名路径必须为dist，正常来说默认不需要配置base项，<br>打包后的index.html会改为index_prod.html，正常来说可以去掉renameIndexPlugin()<br>vite-plugin-compression插件为启用gzip压缩，更好的减少我们构建后项目资源的体积。<br>其他具体的配置项也可以去参考Vite官网。</p>\n<p>最后重新删除package-lock.json和node_modules，执行npm install</p>\n<p>运行npm run dev<br>查看报错情况，根据提示一步一步修改问题。</p>"},{"title":"vue项目启用压缩gzip","date":"2021-04-06T03:19:00.000Z","_content":"## 1、项目中配置\nVue-cli3.0项目\n安装依赖：compression-webpack-plugin\n<!-- more -->\n```bash\nnpm install compression-webpack-plugin --save-dev\n```\n\n```javascript\nconst CompressionPlugin = require('compression-webpack-plugin');  \nconst productionGzipExtensions = /\\.(js|css|json|txt|html|ico|svg)(\\?.*)?$/i;  \nmodule.exports = {\n    publicPath: './',\n    productionSourceMap: false,\n    configureWebpack: {...},\n    chainWebpack: config => {\n        config.resolve.alias.set('@', resolve('src'));\n        if (process.env.NODE_ENV === 'production') {\n            config.plugin('compressionPlugin')\n            .use(new CompressionPlugin({\n                filename: '[path].gz[query]',\n                algorithm: 'gzip',\n                test: productionGzipExtensions,\n                threshold: 10240,\n                minRatio: 0.8,\n                deleteOriginalAssets: true\n            }));\n        }\n    },\n};\n\n```\n## 2、nginx配置\n服务器启用gzip\n/etc/nginx/nginx.config\n```bash\ngzip on;  \ngzip_static on;  \ngzip_min_length 1k;  \ngzip_buffers 4 32k;  \ngzip_http_version 1.1;  \ngzip_comp_level 2;  \ngzip_types text/plain application/x-javascript text/css application/xml;  \ngzip_vary on;  \ngzip_disable \"MSIE [1-6].\";\n\n```\n然后重启服务器 nginx -s reload\ngzip使用环境:http,server,location,if(x),一般把它定义在nginx.conf的http{…..}之间\n　　gzip on\n　　on为启用，off为关闭\n　　gzip_min_length 1k\n　　设置允许压缩的页面最小字节数，页面字节数从header头中的Content-Length中进行获取。默认值是0，不管页面多大都压缩。建议设置成大于1k的字节数，小于1k可能会越压越大。\n　　gzip_buffers 4 16k\n　　获取多少内存用于缓存压缩结果，‘4 16k’表示以16k*4为单位获得\n　　gzip_comp_level 5\n　　gzip压缩比（1~9），越小压缩效果越差，但是越大处理越慢，所以一般取中间值;\n　　gzip_types text/plain application/x-javascript text/css application/xml text/javascript application/x-httpd-php\n　　对特定的MIME类型生效,其中'text/html’被系统强制启用\n　　gzip_http_version 1.1\n　　识别http协议的版本,早起浏览器可能不支持gzip自解压,用户会看到乱码\n　　gzip_vary on\n　　启用应答头\"Vary: Accept-Encoding\"\n　　gzip_proxied off\n　　nginx做为反向代理时启用,off(关闭所有代理结果的数据的压缩),expired(启用压缩,如果header头中包括\"Expires\"头信息),no-cache(启用压缩,header头中包含\"Cache-Control:no-cache\"),no-store(启用压缩,header头中包含\"Cache-Control:no-store\"),private(启用压缩,header头中包含\"Cache-Control:private\"),no_last_modefied(启用压缩,header头中不包含\"Last-Modified\"),no_etag(启用压缩,如果header头中不包含\"Etag\"头信息),auth(启用压缩,如果header头中包含\"Authorization\"头信息)\n　　gzip_disable msie6\n　　IE5.5和IE6 SP1使用msie6参数来禁止gzip压缩 )指定哪些不需要gzip压缩的浏览器(将和User-Agents进行匹配),依赖于PCRE库\n注：（gzip_static on）Nginx的动态压缩是对每个请求先压缩再输出，这样造成虚拟机浪费了很多cpu，解决这个问题可以利用nginx模块Gzip Precompression，这个模块的作用是对于需要压缩的文件，直接读取已经压缩好的文件(文件名为加.gz)，而不是动态压缩，对于不支持gzip的请求则读取原文件。\n　　1.文件可以使用 gzip 命令来进行压缩，或任何其他兼容的命令。\n　　2.gzip_static配置优先级高于gzip。\n　　3.开启nginx_static后，对于任何文件都会先查找是否有对应的gz文件。\n　　4.gzip_types设置对gzip_static无效。\n　　5.gzip static默认适用HTTP 1.1。\n参考：https://www.cnblogs.com/zigood/p/12504401.html","source":"_posts/vue项目启用压缩gzip.md","raw":"---\ntitle: vue项目启用压缩gzip\ndate: 2021-04-06 11:19\ntags:\n---\n## 1、项目中配置\nVue-cli3.0项目\n安装依赖：compression-webpack-plugin\n<!-- more -->\n```bash\nnpm install compression-webpack-plugin --save-dev\n```\n\n```javascript\nconst CompressionPlugin = require('compression-webpack-plugin');  \nconst productionGzipExtensions = /\\.(js|css|json|txt|html|ico|svg)(\\?.*)?$/i;  \nmodule.exports = {\n    publicPath: './',\n    productionSourceMap: false,\n    configureWebpack: {...},\n    chainWebpack: config => {\n        config.resolve.alias.set('@', resolve('src'));\n        if (process.env.NODE_ENV === 'production') {\n            config.plugin('compressionPlugin')\n            .use(new CompressionPlugin({\n                filename: '[path].gz[query]',\n                algorithm: 'gzip',\n                test: productionGzipExtensions,\n                threshold: 10240,\n                minRatio: 0.8,\n                deleteOriginalAssets: true\n            }));\n        }\n    },\n};\n\n```\n## 2、nginx配置\n服务器启用gzip\n/etc/nginx/nginx.config\n```bash\ngzip on;  \ngzip_static on;  \ngzip_min_length 1k;  \ngzip_buffers 4 32k;  \ngzip_http_version 1.1;  \ngzip_comp_level 2;  \ngzip_types text/plain application/x-javascript text/css application/xml;  \ngzip_vary on;  \ngzip_disable \"MSIE [1-6].\";\n\n```\n然后重启服务器 nginx -s reload\ngzip使用环境:http,server,location,if(x),一般把它定义在nginx.conf的http{…..}之间\n　　gzip on\n　　on为启用，off为关闭\n　　gzip_min_length 1k\n　　设置允许压缩的页面最小字节数，页面字节数从header头中的Content-Length中进行获取。默认值是0，不管页面多大都压缩。建议设置成大于1k的字节数，小于1k可能会越压越大。\n　　gzip_buffers 4 16k\n　　获取多少内存用于缓存压缩结果，‘4 16k’表示以16k*4为单位获得\n　　gzip_comp_level 5\n　　gzip压缩比（1~9），越小压缩效果越差，但是越大处理越慢，所以一般取中间值;\n　　gzip_types text/plain application/x-javascript text/css application/xml text/javascript application/x-httpd-php\n　　对特定的MIME类型生效,其中'text/html’被系统强制启用\n　　gzip_http_version 1.1\n　　识别http协议的版本,早起浏览器可能不支持gzip自解压,用户会看到乱码\n　　gzip_vary on\n　　启用应答头\"Vary: Accept-Encoding\"\n　　gzip_proxied off\n　　nginx做为反向代理时启用,off(关闭所有代理结果的数据的压缩),expired(启用压缩,如果header头中包括\"Expires\"头信息),no-cache(启用压缩,header头中包含\"Cache-Control:no-cache\"),no-store(启用压缩,header头中包含\"Cache-Control:no-store\"),private(启用压缩,header头中包含\"Cache-Control:private\"),no_last_modefied(启用压缩,header头中不包含\"Last-Modified\"),no_etag(启用压缩,如果header头中不包含\"Etag\"头信息),auth(启用压缩,如果header头中包含\"Authorization\"头信息)\n　　gzip_disable msie6\n　　IE5.5和IE6 SP1使用msie6参数来禁止gzip压缩 )指定哪些不需要gzip压缩的浏览器(将和User-Agents进行匹配),依赖于PCRE库\n注：（gzip_static on）Nginx的动态压缩是对每个请求先压缩再输出，这样造成虚拟机浪费了很多cpu，解决这个问题可以利用nginx模块Gzip Precompression，这个模块的作用是对于需要压缩的文件，直接读取已经压缩好的文件(文件名为加.gz)，而不是动态压缩，对于不支持gzip的请求则读取原文件。\n　　1.文件可以使用 gzip 命令来进行压缩，或任何其他兼容的命令。\n　　2.gzip_static配置优先级高于gzip。\n　　3.开启nginx_static后，对于任何文件都会先查找是否有对应的gz文件。\n　　4.gzip_types设置对gzip_static无效。\n　　5.gzip static默认适用HTTP 1.1。\n参考：https://www.cnblogs.com/zigood/p/12504401.html","slug":"vue项目启用压缩gzip","published":1,"updated":"2022-11-02T04:24:55.800Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clagmayfn000c6c84abn40zgu","content":"<h2 id=\"1、项目中配置\"><a href=\"#1、项目中配置\" class=\"headerlink\" title=\"1、项目中配置\"></a>1、项目中配置</h2><p>Vue-cli3.0项目<br>安装依赖：compression-webpack-plugin</p>\n<span id=\"more\"></span>\n<pre><code class=\"bash\">npm install compression-webpack-plugin --save-dev\n</code></pre>\n<pre><code class=\"javascript\">const CompressionPlugin = require(&#39;compression-webpack-plugin&#39;);  \nconst productionGzipExtensions = /\\.(js|css|json|txt|html|ico|svg)(\\?.*)?$/i;  \nmodule.exports = &#123;\n    publicPath: &#39;./&#39;,\n    productionSourceMap: false,\n    configureWebpack: &#123;...&#125;,\n    chainWebpack: config =&gt; &#123;\n        config.resolve.alias.set(&#39;@&#39;, resolve(&#39;src&#39;));\n        if (process.env.NODE_ENV === &#39;production&#39;) &#123;\n            config.plugin(&#39;compressionPlugin&#39;)\n            .use(new CompressionPlugin(&#123;\n                filename: &#39;[path].gz[query]&#39;,\n                algorithm: &#39;gzip&#39;,\n                test: productionGzipExtensions,\n                threshold: 10240,\n                minRatio: 0.8,\n                deleteOriginalAssets: true\n            &#125;));\n        &#125;\n    &#125;,\n&#125;;\n</code></pre>\n<h2 id=\"2、nginx配置\"><a href=\"#2、nginx配置\" class=\"headerlink\" title=\"2、nginx配置\"></a>2、nginx配置</h2><p>服务器启用gzip<br>&#x2F;etc&#x2F;nginx&#x2F;nginx.config</p>\n<pre><code class=\"bash\">gzip on;  \ngzip_static on;  \ngzip_min_length 1k;  \ngzip_buffers 4 32k;  \ngzip_http_version 1.1;  \ngzip_comp_level 2;  \ngzip_types text/plain application/x-javascript text/css application/xml;  \ngzip_vary on;  \ngzip_disable &quot;MSIE [1-6].&quot;;\n</code></pre>\n<p>然后重启服务器 nginx -s reload<br>gzip使用环境:http,server,location,if(x),一般把它定义在nginx.conf的http{…..}之间<br>　　gzip on<br>　　on为启用，off为关闭<br>　　gzip_min_length 1k<br>　　设置允许压缩的页面最小字节数，页面字节数从header头中的Content-Length中进行获取。默认值是0，不管页面多大都压缩。建议设置成大于1k的字节数，小于1k可能会越压越大。<br>　　gzip_buffers 4 16k<br>　　获取多少内存用于缓存压缩结果，‘4 16k’表示以16k*4为单位获得<br>　　gzip_comp_level 5<br>　　gzip压缩比（1~9），越小压缩效果越差，但是越大处理越慢，所以一般取中间值;<br>　　gzip_types text&#x2F;plain application&#x2F;x-javascript text&#x2F;css application&#x2F;xml text&#x2F;javascript application&#x2F;x-httpd-php<br>　　对特定的MIME类型生效,其中’text&#x2F;html’被系统强制启用<br>　　gzip_http_version 1.1<br>　　识别http协议的版本,早起浏览器可能不支持gzip自解压,用户会看到乱码<br>　　gzip_vary on<br>　　启用应答头”Vary: Accept-Encoding”<br>　　gzip_proxied off<br>　　nginx做为反向代理时启用,off(关闭所有代理结果的数据的压缩),expired(启用压缩,如果header头中包括”Expires”头信息),no-cache(启用压缩,header头中包含”Cache-Control:no-cache”),no-store(启用压缩,header头中包含”Cache-Control:no-store”),private(启用压缩,header头中包含”Cache-Control:private”),no_last_modefied(启用压缩,header头中不包含”Last-Modified”),no_etag(启用压缩,如果header头中不包含”Etag”头信息),auth(启用压缩,如果header头中包含”Authorization”头信息)<br>　　gzip_disable msie6<br>　　IE5.5和IE6 SP1使用msie6参数来禁止gzip压缩 )指定哪些不需要gzip压缩的浏览器(将和User-Agents进行匹配),依赖于PCRE库<br>注：（gzip_static on）Nginx的动态压缩是对每个请求先压缩再输出，这样造成虚拟机浪费了很多cpu，解决这个问题可以利用nginx模块Gzip Precompression，这个模块的作用是对于需要压缩的文件，直接读取已经压缩好的文件(文件名为加.gz)，而不是动态压缩，对于不支持gzip的请求则读取原文件。<br>　　1.文件可以使用 gzip 命令来进行压缩，或任何其他兼容的命令。<br>　　2.gzip_static配置优先级高于gzip。<br>　　3.开启nginx_static后，对于任何文件都会先查找是否有对应的gz文件。<br>　　4.gzip_types设置对gzip_static无效。<br>　　5.gzip static默认适用HTTP 1.1。<br>参考：<a href=\"https://www.cnblogs.com/zigood/p/12504401.html\">https://www.cnblogs.com/zigood/p/12504401.html</a></p>\n","site":{"data":{"friends":[{"category":"技术","data":[{"name":"stackblitz","url":"https://stackblitz.com"},{"name":"serverless-devs","url":"http://www.serverless-devs.com/"},{"name":"cypress自动化测试","url":"https://www.cypress.io/"},{"name":"微前端架构","url":"https://micro-frontends.ice.work/"},{"name":"gin+vue进行极速开发的全栈开发基础平台","url":"https://www.gin-vue-admin.com/"},{"name":"cloudbase","url":"https://docs.cloudbase.net/"},{"name":"supabase","url":"https://supabase.com/"}]},{"category":"工具","data":[{"name":"程序员工具集合大全","url":"https://www.bejson.com/"},{"name":"图片处理","url":"https://imagestool.com/zh_CN/index.html"},{"name":"免费在线抠图","url":"https://picwish.cn/"},{"name":"LOGO海报设计","url":"https://www.canva.cn/"},{"name":"图片无损缩放","url":"http://waifu2x.udp.jp/"},{"name":"图片格式转换器","url":"https://renzhezhilu.github.io/webp2jpg-online/"},{"name":"PDF工具集合","url":"https://tools.pdf24.org/zh/"},{"name":"UI直接生成代码","url":"https://code.fun/"},{"name":"markdown转公众号知乎","url":"https://editor.mdnice.com/"},{"name":"油猴脚本库","url":"https://greasyfork.org/zh-CN"},{"name":"代码片段转图片","url":"https://ray.so/"},{"name":"nginx配置器","url":"https://www.digitalocean.com/community/tools/nginx?global.app.lang=zhCN"},{"name":"前端插件库","url":"https://awesomejs.dev/"},{"name":"独特工具箱啥都有","url":"https://www.dute.org/"},{"name":"url编码解码","url":"http://www.jsons.cn/urlencode"},{"name":"菜鸟工具(正则测试等)","url":"https://c.runoob.com/front-end/854/"},{"name":"JSON编辑器格式化","url":"https://www.jsont.run/"},{"name":"七夜导航各类工具集","url":"https://nav.qinight.com/"},{"name":"生活百科wiki","url":"https://zh.wikihow.com/"},{"name":"表情包搜索网站","url":"https://www.dbbqb.com/"},{"name":"果汁工具大全(生活类)","url":"http://guozhivip.com/tool/"},{"name":"谷歌插件国内下载","url":"https://chrome.zzzmh.cn"},{"name":"PDF/图片/视频/音频/格式转换","url":"https://www.aconvert.com/cn/"},{"name":"JSON转各类代码","url":"https://app.quicktype.io/"},{"name":"markdown笔记","url":"https://yank-note.vercel.app"},{"name":"网页版API接口调试(界面清爽)","url":"https://httpie.io/app"},{"name":"在线开发神器手机网页开发同步","url":"https://replit.com/"},{"name":"在网页上运行安卓app","url":"https://www.wolfia.com/"},{"name":"在线工具开发手机web同步开发","url":"https://replit.com/"},{"name":"在线http接口调试","url":"https://httpie.io/app"}]},{"category":"素材","data":[{"name":"免费壁纸","url":"https://wallpaperhub.app"},{"name":"UI设计库","url":"https://screenlane.com/"},{"name":"摄图网","url":"https://699pic.com/"}]},{"category":"学习","data":[{"name":"面试基础知识","url":"https://micro-frontends.ice.work/"},{"name":"各类语言框架语法大全查询","url":"https://socode.pro/"},{"name":"前端人俱乐部","url":"http://f2er.club/"},{"name":"vue3+ts","url":"https://24kcs.github.io/vue3_study/"}]},{"category":"软件","data":[{"name":"正版软件购买","url":"https://apsgo.com/"}]},{"category":"前端","data":[{"name":"图标库","url":"https://iconoir.com/"},{"name":"前端大全","url":"https://docschina.org/"},{"name":"使用 Vue.js 开发小程序的前端框架","url":"http://mpvue.com/"},{"name":"uviewui","url":"https://www.uviewui.com/"},{"name":"varlet","url":"https://varlet.gitee.io/varlet-ui/#/zh-CN/index"},{"name":"vant","url":"https://vant-contrib.gitee.io/vant/#/zh-CN"},{"name":"tdesign","url":"https://tdesign.tencent.com/"},{"name":"前端开发UI素材","url":"https://www.creative-tim.com/"},{"name":"vue-treeselect","url":"https://www.vue-treeselect.cn/"},{"name":"semi","url":"https://semi.design/zh-CN/"},{"name":"tailwindcss","url":"https://www.tailwindcss.cn/"},{"name":"fontawesome图标","url":"https://fontawesome.com/"},{"name":"vantajs动画","url":"https://www.vantajs.com/"},{"name":"视差效果pushinjs","url":"https://nateplusplus.github.io/pushin/"}]}],"photography":[{"thumbnail":"https://thumbnail.jpg","photo":"https://photo.jpg","title":"This is title.","icon":"camera","place":"China"},{"thumbnail":"https://thumbnail.jpg","photo":"https://photo.jpg","title":"This is title.","icon":"camera","place":"China"}]}},"excerpt":"<h2 id=\"1、项目中配置\"><a href=\"#1、项目中配置\" class=\"headerlink\" title=\"1、项目中配置\"></a>1、项目中配置</h2><p>Vue-cli3.0项目<br>安装依赖：compression-webpack-plugin</p>","more":"<pre><code class=\"bash\">npm install compression-webpack-plugin --save-dev\n</code></pre>\n<pre><code class=\"javascript\">const CompressionPlugin = require(&#39;compression-webpack-plugin&#39;);  \nconst productionGzipExtensions = /\\.(js|css|json|txt|html|ico|svg)(\\?.*)?$/i;  \nmodule.exports = &#123;\n    publicPath: &#39;./&#39;,\n    productionSourceMap: false,\n    configureWebpack: &#123;...&#125;,\n    chainWebpack: config =&gt; &#123;\n        config.resolve.alias.set(&#39;@&#39;, resolve(&#39;src&#39;));\n        if (process.env.NODE_ENV === &#39;production&#39;) &#123;\n            config.plugin(&#39;compressionPlugin&#39;)\n            .use(new CompressionPlugin(&#123;\n                filename: &#39;[path].gz[query]&#39;,\n                algorithm: &#39;gzip&#39;,\n                test: productionGzipExtensions,\n                threshold: 10240,\n                minRatio: 0.8,\n                deleteOriginalAssets: true\n            &#125;));\n        &#125;\n    &#125;,\n&#125;;\n</code></pre>\n<h2 id=\"2、nginx配置\"><a href=\"#2、nginx配置\" class=\"headerlink\" title=\"2、nginx配置\"></a>2、nginx配置</h2><p>服务器启用gzip<br>&#x2F;etc&#x2F;nginx&#x2F;nginx.config</p>\n<pre><code class=\"bash\">gzip on;  \ngzip_static on;  \ngzip_min_length 1k;  \ngzip_buffers 4 32k;  \ngzip_http_version 1.1;  \ngzip_comp_level 2;  \ngzip_types text/plain application/x-javascript text/css application/xml;  \ngzip_vary on;  \ngzip_disable &quot;MSIE [1-6].&quot;;\n</code></pre>\n<p>然后重启服务器 nginx -s reload<br>gzip使用环境:http,server,location,if(x),一般把它定义在nginx.conf的http{…..}之间<br>　　gzip on<br>　　on为启用，off为关闭<br>　　gzip_min_length 1k<br>　　设置允许压缩的页面最小字节数，页面字节数从header头中的Content-Length中进行获取。默认值是0，不管页面多大都压缩。建议设置成大于1k的字节数，小于1k可能会越压越大。<br>　　gzip_buffers 4 16k<br>　　获取多少内存用于缓存压缩结果，‘4 16k’表示以16k*4为单位获得<br>　　gzip_comp_level 5<br>　　gzip压缩比（1~9），越小压缩效果越差，但是越大处理越慢，所以一般取中间值;<br>　　gzip_types text&#x2F;plain application&#x2F;x-javascript text&#x2F;css application&#x2F;xml text&#x2F;javascript application&#x2F;x-httpd-php<br>　　对特定的MIME类型生效,其中’text&#x2F;html’被系统强制启用<br>　　gzip_http_version 1.1<br>　　识别http协议的版本,早起浏览器可能不支持gzip自解压,用户会看到乱码<br>　　gzip_vary on<br>　　启用应答头”Vary: Accept-Encoding”<br>　　gzip_proxied off<br>　　nginx做为反向代理时启用,off(关闭所有代理结果的数据的压缩),expired(启用压缩,如果header头中包括”Expires”头信息),no-cache(启用压缩,header头中包含”Cache-Control:no-cache”),no-store(启用压缩,header头中包含”Cache-Control:no-store”),private(启用压缩,header头中包含”Cache-Control:private”),no_last_modefied(启用压缩,header头中不包含”Last-Modified”),no_etag(启用压缩,如果header头中不包含”Etag”头信息),auth(启用压缩,如果header头中包含”Authorization”头信息)<br>　　gzip_disable msie6<br>　　IE5.5和IE6 SP1使用msie6参数来禁止gzip压缩 )指定哪些不需要gzip压缩的浏览器(将和User-Agents进行匹配),依赖于PCRE库<br>注：（gzip_static on）Nginx的动态压缩是对每个请求先压缩再输出，这样造成虚拟机浪费了很多cpu，解决这个问题可以利用nginx模块Gzip Precompression，这个模块的作用是对于需要压缩的文件，直接读取已经压缩好的文件(文件名为加.gz)，而不是动态压缩，对于不支持gzip的请求则读取原文件。<br>　　1.文件可以使用 gzip 命令来进行压缩，或任何其他兼容的命令。<br>　　2.gzip_static配置优先级高于gzip。<br>　　3.开启nginx_static后，对于任何文件都会先查找是否有对应的gz文件。<br>　　4.gzip_types设置对gzip_static无效。<br>　　5.gzip static默认适用HTTP 1.1。<br>参考：<a href=\"https://www.cnblogs.com/zigood/p/12504401.html\">https://www.cnblogs.com/zigood/p/12504401.html</a></p>"},{"title":"一个比localStorage还要好的本地存储 LocalForage","date":"2021-02-25T09:59:00.000Z","_content":"\nlocalForage 是一个 JavaScript 库，通过简单类似 localStorage API 的异步存储来改进你的 Web 应用程序的离线体验。它能存储多种类型的数据，而不仅仅是字符串。\nlocalForage 有一个优雅降级策略，若浏览器不支持 IndexedDB 或 WebSQL，则使用 localStorage。在所有主流浏览器中都可用：Chrome，Firefox，IE 和 Safari（包括 Safari Mobile）。\n<!-- more -->\n\n项目地址:[https://github.com/localForage/localForage](https://github.com/localForage/localForage)\n```bash\nnpm install localforage\n```\n\n\n```javascript\nimport localforage from \"localforage\";\nwindow.localforage = localforage;\n```\n\n\n我们先来对比下两者的区别\n\n| 属性 | localStorage | localForage |\n| :--- | :--- | :--- |\n| 容量 | 5M | 无限制 |\n| 类型 | String/Object | 任何类型 |\n| 读取方式 | 同步 | 异步 |\n\n1、localForage的容量几乎无限制，而localStorage只能存储大约5M的内容，如果内容存储的过多的话，会导致内存的消耗以及页面变卡，非常影响性能。\n2、localForage增删改查的方法几乎和localStorage相同，并且支持回调方法，因为在某些加载存储图片的情况下可能是异步的，所以localForage的异步有效的解决了同步阻塞问题。\n\n\n```javascript\nlocalforage.getItem('keyname', function (err, value) {\n    ...\n});\nlocalforage.setItem('keyname', value, function (err, value) {\n    ...\n});\n```\n\n\n```javascript\nlocalforage.setItem('key', 'value').then(function () {\n  return localforage.getItem('key');\n}).then(function (value) {\n  // we got our value\n}).catch(function (err) {\n  // we got an error\n});\n```\n\n\n3、localStorage一般存储为字符串类型，如果是对象的话，我们需要通过JSON.stringify和JSON.parse转换。但是localForage几乎可以支持任何类型，包括图片base64、blob类型。\n4、那么为什么localForage可以存储那么多内容呢？那是因为他内置了驱动，默认情况他会先去利用[IndexedDB](http://www.ruanyifeng.com/blog/2018/07/indexeddb.html)进行存储，如果浏览器不支持就会用[WebSQL](https://www.runoob.com/html/html5-web-sql.html)来存储，最后才用localStorage。当然你也可以利用setDriver()方法设置特定的驱动来存储。\n\n\n```javascript\nlocalforage.INDEXEDDB\nlocalforage.WEBSQL\nlocalforage.LOCALSTORAGE\n```\n\n\n5、相对于IndexedDB、WebSQL复杂的操作，localforage利用了我们熟悉localStorage增啥改查的方法将数据存储在了IndexedDB、WebSQL、localStorage中，大大减少了开发人员学习的成本，同时也解决了我们本地数据存储时遇到的一些问题。\n\n","source":"_posts/一个比localStorage还要好的本地存储-LocalForage.md","raw":"---\ntitle: 一个比localStorage还要好的本地存储 LocalForage\ndate: 2021-02-25 17:59\ntags:\n---\n\nlocalForage 是一个 JavaScript 库，通过简单类似 localStorage API 的异步存储来改进你的 Web 应用程序的离线体验。它能存储多种类型的数据，而不仅仅是字符串。\nlocalForage 有一个优雅降级策略，若浏览器不支持 IndexedDB 或 WebSQL，则使用 localStorage。在所有主流浏览器中都可用：Chrome，Firefox，IE 和 Safari（包括 Safari Mobile）。\n<!-- more -->\n\n项目地址:[https://github.com/localForage/localForage](https://github.com/localForage/localForage)\n```bash\nnpm install localforage\n```\n\n\n```javascript\nimport localforage from \"localforage\";\nwindow.localforage = localforage;\n```\n\n\n我们先来对比下两者的区别\n\n| 属性 | localStorage | localForage |\n| :--- | :--- | :--- |\n| 容量 | 5M | 无限制 |\n| 类型 | String/Object | 任何类型 |\n| 读取方式 | 同步 | 异步 |\n\n1、localForage的容量几乎无限制，而localStorage只能存储大约5M的内容，如果内容存储的过多的话，会导致内存的消耗以及页面变卡，非常影响性能。\n2、localForage增删改查的方法几乎和localStorage相同，并且支持回调方法，因为在某些加载存储图片的情况下可能是异步的，所以localForage的异步有效的解决了同步阻塞问题。\n\n\n```javascript\nlocalforage.getItem('keyname', function (err, value) {\n    ...\n});\nlocalforage.setItem('keyname', value, function (err, value) {\n    ...\n});\n```\n\n\n```javascript\nlocalforage.setItem('key', 'value').then(function () {\n  return localforage.getItem('key');\n}).then(function (value) {\n  // we got our value\n}).catch(function (err) {\n  // we got an error\n});\n```\n\n\n3、localStorage一般存储为字符串类型，如果是对象的话，我们需要通过JSON.stringify和JSON.parse转换。但是localForage几乎可以支持任何类型，包括图片base64、blob类型。\n4、那么为什么localForage可以存储那么多内容呢？那是因为他内置了驱动，默认情况他会先去利用[IndexedDB](http://www.ruanyifeng.com/blog/2018/07/indexeddb.html)进行存储，如果浏览器不支持就会用[WebSQL](https://www.runoob.com/html/html5-web-sql.html)来存储，最后才用localStorage。当然你也可以利用setDriver()方法设置特定的驱动来存储。\n\n\n```javascript\nlocalforage.INDEXEDDB\nlocalforage.WEBSQL\nlocalforage.LOCALSTORAGE\n```\n\n\n5、相对于IndexedDB、WebSQL复杂的操作，localforage利用了我们熟悉localStorage增啥改查的方法将数据存储在了IndexedDB、WebSQL、localStorage中，大大减少了开发人员学习的成本，同时也解决了我们本地数据存储时遇到的一些问题。\n\n","slug":"一个比localStorage还要好的本地存储-LocalForage","published":1,"updated":"2022-11-02T04:24:55.800Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clagmayfo000d6c849zyz6eay","content":"<p>localForage 是一个 JavaScript 库，通过简单类似 localStorage API 的异步存储来改进你的 Web 应用程序的离线体验。它能存储多种类型的数据，而不仅仅是字符串。<br>localForage 有一个优雅降级策略，若浏览器不支持 IndexedDB 或 WebSQL，则使用 localStorage。在所有主流浏览器中都可用：Chrome，Firefox，IE 和 Safari（包括 Safari Mobile）。</p>\n<span id=\"more\"></span>\n\n<p>项目地址:<a href=\"https://github.com/localForage/localForage\">https://github.com/localForage/localForage</a></p>\n<pre><code class=\"bash\">npm install localforage\n</code></pre>\n<pre><code class=\"javascript\">import localforage from &quot;localforage&quot;;\nwindow.localforage = localforage;\n</code></pre>\n<p>我们先来对比下两者的区别</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">属性</th>\n<th align=\"left\">localStorage</th>\n<th align=\"left\">localForage</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">容量</td>\n<td align=\"left\">5M</td>\n<td align=\"left\">无限制</td>\n</tr>\n<tr>\n<td align=\"left\">类型</td>\n<td align=\"left\">String&#x2F;Object</td>\n<td align=\"left\">任何类型</td>\n</tr>\n<tr>\n<td align=\"left\">读取方式</td>\n<td align=\"left\">同步</td>\n<td align=\"left\">异步</td>\n</tr>\n</tbody></table>\n<p>1、localForage的容量几乎无限制，而localStorage只能存储大约5M的内容，如果内容存储的过多的话，会导致内存的消耗以及页面变卡，非常影响性能。<br>2、localForage增删改查的方法几乎和localStorage相同，并且支持回调方法，因为在某些加载存储图片的情况下可能是异步的，所以localForage的异步有效的解决了同步阻塞问题。</p>\n<pre><code class=\"javascript\">localforage.getItem(&#39;keyname&#39;, function (err, value) &#123;\n    ...\n&#125;);\nlocalforage.setItem(&#39;keyname&#39;, value, function (err, value) &#123;\n    ...\n&#125;);\n</code></pre>\n<pre><code class=\"javascript\">localforage.setItem(&#39;key&#39;, &#39;value&#39;).then(function () &#123;\n  return localforage.getItem(&#39;key&#39;);\n&#125;).then(function (value) &#123;\n  // we got our value\n&#125;).catch(function (err) &#123;\n  // we got an error\n&#125;);\n</code></pre>\n<p>3、localStorage一般存储为字符串类型，如果是对象的话，我们需要通过JSON.stringify和JSON.parse转换。但是localForage几乎可以支持任何类型，包括图片base64、blob类型。<br>4、那么为什么localForage可以存储那么多内容呢？那是因为他内置了驱动，默认情况他会先去利用<a href=\"http://www.ruanyifeng.com/blog/2018/07/indexeddb.html\">IndexedDB</a>进行存储，如果浏览器不支持就会用<a href=\"https://www.runoob.com/html/html5-web-sql.html\">WebSQL</a>来存储，最后才用localStorage。当然你也可以利用setDriver()方法设置特定的驱动来存储。</p>\n<pre><code class=\"javascript\">localforage.INDEXEDDB\nlocalforage.WEBSQL\nlocalforage.LOCALSTORAGE\n</code></pre>\n<p>5、相对于IndexedDB、WebSQL复杂的操作，localforage利用了我们熟悉localStorage增啥改查的方法将数据存储在了IndexedDB、WebSQL、localStorage中，大大减少了开发人员学习的成本，同时也解决了我们本地数据存储时遇到的一些问题。</p>\n","site":{"data":{"friends":[{"category":"技术","data":[{"name":"stackblitz","url":"https://stackblitz.com"},{"name":"serverless-devs","url":"http://www.serverless-devs.com/"},{"name":"cypress自动化测试","url":"https://www.cypress.io/"},{"name":"微前端架构","url":"https://micro-frontends.ice.work/"},{"name":"gin+vue进行极速开发的全栈开发基础平台","url":"https://www.gin-vue-admin.com/"},{"name":"cloudbase","url":"https://docs.cloudbase.net/"},{"name":"supabase","url":"https://supabase.com/"}]},{"category":"工具","data":[{"name":"程序员工具集合大全","url":"https://www.bejson.com/"},{"name":"图片处理","url":"https://imagestool.com/zh_CN/index.html"},{"name":"免费在线抠图","url":"https://picwish.cn/"},{"name":"LOGO海报设计","url":"https://www.canva.cn/"},{"name":"图片无损缩放","url":"http://waifu2x.udp.jp/"},{"name":"图片格式转换器","url":"https://renzhezhilu.github.io/webp2jpg-online/"},{"name":"PDF工具集合","url":"https://tools.pdf24.org/zh/"},{"name":"UI直接生成代码","url":"https://code.fun/"},{"name":"markdown转公众号知乎","url":"https://editor.mdnice.com/"},{"name":"油猴脚本库","url":"https://greasyfork.org/zh-CN"},{"name":"代码片段转图片","url":"https://ray.so/"},{"name":"nginx配置器","url":"https://www.digitalocean.com/community/tools/nginx?global.app.lang=zhCN"},{"name":"前端插件库","url":"https://awesomejs.dev/"},{"name":"独特工具箱啥都有","url":"https://www.dute.org/"},{"name":"url编码解码","url":"http://www.jsons.cn/urlencode"},{"name":"菜鸟工具(正则测试等)","url":"https://c.runoob.com/front-end/854/"},{"name":"JSON编辑器格式化","url":"https://www.jsont.run/"},{"name":"七夜导航各类工具集","url":"https://nav.qinight.com/"},{"name":"生活百科wiki","url":"https://zh.wikihow.com/"},{"name":"表情包搜索网站","url":"https://www.dbbqb.com/"},{"name":"果汁工具大全(生活类)","url":"http://guozhivip.com/tool/"},{"name":"谷歌插件国内下载","url":"https://chrome.zzzmh.cn"},{"name":"PDF/图片/视频/音频/格式转换","url":"https://www.aconvert.com/cn/"},{"name":"JSON转各类代码","url":"https://app.quicktype.io/"},{"name":"markdown笔记","url":"https://yank-note.vercel.app"},{"name":"网页版API接口调试(界面清爽)","url":"https://httpie.io/app"},{"name":"在线开发神器手机网页开发同步","url":"https://replit.com/"},{"name":"在网页上运行安卓app","url":"https://www.wolfia.com/"},{"name":"在线工具开发手机web同步开发","url":"https://replit.com/"},{"name":"在线http接口调试","url":"https://httpie.io/app"}]},{"category":"素材","data":[{"name":"免费壁纸","url":"https://wallpaperhub.app"},{"name":"UI设计库","url":"https://screenlane.com/"},{"name":"摄图网","url":"https://699pic.com/"}]},{"category":"学习","data":[{"name":"面试基础知识","url":"https://micro-frontends.ice.work/"},{"name":"各类语言框架语法大全查询","url":"https://socode.pro/"},{"name":"前端人俱乐部","url":"http://f2er.club/"},{"name":"vue3+ts","url":"https://24kcs.github.io/vue3_study/"}]},{"category":"软件","data":[{"name":"正版软件购买","url":"https://apsgo.com/"}]},{"category":"前端","data":[{"name":"图标库","url":"https://iconoir.com/"},{"name":"前端大全","url":"https://docschina.org/"},{"name":"使用 Vue.js 开发小程序的前端框架","url":"http://mpvue.com/"},{"name":"uviewui","url":"https://www.uviewui.com/"},{"name":"varlet","url":"https://varlet.gitee.io/varlet-ui/#/zh-CN/index"},{"name":"vant","url":"https://vant-contrib.gitee.io/vant/#/zh-CN"},{"name":"tdesign","url":"https://tdesign.tencent.com/"},{"name":"前端开发UI素材","url":"https://www.creative-tim.com/"},{"name":"vue-treeselect","url":"https://www.vue-treeselect.cn/"},{"name":"semi","url":"https://semi.design/zh-CN/"},{"name":"tailwindcss","url":"https://www.tailwindcss.cn/"},{"name":"fontawesome图标","url":"https://fontawesome.com/"},{"name":"vantajs动画","url":"https://www.vantajs.com/"},{"name":"视差效果pushinjs","url":"https://nateplusplus.github.io/pushin/"}]}],"photography":[{"thumbnail":"https://thumbnail.jpg","photo":"https://photo.jpg","title":"This is title.","icon":"camera","place":"China"},{"thumbnail":"https://thumbnail.jpg","photo":"https://photo.jpg","title":"This is title.","icon":"camera","place":"China"}]}},"excerpt":"<p>localForage 是一个 JavaScript 库，通过简单类似 localStorage API 的异步存储来改进你的 Web 应用程序的离线体验。它能存储多种类型的数据，而不仅仅是字符串。<br>localForage 有一个优雅降级策略，若浏览器不支持 IndexedDB 或 WebSQL，则使用 localStorage。在所有主流浏览器中都可用：Chrome，Firefox，IE 和 Safari（包括 Safari Mobile）。</p>","more":"<p>项目地址:<a href=\"https://github.com/localForage/localForage\">https://github.com/localForage/localForage</a></p>\n<pre><code class=\"bash\">npm install localforage\n</code></pre>\n<pre><code class=\"javascript\">import localforage from &quot;localforage&quot;;\nwindow.localforage = localforage;\n</code></pre>\n<p>我们先来对比下两者的区别</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">属性</th>\n<th align=\"left\">localStorage</th>\n<th align=\"left\">localForage</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">容量</td>\n<td align=\"left\">5M</td>\n<td align=\"left\">无限制</td>\n</tr>\n<tr>\n<td align=\"left\">类型</td>\n<td align=\"left\">String&#x2F;Object</td>\n<td align=\"left\">任何类型</td>\n</tr>\n<tr>\n<td align=\"left\">读取方式</td>\n<td align=\"left\">同步</td>\n<td align=\"left\">异步</td>\n</tr>\n</tbody></table>\n<p>1、localForage的容量几乎无限制，而localStorage只能存储大约5M的内容，如果内容存储的过多的话，会导致内存的消耗以及页面变卡，非常影响性能。<br>2、localForage增删改查的方法几乎和localStorage相同，并且支持回调方法，因为在某些加载存储图片的情况下可能是异步的，所以localForage的异步有效的解决了同步阻塞问题。</p>\n<pre><code class=\"javascript\">localforage.getItem(&#39;keyname&#39;, function (err, value) &#123;\n    ...\n&#125;);\nlocalforage.setItem(&#39;keyname&#39;, value, function (err, value) &#123;\n    ...\n&#125;);\n</code></pre>\n<pre><code class=\"javascript\">localforage.setItem(&#39;key&#39;, &#39;value&#39;).then(function () &#123;\n  return localforage.getItem(&#39;key&#39;);\n&#125;).then(function (value) &#123;\n  // we got our value\n&#125;).catch(function (err) &#123;\n  // we got an error\n&#125;);\n</code></pre>\n<p>3、localStorage一般存储为字符串类型，如果是对象的话，我们需要通过JSON.stringify和JSON.parse转换。但是localForage几乎可以支持任何类型，包括图片base64、blob类型。<br>4、那么为什么localForage可以存储那么多内容呢？那是因为他内置了驱动，默认情况他会先去利用<a href=\"http://www.ruanyifeng.com/blog/2018/07/indexeddb.html\">IndexedDB</a>进行存储，如果浏览器不支持就会用<a href=\"https://www.runoob.com/html/html5-web-sql.html\">WebSQL</a>来存储，最后才用localStorage。当然你也可以利用setDriver()方法设置特定的驱动来存储。</p>\n<pre><code class=\"javascript\">localforage.INDEXEDDB\nlocalforage.WEBSQL\nlocalforage.LOCALSTORAGE\n</code></pre>\n<p>5、相对于IndexedDB、WebSQL复杂的操作，localforage利用了我们熟悉localStorage增啥改查的方法将数据存储在了IndexedDB、WebSQL、localStorage中，大大减少了开发人员学习的成本，同时也解决了我们本地数据存储时遇到的一些问题。</p>"},{"title":"利用腾讯云cloudbase快速搭建vue项目到发布","date":"2022-01-28T07:43:00.000Z","sticky":100,"_content":"## 前言\n利用腾讯云的serverless技术--[cloudbase](https://docs.cloudbase.net/)快速搭建项目到部署发布。\n作为一个前端开发，很多时候因为没有后端服务的接口和数据库支持而一筹莫展；一想到搭建一个项目，还要购买服务器、配置数据库等等就觉得麻烦；\n现在，腾讯云提供了一种新的快速上线的云架构，让只会前端的同学也能快速开发一个完整的前后端系统，并且能够支持一键部署，快速上线，低成本、高效率的开发。\n<!-- more -->\n## 搭建环境\n### 一、开通环境\n进入[云开发 CloudBase 控制台](https://console.cloud.tencent.com/tcb)开通CloudBase，腾讯云直接微信扫码登录注册就行。\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/image_1643350234186.png)\n\n选择vue应用模板；\n\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/image_1643350311797.png)\n\n创建环境名称test，计费的话前期有免费额度，然后点击下一步到开通为止。\n\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/image_1643350465793.png)\n\n点击应用进入环境总览；\n\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/image_1643350571129.png)\n\n后面的话主要会用到的就是当前环境的id；\n\n### 二、搭建vue前端项目及一键部署\n#### 1、全局安装 CloudBase CLI\n```bash\nnpm install -g @cloudbase/cli@latest\n```\n\n#### 2、创建vue项目\n```bash\nnpx vue create vue-hello-world\n```\n\n#### 3、发布项目\n```bash\ncd vue-hello-world\ncloudbase framework deploy -e test-4g5kb8yja12f81fb\n\n//或者也可以直接输入cloudbase命令回车，test-4g5kb8yja12f81fb 为刚刚创建的环境id\n\n Tip: cloudbase 命令可以简写为 tcb \n\nCloudBase CLI 1.12.0\nCloudBase Framework 1.9.0\n   ______ __                   __ ____                             \n  / ____// /____   __  __ ____/ // __ ) ____ _ _____ ___           \n / /    / // __ \\ / / / // __  // __  |/ __ `// ___// _ \\          \n/ /___ / // /_/ // /_/ // /_/ // /_/ // /_/ /(__  )/  __/          \n\\____//_/_\\____/ \\__,_/ \\__,_//_____/ \\__,_//____/ \\___/       __  \n   / ____/_____ ____ _ ____ ___   ___  _      __ ____   _____ / /__\n  / /_   / ___// __ `// __ `__ \\ / _ \\| | /| / // __ \\ / ___// //_/\n / __/  / /   / /_/ // / / / / //  __/| |/ |/ // /_/ // /   / ,<   \n/_/    /_/    \\__,_//_/ /_/ /_/ \\___/ |__/|__/ \\____//_/   /_/|_|  \n                                                                   \n\n CloudBase Framework  info     Version v1.9.0\n CloudBase Framework  info     Github: https://github.com/Tencent/cloudbase-framework\n\n CloudBase Framework  info     EnvId test1-4g5kb8yja12f81fb\n CloudBase Framework  info     Region ap-shanghai\n? 请输入应用唯一标识(支持 A-Z a-z 0-9 及 -, 同一环境下不能相同) test\n? 检测到当前项目包含 Vue.js 项目\n\n  🔨 构建脚本 `npm run build`\n  📦 本地静态文件目录 `dist`\n\n  是否需要修改默认配置 No\n? 是否需要保存当前项目配置到项目中 Yes\n CloudBase Framework  info     Validate config file success.\n CloudBase Framework  info     AppName test\n CloudBase Framework  info     📦 install plugins\n CloudBase Framework  info     callHooks 'preDeploy' \n CloudBase Framework  info     🔧 init: vue...\n CloudBase Framework  info     Website 插件会自动开启静态网页托管能力，需要当前环境为 [按量计费] 模式\n CloudBase Framework  info     Website 插件会部署应用资源到当前静态托管的 / 目录下\n CloudBase Framework  info     🔨 build: vue...\n CloudBase Framework  info     running 'npm install --prefer-offline --no-audit --progress=false' \n\nup to date in 594ms\n\n11 packages are looking for funding\n  run `npm fund` for details\n CloudBase Framework  info     running 'npm run build' \n\n> vue-hello-world1@0.1.0 build\n> vue-cli-service build\n\n\n\n\n DONE  Compiled successfully in 1669ms                                                                                      下午2:34:11\n\n  File                                 Size                                           Gzipped\n\n  dist/js/chunk-vendors.4102dc7c.js    94.96 KiB                                      34.02 KiB\n  dist/js/app.ecf66627.js              4.58 KiB                                       1.63 KiB\n  dist/css/app.fb0c6e1c.css            0.33 KiB                                       0.23 KiB\n\n  Images and other types of assets omitted.\n\n DONE  Build complete. The dist directory is ready to be deployed.\n INFO  Check out deployment instructions at https://cli.vuejs.org/guide/deployment.html\n      \n CloudBase Framework  info     🧬 compile: vue...\n CloudBase Framework  info     callHooks 'postCompile' \n正在部署[░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░] 100% 100.2 s\n CloudBase Framework  info     🚀 deploy: vue...\n CloudBase Framework  info     🚀 网站部署成功\n CloudBase Framework  info     callHooks 'postDeploy' \n CloudBase Framework  info     🌐 应用入口信息:\n🔗 网站入口: https://test-4g5kb8yja12f81fb-1256759236.tcloudbaseapp.com/\n CloudBase Framework  info     ✨ done\n```\n\n部署结束后会生成一个访问地址：🔗 网站入口: https://test-4g5kb8yja12f81fb-1256759236.tcloudbaseapp.com/\n\n复制到浏览器地址栏就直接能访问啦~\n\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/image_1643352051889.png)\n\n### 三、配置数据库\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/image_1643352786244.png)\n\n新建一个名为test的集合数据库；\n\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/image_1643352881859.png)\n\n添加文档(创建表)、添加字段\n\n### 四、开发项目(前端操作数据库)\n进入项目根目录，引入cloudbase依赖\n\n```base\n#npm\nnpm install @cloudbase/js-sdk -S\n# yarn\nyarn add @cloudbase/js-sdk\n```\n\n编写查询和新增方法\n\n```js\n<template>\n  <button @click=\"insert\">插入一条数据</button>\n  <button @click=\"search\">查询数据</button>\n  <span v-if=\"result\">{{result}}</span>\n</template>\n\nimport cloudbase from '@cloudbase/js-sdk';\nconst app = cloudbase.init({\n  env: \"test-4g5kb8yja12f81fb\"\n});\nconst db = app.database();\n\nmethods: {\n     search() {\n      let _this = this\n      db.collection(\"test\") // collection() 方法获取一个集合的引用\n      .get() // get() 方法会触发网络请求，往数据库取数据\n      .then(function (res) {\n        _this.result = res\n      });\n    },\t\t\n    insert(){\n      db.collection(\"test\").add({\n        name: 'test',\n        password: '123456'\n      }).then(res=>{\n        alert( JSON.stringify(res),\"插入成功\")\n      })\n    }\n  }\n```\n\n本地测试接口调用，发现没有权限 Permission denied\n\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/image_1643353831460.png)\n\n#### 配置权限\n\n进入控制台登录授权\n官方提供了几种[登录授权](https://docs.cloudbase.net/authentication/auth/introduce)\n当前我们使用未登录模式\n\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/image_1643354158012.png)\n\n在根目录下public/index.html 初始化cloudbase\n\n```html\n<script src=\"//imgcache.qq.com/qcloud/cloudbase-js-sdk/1.6.0/cloudbase.full.js\"></script>\n<script>\n  const app = cloudbase.init({\n    env: 'test-4g5kb8yja12f81fb' // 您的环境id\n  })\n</script>\n```\n\n但是这样做还是不能访问到数据库，因为还需要配置数据库的读写权限。\n进入数据库权限设置。\n\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/image_1643354016007.png)\n\n点击右上角切换到安全规则权限设置，按照如下配置\n\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/image_1643354464046.png)\n\n```json\n{\n  \"read\": \"doc._openid == auth.uid || auth == null\",\n  \"write\": \"doc._openid == auth.uid || auth == null\"\n}\n```\n\n此时点击查询数据和查询，就能够顺利调用接口查询到数据了。\n\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/image_1643354621900.png)\n\n### 五、发布项目及配置域名\n在根目录下再次输入命令 cloudbase framework deploy\n\n```bash\ncloudbase framework deploy\n```\ncloudbase 又会执行npm run build 打包并发布部署到线上环境。\n\n\n#### 自定义域名\n进入静态网站托管，进入详细配置。\n\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/image_1643355011560.png)\n\n点击添加域名\n\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/image_1643355403629.png)\n\n域名必须为https协议，所以提前准备好带有证书的域名。\n\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/image_1643355559005.png)\n\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/image_1643355656598.png)\n\n还需要配置DNS CNAME记录。\n\n等待部署成功就可以访问啦~\nhttps://test.vanterc.com/\n\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/image_1643356325651.png)","source":"_posts/利用腾讯云cloudbase快速搭建vue项目到发布.md","raw":"---\ntitle: 利用腾讯云cloudbase快速搭建vue项目到发布\ndate: 2022-01-28 15:43\nsticky: 100\ntags:\n---\n## 前言\n利用腾讯云的serverless技术--[cloudbase](https://docs.cloudbase.net/)快速搭建项目到部署发布。\n作为一个前端开发，很多时候因为没有后端服务的接口和数据库支持而一筹莫展；一想到搭建一个项目，还要购买服务器、配置数据库等等就觉得麻烦；\n现在，腾讯云提供了一种新的快速上线的云架构，让只会前端的同学也能快速开发一个完整的前后端系统，并且能够支持一键部署，快速上线，低成本、高效率的开发。\n<!-- more -->\n## 搭建环境\n### 一、开通环境\n进入[云开发 CloudBase 控制台](https://console.cloud.tencent.com/tcb)开通CloudBase，腾讯云直接微信扫码登录注册就行。\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/image_1643350234186.png)\n\n选择vue应用模板；\n\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/image_1643350311797.png)\n\n创建环境名称test，计费的话前期有免费额度，然后点击下一步到开通为止。\n\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/image_1643350465793.png)\n\n点击应用进入环境总览；\n\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/image_1643350571129.png)\n\n后面的话主要会用到的就是当前环境的id；\n\n### 二、搭建vue前端项目及一键部署\n#### 1、全局安装 CloudBase CLI\n```bash\nnpm install -g @cloudbase/cli@latest\n```\n\n#### 2、创建vue项目\n```bash\nnpx vue create vue-hello-world\n```\n\n#### 3、发布项目\n```bash\ncd vue-hello-world\ncloudbase framework deploy -e test-4g5kb8yja12f81fb\n\n//或者也可以直接输入cloudbase命令回车，test-4g5kb8yja12f81fb 为刚刚创建的环境id\n\n Tip: cloudbase 命令可以简写为 tcb \n\nCloudBase CLI 1.12.0\nCloudBase Framework 1.9.0\n   ______ __                   __ ____                             \n  / ____// /____   __  __ ____/ // __ ) ____ _ _____ ___           \n / /    / // __ \\ / / / // __  // __  |/ __ `// ___// _ \\          \n/ /___ / // /_/ // /_/ // /_/ // /_/ // /_/ /(__  )/  __/          \n\\____//_/_\\____/ \\__,_/ \\__,_//_____/ \\__,_//____/ \\___/       __  \n   / ____/_____ ____ _ ____ ___   ___  _      __ ____   _____ / /__\n  / /_   / ___// __ `// __ `__ \\ / _ \\| | /| / // __ \\ / ___// //_/\n / __/  / /   / /_/ // / / / / //  __/| |/ |/ // /_/ // /   / ,<   \n/_/    /_/    \\__,_//_/ /_/ /_/ \\___/ |__/|__/ \\____//_/   /_/|_|  \n                                                                   \n\n CloudBase Framework  info     Version v1.9.0\n CloudBase Framework  info     Github: https://github.com/Tencent/cloudbase-framework\n\n CloudBase Framework  info     EnvId test1-4g5kb8yja12f81fb\n CloudBase Framework  info     Region ap-shanghai\n? 请输入应用唯一标识(支持 A-Z a-z 0-9 及 -, 同一环境下不能相同) test\n? 检测到当前项目包含 Vue.js 项目\n\n  🔨 构建脚本 `npm run build`\n  📦 本地静态文件目录 `dist`\n\n  是否需要修改默认配置 No\n? 是否需要保存当前项目配置到项目中 Yes\n CloudBase Framework  info     Validate config file success.\n CloudBase Framework  info     AppName test\n CloudBase Framework  info     📦 install plugins\n CloudBase Framework  info     callHooks 'preDeploy' \n CloudBase Framework  info     🔧 init: vue...\n CloudBase Framework  info     Website 插件会自动开启静态网页托管能力，需要当前环境为 [按量计费] 模式\n CloudBase Framework  info     Website 插件会部署应用资源到当前静态托管的 / 目录下\n CloudBase Framework  info     🔨 build: vue...\n CloudBase Framework  info     running 'npm install --prefer-offline --no-audit --progress=false' \n\nup to date in 594ms\n\n11 packages are looking for funding\n  run `npm fund` for details\n CloudBase Framework  info     running 'npm run build' \n\n> vue-hello-world1@0.1.0 build\n> vue-cli-service build\n\n\n\n\n DONE  Compiled successfully in 1669ms                                                                                      下午2:34:11\n\n  File                                 Size                                           Gzipped\n\n  dist/js/chunk-vendors.4102dc7c.js    94.96 KiB                                      34.02 KiB\n  dist/js/app.ecf66627.js              4.58 KiB                                       1.63 KiB\n  dist/css/app.fb0c6e1c.css            0.33 KiB                                       0.23 KiB\n\n  Images and other types of assets omitted.\n\n DONE  Build complete. The dist directory is ready to be deployed.\n INFO  Check out deployment instructions at https://cli.vuejs.org/guide/deployment.html\n      \n CloudBase Framework  info     🧬 compile: vue...\n CloudBase Framework  info     callHooks 'postCompile' \n正在部署[░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░] 100% 100.2 s\n CloudBase Framework  info     🚀 deploy: vue...\n CloudBase Framework  info     🚀 网站部署成功\n CloudBase Framework  info     callHooks 'postDeploy' \n CloudBase Framework  info     🌐 应用入口信息:\n🔗 网站入口: https://test-4g5kb8yja12f81fb-1256759236.tcloudbaseapp.com/\n CloudBase Framework  info     ✨ done\n```\n\n部署结束后会生成一个访问地址：🔗 网站入口: https://test-4g5kb8yja12f81fb-1256759236.tcloudbaseapp.com/\n\n复制到浏览器地址栏就直接能访问啦~\n\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/image_1643352051889.png)\n\n### 三、配置数据库\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/image_1643352786244.png)\n\n新建一个名为test的集合数据库；\n\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/image_1643352881859.png)\n\n添加文档(创建表)、添加字段\n\n### 四、开发项目(前端操作数据库)\n进入项目根目录，引入cloudbase依赖\n\n```base\n#npm\nnpm install @cloudbase/js-sdk -S\n# yarn\nyarn add @cloudbase/js-sdk\n```\n\n编写查询和新增方法\n\n```js\n<template>\n  <button @click=\"insert\">插入一条数据</button>\n  <button @click=\"search\">查询数据</button>\n  <span v-if=\"result\">{{result}}</span>\n</template>\n\nimport cloudbase from '@cloudbase/js-sdk';\nconst app = cloudbase.init({\n  env: \"test-4g5kb8yja12f81fb\"\n});\nconst db = app.database();\n\nmethods: {\n     search() {\n      let _this = this\n      db.collection(\"test\") // collection() 方法获取一个集合的引用\n      .get() // get() 方法会触发网络请求，往数据库取数据\n      .then(function (res) {\n        _this.result = res\n      });\n    },\t\t\n    insert(){\n      db.collection(\"test\").add({\n        name: 'test',\n        password: '123456'\n      }).then(res=>{\n        alert( JSON.stringify(res),\"插入成功\")\n      })\n    }\n  }\n```\n\n本地测试接口调用，发现没有权限 Permission denied\n\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/image_1643353831460.png)\n\n#### 配置权限\n\n进入控制台登录授权\n官方提供了几种[登录授权](https://docs.cloudbase.net/authentication/auth/introduce)\n当前我们使用未登录模式\n\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/image_1643354158012.png)\n\n在根目录下public/index.html 初始化cloudbase\n\n```html\n<script src=\"//imgcache.qq.com/qcloud/cloudbase-js-sdk/1.6.0/cloudbase.full.js\"></script>\n<script>\n  const app = cloudbase.init({\n    env: 'test-4g5kb8yja12f81fb' // 您的环境id\n  })\n</script>\n```\n\n但是这样做还是不能访问到数据库，因为还需要配置数据库的读写权限。\n进入数据库权限设置。\n\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/image_1643354016007.png)\n\n点击右上角切换到安全规则权限设置，按照如下配置\n\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/image_1643354464046.png)\n\n```json\n{\n  \"read\": \"doc._openid == auth.uid || auth == null\",\n  \"write\": \"doc._openid == auth.uid || auth == null\"\n}\n```\n\n此时点击查询数据和查询，就能够顺利调用接口查询到数据了。\n\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/image_1643354621900.png)\n\n### 五、发布项目及配置域名\n在根目录下再次输入命令 cloudbase framework deploy\n\n```bash\ncloudbase framework deploy\n```\ncloudbase 又会执行npm run build 打包并发布部署到线上环境。\n\n\n#### 自定义域名\n进入静态网站托管，进入详细配置。\n\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/image_1643355011560.png)\n\n点击添加域名\n\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/image_1643355403629.png)\n\n域名必须为https协议，所以提前准备好带有证书的域名。\n\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/image_1643355559005.png)\n\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/image_1643355656598.png)\n\n还需要配置DNS CNAME记录。\n\n等待部署成功就可以访问啦~\nhttps://test.vanterc.com/\n\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/image_1643356325651.png)","slug":"利用腾讯云cloudbase快速搭建vue项目到发布","published":1,"updated":"2022-11-02T04:24:55.800Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clagmayfp000e6c84f0f30id3","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>利用腾讯云的serverless技术–<a href=\"https://docs.cloudbase.net/\">cloudbase</a>快速搭建项目到部署发布。<br>作为一个前端开发，很多时候因为没有后端服务的接口和数据库支持而一筹莫展；一想到搭建一个项目，还要购买服务器、配置数据库等等就觉得麻烦；<br>现在，腾讯云提供了一种新的快速上线的云架构，让只会前端的同学也能快速开发一个完整的前后端系统，并且能够支持一键部署，快速上线，低成本、高效率的开发。</p>\n<span id=\"more\"></span>\n<h2 id=\"搭建环境\"><a href=\"#搭建环境\" class=\"headerlink\" title=\"搭建环境\"></a>搭建环境</h2><h3 id=\"一、开通环境\"><a href=\"#一、开通环境\" class=\"headerlink\" title=\"一、开通环境\"></a>一、开通环境</h3><p>进入<a href=\"https://console.cloud.tencent.com/tcb\">云开发 CloudBase 控制台</a>开通CloudBase，腾讯云直接微信扫码登录注册就行。<br><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/image_1643350234186.png\" alt=\"image.png\"></p>\n<p>选择vue应用模板；</p>\n<p><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/image_1643350311797.png\" alt=\"image.png\"></p>\n<p>创建环境名称test，计费的话前期有免费额度，然后点击下一步到开通为止。</p>\n<p><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/image_1643350465793.png\" alt=\"image.png\"></p>\n<p>点击应用进入环境总览；</p>\n<p><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/image_1643350571129.png\" alt=\"image.png\"></p>\n<p>后面的话主要会用到的就是当前环境的id；</p>\n<h3 id=\"二、搭建vue前端项目及一键部署\"><a href=\"#二、搭建vue前端项目及一键部署\" class=\"headerlink\" title=\"二、搭建vue前端项目及一键部署\"></a>二、搭建vue前端项目及一键部署</h3><h4 id=\"1、全局安装-CloudBase-CLI\"><a href=\"#1、全局安装-CloudBase-CLI\" class=\"headerlink\" title=\"1、全局安装 CloudBase CLI\"></a>1、全局安装 CloudBase CLI</h4><pre><code class=\"bash\">npm install -g @cloudbase/cli@latest\n</code></pre>\n<h4 id=\"2、创建vue项目\"><a href=\"#2、创建vue项目\" class=\"headerlink\" title=\"2、创建vue项目\"></a>2、创建vue项目</h4><pre><code class=\"bash\">npx vue create vue-hello-world\n</code></pre>\n<h4 id=\"3、发布项目\"><a href=\"#3、发布项目\" class=\"headerlink\" title=\"3、发布项目\"></a>3、发布项目</h4><pre><code class=\"bash\">cd vue-hello-world\ncloudbase framework deploy -e test-4g5kb8yja12f81fb\n\n//或者也可以直接输入cloudbase命令回车，test-4g5kb8yja12f81fb 为刚刚创建的环境id\n\n Tip: cloudbase 命令可以简写为 tcb \n\nCloudBase CLI 1.12.0\nCloudBase Framework 1.9.0\n   ______ __                   __ ____                             \n  / ____// /____   __  __ ____/ // __ ) ____ _ _____ ___           \n / /    / // __ \\ / / / // __  // __  |/ __ `// ___// _ \\          \n/ /___ / // /_/ // /_/ // /_/ // /_/ // /_/ /(__  )/  __/          \n\\____//_/_\\____/ \\__,_/ \\__,_//_____/ \\__,_//____/ \\___/       __  \n   / ____/_____ ____ _ ____ ___   ___  _      __ ____   _____ / /__\n  / /_   / ___// __ `// __ `__ \\ / _ \\| | /| / // __ \\ / ___// //_/\n / __/  / /   / /_/ // / / / / //  __/| |/ |/ // /_/ // /   / ,&lt;   \n/_/    /_/    \\__,_//_/ /_/ /_/ \\___/ |__/|__/ \\____//_/   /_/|_|  \n                                                                   \n\n CloudBase Framework  info     Version v1.9.0\n CloudBase Framework  info     Github: https://github.com/Tencent/cloudbase-framework\n\n CloudBase Framework  info     EnvId test1-4g5kb8yja12f81fb\n CloudBase Framework  info     Region ap-shanghai\n? 请输入应用唯一标识(支持 A-Z a-z 0-9 及 -, 同一环境下不能相同) test\n? 检测到当前项目包含 Vue.js 项目\n\n  🔨 构建脚本 `npm run build`\n  📦 本地静态文件目录 `dist`\n\n  是否需要修改默认配置 No\n? 是否需要保存当前项目配置到项目中 Yes\n CloudBase Framework  info     Validate config file success.\n CloudBase Framework  info     AppName test\n CloudBase Framework  info     📦 install plugins\n CloudBase Framework  info     callHooks &#39;preDeploy&#39; \n CloudBase Framework  info     🔧 init: vue...\n CloudBase Framework  info     Website 插件会自动开启静态网页托管能力，需要当前环境为 [按量计费] 模式\n CloudBase Framework  info     Website 插件会部署应用资源到当前静态托管的 / 目录下\n CloudBase Framework  info     🔨 build: vue...\n CloudBase Framework  info     running &#39;npm install --prefer-offline --no-audit --progress=false&#39; \n\nup to date in 594ms\n\n11 packages are looking for funding\n  run `npm fund` for details\n CloudBase Framework  info     running &#39;npm run build&#39; \n\n&gt; vue-hello-world1@0.1.0 build\n&gt; vue-cli-service build\n\n\n\n\n DONE  Compiled successfully in 1669ms                                                                                      下午2:34:11\n\n  File                                 Size                                           Gzipped\n\n  dist/js/chunk-vendors.4102dc7c.js    94.96 KiB                                      34.02 KiB\n  dist/js/app.ecf66627.js              4.58 KiB                                       1.63 KiB\n  dist/css/app.fb0c6e1c.css            0.33 KiB                                       0.23 KiB\n\n  Images and other types of assets omitted.\n\n DONE  Build complete. The dist directory is ready to be deployed.\n INFO  Check out deployment instructions at https://cli.vuejs.org/guide/deployment.html\n      \n CloudBase Framework  info     🧬 compile: vue...\n CloudBase Framework  info     callHooks &#39;postCompile&#39; \n正在部署[░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░] 100% 100.2 s\n CloudBase Framework  info     🚀 deploy: vue...\n CloudBase Framework  info     🚀 网站部署成功\n CloudBase Framework  info     callHooks &#39;postDeploy&#39; \n CloudBase Framework  info     🌐 应用入口信息:\n🔗 网站入口: https://test-4g5kb8yja12f81fb-1256759236.tcloudbaseapp.com/\n CloudBase Framework  info     ✨ done\n</code></pre>\n<p>部署结束后会生成一个访问地址：🔗 网站入口: <a href=\"https://test-4g5kb8yja12f81fb-1256759236.tcloudbaseapp.com/\">https://test-4g5kb8yja12f81fb-1256759236.tcloudbaseapp.com/</a></p>\n<p>复制到浏览器地址栏就直接能访问啦~</p>\n<p><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/image_1643352051889.png\" alt=\"image.png\"></p>\n<h3 id=\"三、配置数据库\"><a href=\"#三、配置数据库\" class=\"headerlink\" title=\"三、配置数据库\"></a>三、配置数据库</h3><p><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/image_1643352786244.png\" alt=\"image.png\"></p>\n<p>新建一个名为test的集合数据库；</p>\n<p><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/image_1643352881859.png\" alt=\"image.png\"></p>\n<p>添加文档(创建表)、添加字段</p>\n<h3 id=\"四、开发项目-前端操作数据库\"><a href=\"#四、开发项目-前端操作数据库\" class=\"headerlink\" title=\"四、开发项目(前端操作数据库)\"></a>四、开发项目(前端操作数据库)</h3><p>进入项目根目录，引入cloudbase依赖</p>\n<pre><code class=\"base\">#npm\nnpm install @cloudbase/js-sdk -S\n# yarn\nyarn add @cloudbase/js-sdk\n</code></pre>\n<p>编写查询和新增方法</p>\n<pre><code class=\"js\">&lt;template&gt;\n  &lt;button @click=&quot;insert&quot;&gt;插入一条数据&lt;/button&gt;\n  &lt;button @click=&quot;search&quot;&gt;查询数据&lt;/button&gt;\n  &lt;span v-if=&quot;result&quot;&gt;&#123;&#123;result&#125;&#125;&lt;/span&gt;\n&lt;/template&gt;\n\nimport cloudbase from &#39;@cloudbase/js-sdk&#39;;\nconst app = cloudbase.init(&#123;\n  env: &quot;test-4g5kb8yja12f81fb&quot;\n&#125;);\nconst db = app.database();\n\nmethods: &#123;\n     search() &#123;\n      let _this = this\n      db.collection(&quot;test&quot;) // collection() 方法获取一个集合的引用\n      .get() // get() 方法会触发网络请求，往数据库取数据\n      .then(function (res) &#123;\n        _this.result = res\n      &#125;);\n    &#125;,\t\t\n    insert()&#123;\n      db.collection(&quot;test&quot;).add(&#123;\n        name: &#39;test&#39;,\n        password: &#39;123456&#39;\n      &#125;).then(res=&gt;&#123;\n        alert( JSON.stringify(res),&quot;插入成功&quot;)\n      &#125;)\n    &#125;\n  &#125;\n</code></pre>\n<p>本地测试接口调用，发现没有权限 Permission denied</p>\n<p><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/image_1643353831460.png\" alt=\"image.png\"></p>\n<h4 id=\"配置权限\"><a href=\"#配置权限\" class=\"headerlink\" title=\"配置权限\"></a>配置权限</h4><p>进入控制台登录授权<br>官方提供了几种<a href=\"https://docs.cloudbase.net/authentication/auth/introduce\">登录授权</a><br>当前我们使用未登录模式</p>\n<p><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/image_1643354158012.png\" alt=\"image.png\"></p>\n<p>在根目录下public&#x2F;index.html 初始化cloudbase</p>\n<pre><code class=\"html\">&lt;script src=&quot;//imgcache.qq.com/qcloud/cloudbase-js-sdk/1.6.0/cloudbase.full.js&quot;&gt;&lt;/script&gt;\n&lt;script&gt;\n  const app = cloudbase.init(&#123;\n    env: &#39;test-4g5kb8yja12f81fb&#39; // 您的环境id\n  &#125;)\n&lt;/script&gt;\n</code></pre>\n<p>但是这样做还是不能访问到数据库，因为还需要配置数据库的读写权限。<br>进入数据库权限设置。</p>\n<p><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/image_1643354016007.png\" alt=\"image.png\"></p>\n<p>点击右上角切换到安全规则权限设置，按照如下配置</p>\n<p><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/image_1643354464046.png\" alt=\"image.png\"></p>\n<pre><code class=\"json\">&#123;\n  &quot;read&quot;: &quot;doc._openid == auth.uid || auth == null&quot;,\n  &quot;write&quot;: &quot;doc._openid == auth.uid || auth == null&quot;\n&#125;\n</code></pre>\n<p>此时点击查询数据和查询，就能够顺利调用接口查询到数据了。</p>\n<p><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/image_1643354621900.png\" alt=\"image.png\"></p>\n<h3 id=\"五、发布项目及配置域名\"><a href=\"#五、发布项目及配置域名\" class=\"headerlink\" title=\"五、发布项目及配置域名\"></a>五、发布项目及配置域名</h3><p>在根目录下再次输入命令 cloudbase framework deploy</p>\n<pre><code class=\"bash\">cloudbase framework deploy\n</code></pre>\n<p>cloudbase 又会执行npm run build 打包并发布部署到线上环境。</p>\n<h4 id=\"自定义域名\"><a href=\"#自定义域名\" class=\"headerlink\" title=\"自定义域名\"></a>自定义域名</h4><p>进入静态网站托管，进入详细配置。</p>\n<p><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/image_1643355011560.png\" alt=\"image.png\"></p>\n<p>点击添加域名</p>\n<p><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/image_1643355403629.png\" alt=\"image.png\"></p>\n<p>域名必须为https协议，所以提前准备好带有证书的域名。</p>\n<p><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/image_1643355559005.png\" alt=\"image.png\"></p>\n<p><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/image_1643355656598.png\" alt=\"image.png\"></p>\n<p>还需要配置DNS CNAME记录。</p>\n<p>等待部署成功就可以访问啦~<br><a href=\"https://test.vanterc.com/\">https://test.vanterc.com/</a></p>\n<p><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/image_1643356325651.png\" alt=\"image.png\"></p>\n","site":{"data":{"friends":[{"category":"技术","data":[{"name":"stackblitz","url":"https://stackblitz.com"},{"name":"serverless-devs","url":"http://www.serverless-devs.com/"},{"name":"cypress自动化测试","url":"https://www.cypress.io/"},{"name":"微前端架构","url":"https://micro-frontends.ice.work/"},{"name":"gin+vue进行极速开发的全栈开发基础平台","url":"https://www.gin-vue-admin.com/"},{"name":"cloudbase","url":"https://docs.cloudbase.net/"},{"name":"supabase","url":"https://supabase.com/"}]},{"category":"工具","data":[{"name":"程序员工具集合大全","url":"https://www.bejson.com/"},{"name":"图片处理","url":"https://imagestool.com/zh_CN/index.html"},{"name":"免费在线抠图","url":"https://picwish.cn/"},{"name":"LOGO海报设计","url":"https://www.canva.cn/"},{"name":"图片无损缩放","url":"http://waifu2x.udp.jp/"},{"name":"图片格式转换器","url":"https://renzhezhilu.github.io/webp2jpg-online/"},{"name":"PDF工具集合","url":"https://tools.pdf24.org/zh/"},{"name":"UI直接生成代码","url":"https://code.fun/"},{"name":"markdown转公众号知乎","url":"https://editor.mdnice.com/"},{"name":"油猴脚本库","url":"https://greasyfork.org/zh-CN"},{"name":"代码片段转图片","url":"https://ray.so/"},{"name":"nginx配置器","url":"https://www.digitalocean.com/community/tools/nginx?global.app.lang=zhCN"},{"name":"前端插件库","url":"https://awesomejs.dev/"},{"name":"独特工具箱啥都有","url":"https://www.dute.org/"},{"name":"url编码解码","url":"http://www.jsons.cn/urlencode"},{"name":"菜鸟工具(正则测试等)","url":"https://c.runoob.com/front-end/854/"},{"name":"JSON编辑器格式化","url":"https://www.jsont.run/"},{"name":"七夜导航各类工具集","url":"https://nav.qinight.com/"},{"name":"生活百科wiki","url":"https://zh.wikihow.com/"},{"name":"表情包搜索网站","url":"https://www.dbbqb.com/"},{"name":"果汁工具大全(生活类)","url":"http://guozhivip.com/tool/"},{"name":"谷歌插件国内下载","url":"https://chrome.zzzmh.cn"},{"name":"PDF/图片/视频/音频/格式转换","url":"https://www.aconvert.com/cn/"},{"name":"JSON转各类代码","url":"https://app.quicktype.io/"},{"name":"markdown笔记","url":"https://yank-note.vercel.app"},{"name":"网页版API接口调试(界面清爽)","url":"https://httpie.io/app"},{"name":"在线开发神器手机网页开发同步","url":"https://replit.com/"},{"name":"在网页上运行安卓app","url":"https://www.wolfia.com/"},{"name":"在线工具开发手机web同步开发","url":"https://replit.com/"},{"name":"在线http接口调试","url":"https://httpie.io/app"}]},{"category":"素材","data":[{"name":"免费壁纸","url":"https://wallpaperhub.app"},{"name":"UI设计库","url":"https://screenlane.com/"},{"name":"摄图网","url":"https://699pic.com/"}]},{"category":"学习","data":[{"name":"面试基础知识","url":"https://micro-frontends.ice.work/"},{"name":"各类语言框架语法大全查询","url":"https://socode.pro/"},{"name":"前端人俱乐部","url":"http://f2er.club/"},{"name":"vue3+ts","url":"https://24kcs.github.io/vue3_study/"}]},{"category":"软件","data":[{"name":"正版软件购买","url":"https://apsgo.com/"}]},{"category":"前端","data":[{"name":"图标库","url":"https://iconoir.com/"},{"name":"前端大全","url":"https://docschina.org/"},{"name":"使用 Vue.js 开发小程序的前端框架","url":"http://mpvue.com/"},{"name":"uviewui","url":"https://www.uviewui.com/"},{"name":"varlet","url":"https://varlet.gitee.io/varlet-ui/#/zh-CN/index"},{"name":"vant","url":"https://vant-contrib.gitee.io/vant/#/zh-CN"},{"name":"tdesign","url":"https://tdesign.tencent.com/"},{"name":"前端开发UI素材","url":"https://www.creative-tim.com/"},{"name":"vue-treeselect","url":"https://www.vue-treeselect.cn/"},{"name":"semi","url":"https://semi.design/zh-CN/"},{"name":"tailwindcss","url":"https://www.tailwindcss.cn/"},{"name":"fontawesome图标","url":"https://fontawesome.com/"},{"name":"vantajs动画","url":"https://www.vantajs.com/"},{"name":"视差效果pushinjs","url":"https://nateplusplus.github.io/pushin/"}]}],"photography":[{"thumbnail":"https://thumbnail.jpg","photo":"https://photo.jpg","title":"This is title.","icon":"camera","place":"China"},{"thumbnail":"https://thumbnail.jpg","photo":"https://photo.jpg","title":"This is title.","icon":"camera","place":"China"}]}},"excerpt":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>利用腾讯云的serverless技术–<a href=\"https://docs.cloudbase.net/\">cloudbase</a>快速搭建项目到部署发布。<br>作为一个前端开发，很多时候因为没有后端服务的接口和数据库支持而一筹莫展；一想到搭建一个项目，还要购买服务器、配置数据库等等就觉得麻烦；<br>现在，腾讯云提供了一种新的快速上线的云架构，让只会前端的同学也能快速开发一个完整的前后端系统，并且能够支持一键部署，快速上线，低成本、高效率的开发。</p>","more":"<h2 id=\"搭建环境\"><a href=\"#搭建环境\" class=\"headerlink\" title=\"搭建环境\"></a>搭建环境</h2><h3 id=\"一、开通环境\"><a href=\"#一、开通环境\" class=\"headerlink\" title=\"一、开通环境\"></a>一、开通环境</h3><p>进入<a href=\"https://console.cloud.tencent.com/tcb\">云开发 CloudBase 控制台</a>开通CloudBase，腾讯云直接微信扫码登录注册就行。<br><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/image_1643350234186.png\" alt=\"image.png\"></p>\n<p>选择vue应用模板；</p>\n<p><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/image_1643350311797.png\" alt=\"image.png\"></p>\n<p>创建环境名称test，计费的话前期有免费额度，然后点击下一步到开通为止。</p>\n<p><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/image_1643350465793.png\" alt=\"image.png\"></p>\n<p>点击应用进入环境总览；</p>\n<p><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/image_1643350571129.png\" alt=\"image.png\"></p>\n<p>后面的话主要会用到的就是当前环境的id；</p>\n<h3 id=\"二、搭建vue前端项目及一键部署\"><a href=\"#二、搭建vue前端项目及一键部署\" class=\"headerlink\" title=\"二、搭建vue前端项目及一键部署\"></a>二、搭建vue前端项目及一键部署</h3><h4 id=\"1、全局安装-CloudBase-CLI\"><a href=\"#1、全局安装-CloudBase-CLI\" class=\"headerlink\" title=\"1、全局安装 CloudBase CLI\"></a>1、全局安装 CloudBase CLI</h4><pre><code class=\"bash\">npm install -g @cloudbase/cli@latest\n</code></pre>\n<h4 id=\"2、创建vue项目\"><a href=\"#2、创建vue项目\" class=\"headerlink\" title=\"2、创建vue项目\"></a>2、创建vue项目</h4><pre><code class=\"bash\">npx vue create vue-hello-world\n</code></pre>\n<h4 id=\"3、发布项目\"><a href=\"#3、发布项目\" class=\"headerlink\" title=\"3、发布项目\"></a>3、发布项目</h4><pre><code class=\"bash\">cd vue-hello-world\ncloudbase framework deploy -e test-4g5kb8yja12f81fb\n\n//或者也可以直接输入cloudbase命令回车，test-4g5kb8yja12f81fb 为刚刚创建的环境id\n\n Tip: cloudbase 命令可以简写为 tcb \n\nCloudBase CLI 1.12.0\nCloudBase Framework 1.9.0\n   ______ __                   __ ____                             \n  / ____// /____   __  __ ____/ // __ ) ____ _ _____ ___           \n / /    / // __ \\ / / / // __  // __  |/ __ `// ___// _ \\          \n/ /___ / // /_/ // /_/ // /_/ // /_/ // /_/ /(__  )/  __/          \n\\____//_/_\\____/ \\__,_/ \\__,_//_____/ \\__,_//____/ \\___/       __  \n   / ____/_____ ____ _ ____ ___   ___  _      __ ____   _____ / /__\n  / /_   / ___// __ `// __ `__ \\ / _ \\| | /| / // __ \\ / ___// //_/\n / __/  / /   / /_/ // / / / / //  __/| |/ |/ // /_/ // /   / ,&lt;   \n/_/    /_/    \\__,_//_/ /_/ /_/ \\___/ |__/|__/ \\____//_/   /_/|_|  \n                                                                   \n\n CloudBase Framework  info     Version v1.9.0\n CloudBase Framework  info     Github: https://github.com/Tencent/cloudbase-framework\n\n CloudBase Framework  info     EnvId test1-4g5kb8yja12f81fb\n CloudBase Framework  info     Region ap-shanghai\n? 请输入应用唯一标识(支持 A-Z a-z 0-9 及 -, 同一环境下不能相同) test\n? 检测到当前项目包含 Vue.js 项目\n\n  🔨 构建脚本 `npm run build`\n  📦 本地静态文件目录 `dist`\n\n  是否需要修改默认配置 No\n? 是否需要保存当前项目配置到项目中 Yes\n CloudBase Framework  info     Validate config file success.\n CloudBase Framework  info     AppName test\n CloudBase Framework  info     📦 install plugins\n CloudBase Framework  info     callHooks &#39;preDeploy&#39; \n CloudBase Framework  info     🔧 init: vue...\n CloudBase Framework  info     Website 插件会自动开启静态网页托管能力，需要当前环境为 [按量计费] 模式\n CloudBase Framework  info     Website 插件会部署应用资源到当前静态托管的 / 目录下\n CloudBase Framework  info     🔨 build: vue...\n CloudBase Framework  info     running &#39;npm install --prefer-offline --no-audit --progress=false&#39; \n\nup to date in 594ms\n\n11 packages are looking for funding\n  run `npm fund` for details\n CloudBase Framework  info     running &#39;npm run build&#39; \n\n&gt; vue-hello-world1@0.1.0 build\n&gt; vue-cli-service build\n\n\n\n\n DONE  Compiled successfully in 1669ms                                                                                      下午2:34:11\n\n  File                                 Size                                           Gzipped\n\n  dist/js/chunk-vendors.4102dc7c.js    94.96 KiB                                      34.02 KiB\n  dist/js/app.ecf66627.js              4.58 KiB                                       1.63 KiB\n  dist/css/app.fb0c6e1c.css            0.33 KiB                                       0.23 KiB\n\n  Images and other types of assets omitted.\n\n DONE  Build complete. The dist directory is ready to be deployed.\n INFO  Check out deployment instructions at https://cli.vuejs.org/guide/deployment.html\n      \n CloudBase Framework  info     🧬 compile: vue...\n CloudBase Framework  info     callHooks &#39;postCompile&#39; \n正在部署[░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░] 100% 100.2 s\n CloudBase Framework  info     🚀 deploy: vue...\n CloudBase Framework  info     🚀 网站部署成功\n CloudBase Framework  info     callHooks &#39;postDeploy&#39; \n CloudBase Framework  info     🌐 应用入口信息:\n🔗 网站入口: https://test-4g5kb8yja12f81fb-1256759236.tcloudbaseapp.com/\n CloudBase Framework  info     ✨ done\n</code></pre>\n<p>部署结束后会生成一个访问地址：🔗 网站入口: <a href=\"https://test-4g5kb8yja12f81fb-1256759236.tcloudbaseapp.com/\">https://test-4g5kb8yja12f81fb-1256759236.tcloudbaseapp.com/</a></p>\n<p>复制到浏览器地址栏就直接能访问啦~</p>\n<p><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/image_1643352051889.png\" alt=\"image.png\"></p>\n<h3 id=\"三、配置数据库\"><a href=\"#三、配置数据库\" class=\"headerlink\" title=\"三、配置数据库\"></a>三、配置数据库</h3><p><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/image_1643352786244.png\" alt=\"image.png\"></p>\n<p>新建一个名为test的集合数据库；</p>\n<p><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/image_1643352881859.png\" alt=\"image.png\"></p>\n<p>添加文档(创建表)、添加字段</p>\n<h3 id=\"四、开发项目-前端操作数据库\"><a href=\"#四、开发项目-前端操作数据库\" class=\"headerlink\" title=\"四、开发项目(前端操作数据库)\"></a>四、开发项目(前端操作数据库)</h3><p>进入项目根目录，引入cloudbase依赖</p>\n<pre><code class=\"base\">#npm\nnpm install @cloudbase/js-sdk -S\n# yarn\nyarn add @cloudbase/js-sdk\n</code></pre>\n<p>编写查询和新增方法</p>\n<pre><code class=\"js\">&lt;template&gt;\n  &lt;button @click=&quot;insert&quot;&gt;插入一条数据&lt;/button&gt;\n  &lt;button @click=&quot;search&quot;&gt;查询数据&lt;/button&gt;\n  &lt;span v-if=&quot;result&quot;&gt;&#123;&#123;result&#125;&#125;&lt;/span&gt;\n&lt;/template&gt;\n\nimport cloudbase from &#39;@cloudbase/js-sdk&#39;;\nconst app = cloudbase.init(&#123;\n  env: &quot;test-4g5kb8yja12f81fb&quot;\n&#125;);\nconst db = app.database();\n\nmethods: &#123;\n     search() &#123;\n      let _this = this\n      db.collection(&quot;test&quot;) // collection() 方法获取一个集合的引用\n      .get() // get() 方法会触发网络请求，往数据库取数据\n      .then(function (res) &#123;\n        _this.result = res\n      &#125;);\n    &#125;,\t\t\n    insert()&#123;\n      db.collection(&quot;test&quot;).add(&#123;\n        name: &#39;test&#39;,\n        password: &#39;123456&#39;\n      &#125;).then(res=&gt;&#123;\n        alert( JSON.stringify(res),&quot;插入成功&quot;)\n      &#125;)\n    &#125;\n  &#125;\n</code></pre>\n<p>本地测试接口调用，发现没有权限 Permission denied</p>\n<p><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/image_1643353831460.png\" alt=\"image.png\"></p>\n<h4 id=\"配置权限\"><a href=\"#配置权限\" class=\"headerlink\" title=\"配置权限\"></a>配置权限</h4><p>进入控制台登录授权<br>官方提供了几种<a href=\"https://docs.cloudbase.net/authentication/auth/introduce\">登录授权</a><br>当前我们使用未登录模式</p>\n<p><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/image_1643354158012.png\" alt=\"image.png\"></p>\n<p>在根目录下public&#x2F;index.html 初始化cloudbase</p>\n<pre><code class=\"html\">&lt;script src=&quot;//imgcache.qq.com/qcloud/cloudbase-js-sdk/1.6.0/cloudbase.full.js&quot;&gt;&lt;/script&gt;\n&lt;script&gt;\n  const app = cloudbase.init(&#123;\n    env: &#39;test-4g5kb8yja12f81fb&#39; // 您的环境id\n  &#125;)\n&lt;/script&gt;\n</code></pre>\n<p>但是这样做还是不能访问到数据库，因为还需要配置数据库的读写权限。<br>进入数据库权限设置。</p>\n<p><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/image_1643354016007.png\" alt=\"image.png\"></p>\n<p>点击右上角切换到安全规则权限设置，按照如下配置</p>\n<p><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/image_1643354464046.png\" alt=\"image.png\"></p>\n<pre><code class=\"json\">&#123;\n  &quot;read&quot;: &quot;doc._openid == auth.uid || auth == null&quot;,\n  &quot;write&quot;: &quot;doc._openid == auth.uid || auth == null&quot;\n&#125;\n</code></pre>\n<p>此时点击查询数据和查询，就能够顺利调用接口查询到数据了。</p>\n<p><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/image_1643354621900.png\" alt=\"image.png\"></p>\n<h3 id=\"五、发布项目及配置域名\"><a href=\"#五、发布项目及配置域名\" class=\"headerlink\" title=\"五、发布项目及配置域名\"></a>五、发布项目及配置域名</h3><p>在根目录下再次输入命令 cloudbase framework deploy</p>\n<pre><code class=\"bash\">cloudbase framework deploy\n</code></pre>\n<p>cloudbase 又会执行npm run build 打包并发布部署到线上环境。</p>\n<h4 id=\"自定义域名\"><a href=\"#自定义域名\" class=\"headerlink\" title=\"自定义域名\"></a>自定义域名</h4><p>进入静态网站托管，进入详细配置。</p>\n<p><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/image_1643355011560.png\" alt=\"image.png\"></p>\n<p>点击添加域名</p>\n<p><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/image_1643355403629.png\" alt=\"image.png\"></p>\n<p>域名必须为https协议，所以提前准备好带有证书的域名。</p>\n<p><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/image_1643355559005.png\" alt=\"image.png\"></p>\n<p><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/image_1643355656598.png\" alt=\"image.png\"></p>\n<p>还需要配置DNS CNAME记录。</p>\n<p>等待部署成功就可以访问啦~<br><a href=\"https://test.vanterc.com/\">https://test.vanterc.com/</a></p>\n<p><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/image_1643356325651.png\" alt=\"image.png\"></p>"},{"title":"微信小程序云开发","date":"2022-09-14T09:57:00.000Z","_content":"\n## 微信小程序云开发\n### 如何利用最快的方式进行小程序的开发？\n传统的购买服务器搭建后端服务的开发方式已经越来越繁重，因为各种的环境配置，服务部署，服务器价格等压力已经让开发软件成本变的越来越高昂。只有让开发变得简单，让开发变的快捷，特别像小程序这类轻应用，如何能在短短几周的时间内从开发到发布上线，变的尤为重要，提高效率，降低成本才是关键。\n<!-- more -->\n### 小程序云开发流程\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/WX20220914-155301%402x.png)\n\n选择云开发 并且创建自己的环境\n前期有一定的免费额度，后面需要收费，价格自行了解\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/WX20220914-160458%402x.png)\n\n熟悉下界面\n云开发提供给我们数据库、云函数(可以理解为后端接口函数)\n利用云函数来开发我们的后端接口\n云函数的底层实现是Node \n所有有Node基础的小伙伴相对来说能够很快上手\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/WX20220914-160747%402x.png)\n\n熟悉下目录结构\ncloudfunctions目录为云函数目录，可以理解为服务端接口目录\nminiprogram目录是小程序前端目录，可以理解为客户端页面\n所以这个云开发的项目是前后端分离的项目\n开发前当前环境一定要选择自己创建的云环境，我这里是test\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/WX20220914-161150%402x.png)\n\n新建一个getUser的云函数，这里会看到工具会自动给我们创建config.json、index.js、package.json三个文件对应云函数的配置、入口、依赖\n我们主要在index.js下编写我们的业务逻辑，也可以说是接口逻辑代码。\n云函数入口文件的依赖也是依赖于微信的sdk，然后初始化sdk。\n接下来就是main函数，它是异步的，并且有两个参数，event用来接受客户端入参，context是当前函数的调用信息。\n通俗的讲main就是接口的入口函数，event通过客户端拿到传递的参数，retrun返回给客户端，就是这么一个很简单的过程。\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/WX20220915-111628%402x.png)\n\n将main下内容改成一个参数计算加法的结果返回给客户端。\n```js\n// 云函数入口函数\nexports.main = async (event, context) => {\n  return {\n    code: 100,\n    data: event.a+event.b,\n    msg:'success'\n  }\n}\n```\n\n保存后右击getUser选择上传并部署\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/WX20220915-113642%402x.png)\n\n这时候打开云开发→云函数下就可以看到刚刚上传的云函数getUser\n这样一个简单的getUser的接口就写好了，下面去前端调用下。\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/WX20220915-113858%402x.png)\n\n在小程序前端目录miniprogram下index目录下index.js下写一个onLoad函数，并且通过wx.cloud.callFunction函数来调用getUser云函数。\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/WX20220915-114458%402x.png)\n\nname为刚刚建的云函数名称，传入a和b参数，重新点击编译按钮，这时候查看network调用情况，可以看到一个云函数接口的调用信息，并且返回了a+b的结果，这就是一个简单的云函数接口调用。\n\n```js\nwx.cloud.callFunction({\n  name:'getUser',\n  data:{\n    a:1,\n    b:2\n  }\n}).then(res=>{\n  console.log(res)\n})\n```\n\n### 如何获取数据库数据？\n首先在数据库内新建一个集合对应数据库表\n添加一条记录，id系统自动生成\n注意这里需要配置好可读写的数据权限，不然可能拿不到数据\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/WX20220915-142413%402x.png)\n\n初始化数据库，并且通过collection来获取表数据\n并且点击云函数上传并部署，完成后再次调用\n\n```js\n// 云函数入口文件\nconst cloud = require('wx-server-sdk')\n\ncloud.init()\nconst db = cloud.database()\n// 云函数入口函数\nexports.main = async (event, context) => {\n  const data = await db.collection('test').get()\n  return {\n    code: 100,\n    data: data,\n    msg:'success'\n  }\n}\n\n// 前端调用\nwx.cloud.callFunction({\n  name:'getUser',\n  data:{}\n}).then(res=>{\n  console.log(res)\n})\n```\n\n可以看到云函数成功返回了数据库test表内的数据。\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/WX20220915-144153%402x.png)\n\n### 直接从前端获取数据库数据\n如何直接从前端获取数据库数据，而不许要通过云函数呢，微信sdk也提供了一种简单的方法\n\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/WX20220915-144900%402x.png)\n\n注意如果使用这种方式获取数据库数据，一定要将数据库的权限配置成所有用户可读写，否则获取不到数据。\n\n```js\nconst db = wx.cloud.database()\ndb.collection('test').get().then(res=>{\n  console.log(res)\n})\n```\n\n## 总结\n微信小程序云函数开发，提供了最快最高效的方式进行了用户与数据的交互，极大的提供了开发的效率，缩短了周期，可以为很多轻量小应用提供最快的上线模式，而不需要像传统开发模式一样，购买服务器部署服务配置环境等等，大大降低了成本。\n","source":"_posts/微信小程序云开发.md","raw":"---\ntitle: 微信小程序云开发\ndate: 2022-09-14 17:57\ntags:\n---\n\n## 微信小程序云开发\n### 如何利用最快的方式进行小程序的开发？\n传统的购买服务器搭建后端服务的开发方式已经越来越繁重，因为各种的环境配置，服务部署，服务器价格等压力已经让开发软件成本变的越来越高昂。只有让开发变得简单，让开发变的快捷，特别像小程序这类轻应用，如何能在短短几周的时间内从开发到发布上线，变的尤为重要，提高效率，降低成本才是关键。\n<!-- more -->\n### 小程序云开发流程\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/WX20220914-155301%402x.png)\n\n选择云开发 并且创建自己的环境\n前期有一定的免费额度，后面需要收费，价格自行了解\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/WX20220914-160458%402x.png)\n\n熟悉下界面\n云开发提供给我们数据库、云函数(可以理解为后端接口函数)\n利用云函数来开发我们的后端接口\n云函数的底层实现是Node \n所有有Node基础的小伙伴相对来说能够很快上手\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/WX20220914-160747%402x.png)\n\n熟悉下目录结构\ncloudfunctions目录为云函数目录，可以理解为服务端接口目录\nminiprogram目录是小程序前端目录，可以理解为客户端页面\n所以这个云开发的项目是前后端分离的项目\n开发前当前环境一定要选择自己创建的云环境，我这里是test\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/WX20220914-161150%402x.png)\n\n新建一个getUser的云函数，这里会看到工具会自动给我们创建config.json、index.js、package.json三个文件对应云函数的配置、入口、依赖\n我们主要在index.js下编写我们的业务逻辑，也可以说是接口逻辑代码。\n云函数入口文件的依赖也是依赖于微信的sdk，然后初始化sdk。\n接下来就是main函数，它是异步的，并且有两个参数，event用来接受客户端入参，context是当前函数的调用信息。\n通俗的讲main就是接口的入口函数，event通过客户端拿到传递的参数，retrun返回给客户端，就是这么一个很简单的过程。\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/WX20220915-111628%402x.png)\n\n将main下内容改成一个参数计算加法的结果返回给客户端。\n```js\n// 云函数入口函数\nexports.main = async (event, context) => {\n  return {\n    code: 100,\n    data: event.a+event.b,\n    msg:'success'\n  }\n}\n```\n\n保存后右击getUser选择上传并部署\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/WX20220915-113642%402x.png)\n\n这时候打开云开发→云函数下就可以看到刚刚上传的云函数getUser\n这样一个简单的getUser的接口就写好了，下面去前端调用下。\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/WX20220915-113858%402x.png)\n\n在小程序前端目录miniprogram下index目录下index.js下写一个onLoad函数，并且通过wx.cloud.callFunction函数来调用getUser云函数。\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/WX20220915-114458%402x.png)\n\nname为刚刚建的云函数名称，传入a和b参数，重新点击编译按钮，这时候查看network调用情况，可以看到一个云函数接口的调用信息，并且返回了a+b的结果，这就是一个简单的云函数接口调用。\n\n```js\nwx.cloud.callFunction({\n  name:'getUser',\n  data:{\n    a:1,\n    b:2\n  }\n}).then(res=>{\n  console.log(res)\n})\n```\n\n### 如何获取数据库数据？\n首先在数据库内新建一个集合对应数据库表\n添加一条记录，id系统自动生成\n注意这里需要配置好可读写的数据权限，不然可能拿不到数据\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/WX20220915-142413%402x.png)\n\n初始化数据库，并且通过collection来获取表数据\n并且点击云函数上传并部署，完成后再次调用\n\n```js\n// 云函数入口文件\nconst cloud = require('wx-server-sdk')\n\ncloud.init()\nconst db = cloud.database()\n// 云函数入口函数\nexports.main = async (event, context) => {\n  const data = await db.collection('test').get()\n  return {\n    code: 100,\n    data: data,\n    msg:'success'\n  }\n}\n\n// 前端调用\nwx.cloud.callFunction({\n  name:'getUser',\n  data:{}\n}).then(res=>{\n  console.log(res)\n})\n```\n\n可以看到云函数成功返回了数据库test表内的数据。\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/WX20220915-144153%402x.png)\n\n### 直接从前端获取数据库数据\n如何直接从前端获取数据库数据，而不许要通过云函数呢，微信sdk也提供了一种简单的方法\n\n![image.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/WX20220915-144900%402x.png)\n\n注意如果使用这种方式获取数据库数据，一定要将数据库的权限配置成所有用户可读写，否则获取不到数据。\n\n```js\nconst db = wx.cloud.database()\ndb.collection('test').get().then(res=>{\n  console.log(res)\n})\n```\n\n## 总结\n微信小程序云函数开发，提供了最快最高效的方式进行了用户与数据的交互，极大的提供了开发的效率，缩短了周期，可以为很多轻量小应用提供最快的上线模式，而不需要像传统开发模式一样，购买服务器部署服务配置环境等等，大大降低了成本。\n","slug":"微信小程序云开发","published":1,"updated":"2022-11-02T04:24:55.800Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clagmayfq000f6c847ce992xf","content":"<h2 id=\"微信小程序云开发\"><a href=\"#微信小程序云开发\" class=\"headerlink\" title=\"微信小程序云开发\"></a>微信小程序云开发</h2><h3 id=\"如何利用最快的方式进行小程序的开发？\"><a href=\"#如何利用最快的方式进行小程序的开发？\" class=\"headerlink\" title=\"如何利用最快的方式进行小程序的开发？\"></a>如何利用最快的方式进行小程序的开发？</h3><p>传统的购买服务器搭建后端服务的开发方式已经越来越繁重，因为各种的环境配置，服务部署，服务器价格等压力已经让开发软件成本变的越来越高昂。只有让开发变得简单，让开发变的快捷，特别像小程序这类轻应用，如何能在短短几周的时间内从开发到发布上线，变的尤为重要，提高效率，降低成本才是关键。</p>\n<span id=\"more\"></span>\n<h3 id=\"小程序云开发流程\"><a href=\"#小程序云开发流程\" class=\"headerlink\" title=\"小程序云开发流程\"></a>小程序云开发流程</h3><p><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/WX20220914-155301%402x.png\" alt=\"image.png\"></p>\n<p>选择云开发 并且创建自己的环境<br>前期有一定的免费额度，后面需要收费，价格自行了解<br><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/WX20220914-160458%402x.png\" alt=\"image.png\"></p>\n<p>熟悉下界面<br>云开发提供给我们数据库、云函数(可以理解为后端接口函数)<br>利用云函数来开发我们的后端接口<br>云函数的底层实现是Node<br>所有有Node基础的小伙伴相对来说能够很快上手<br><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/WX20220914-160747%402x.png\" alt=\"image.png\"></p>\n<p>熟悉下目录结构<br>cloudfunctions目录为云函数目录，可以理解为服务端接口目录<br>miniprogram目录是小程序前端目录，可以理解为客户端页面<br>所以这个云开发的项目是前后端分离的项目<br>开发前当前环境一定要选择自己创建的云环境，我这里是test<br><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/WX20220914-161150%402x.png\" alt=\"image.png\"></p>\n<p>新建一个getUser的云函数，这里会看到工具会自动给我们创建config.json、index.js、package.json三个文件对应云函数的配置、入口、依赖<br>我们主要在index.js下编写我们的业务逻辑，也可以说是接口逻辑代码。<br>云函数入口文件的依赖也是依赖于微信的sdk，然后初始化sdk。<br>接下来就是main函数，它是异步的，并且有两个参数，event用来接受客户端入参，context是当前函数的调用信息。<br>通俗的讲main就是接口的入口函数，event通过客户端拿到传递的参数，retrun返回给客户端，就是这么一个很简单的过程。<br><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/WX20220915-111628%402x.png\" alt=\"image.png\"></p>\n<p>将main下内容改成一个参数计算加法的结果返回给客户端。</p>\n<pre><code class=\"js\">// 云函数入口函数\nexports.main = async (event, context) =&gt; &#123;\n  return &#123;\n    code: 100,\n    data: event.a+event.b,\n    msg:&#39;success&#39;\n  &#125;\n&#125;\n</code></pre>\n<p>保存后右击getUser选择上传并部署<br><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/WX20220915-113642%402x.png\" alt=\"image.png\"></p>\n<p>这时候打开云开发→云函数下就可以看到刚刚上传的云函数getUser<br>这样一个简单的getUser的接口就写好了，下面去前端调用下。<br><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/WX20220915-113858%402x.png\" alt=\"image.png\"></p>\n<p>在小程序前端目录miniprogram下index目录下index.js下写一个onLoad函数，并且通过wx.cloud.callFunction函数来调用getUser云函数。<br><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/WX20220915-114458%402x.png\" alt=\"image.png\"></p>\n<p>name为刚刚建的云函数名称，传入a和b参数，重新点击编译按钮，这时候查看network调用情况，可以看到一个云函数接口的调用信息，并且返回了a+b的结果，这就是一个简单的云函数接口调用。</p>\n<pre><code class=\"js\">wx.cloud.callFunction(&#123;\n  name:&#39;getUser&#39;,\n  data:&#123;\n    a:1,\n    b:2\n  &#125;\n&#125;).then(res=&gt;&#123;\n  console.log(res)\n&#125;)\n</code></pre>\n<h3 id=\"如何获取数据库数据？\"><a href=\"#如何获取数据库数据？\" class=\"headerlink\" title=\"如何获取数据库数据？\"></a>如何获取数据库数据？</h3><p>首先在数据库内新建一个集合对应数据库表<br>添加一条记录，id系统自动生成<br>注意这里需要配置好可读写的数据权限，不然可能拿不到数据<br><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/WX20220915-142413%402x.png\" alt=\"image.png\"></p>\n<p>初始化数据库，并且通过collection来获取表数据<br>并且点击云函数上传并部署，完成后再次调用</p>\n<pre><code class=\"js\">// 云函数入口文件\nconst cloud = require(&#39;wx-server-sdk&#39;)\n\ncloud.init()\nconst db = cloud.database()\n// 云函数入口函数\nexports.main = async (event, context) =&gt; &#123;\n  const data = await db.collection(&#39;test&#39;).get()\n  return &#123;\n    code: 100,\n    data: data,\n    msg:&#39;success&#39;\n  &#125;\n&#125;\n\n// 前端调用\nwx.cloud.callFunction(&#123;\n  name:&#39;getUser&#39;,\n  data:&#123;&#125;\n&#125;).then(res=&gt;&#123;\n  console.log(res)\n&#125;)\n</code></pre>\n<p>可以看到云函数成功返回了数据库test表内的数据。<br><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/WX20220915-144153%402x.png\" alt=\"image.png\"></p>\n<h3 id=\"直接从前端获取数据库数据\"><a href=\"#直接从前端获取数据库数据\" class=\"headerlink\" title=\"直接从前端获取数据库数据\"></a>直接从前端获取数据库数据</h3><p>如何直接从前端获取数据库数据，而不许要通过云函数呢，微信sdk也提供了一种简单的方法</p>\n<p><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/WX20220915-144900%402x.png\" alt=\"image.png\"></p>\n<p>注意如果使用这种方式获取数据库数据，一定要将数据库的权限配置成所有用户可读写，否则获取不到数据。</p>\n<pre><code class=\"js\">const db = wx.cloud.database()\ndb.collection(&#39;test&#39;).get().then(res=&gt;&#123;\n  console.log(res)\n&#125;)\n</code></pre>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>微信小程序云函数开发，提供了最快最高效的方式进行了用户与数据的交互，极大的提供了开发的效率，缩短了周期，可以为很多轻量小应用提供最快的上线模式，而不需要像传统开发模式一样，购买服务器部署服务配置环境等等，大大降低了成本。</p>\n","site":{"data":{"friends":[{"category":"技术","data":[{"name":"stackblitz","url":"https://stackblitz.com"},{"name":"serverless-devs","url":"http://www.serverless-devs.com/"},{"name":"cypress自动化测试","url":"https://www.cypress.io/"},{"name":"微前端架构","url":"https://micro-frontends.ice.work/"},{"name":"gin+vue进行极速开发的全栈开发基础平台","url":"https://www.gin-vue-admin.com/"},{"name":"cloudbase","url":"https://docs.cloudbase.net/"},{"name":"supabase","url":"https://supabase.com/"}]},{"category":"工具","data":[{"name":"程序员工具集合大全","url":"https://www.bejson.com/"},{"name":"图片处理","url":"https://imagestool.com/zh_CN/index.html"},{"name":"免费在线抠图","url":"https://picwish.cn/"},{"name":"LOGO海报设计","url":"https://www.canva.cn/"},{"name":"图片无损缩放","url":"http://waifu2x.udp.jp/"},{"name":"图片格式转换器","url":"https://renzhezhilu.github.io/webp2jpg-online/"},{"name":"PDF工具集合","url":"https://tools.pdf24.org/zh/"},{"name":"UI直接生成代码","url":"https://code.fun/"},{"name":"markdown转公众号知乎","url":"https://editor.mdnice.com/"},{"name":"油猴脚本库","url":"https://greasyfork.org/zh-CN"},{"name":"代码片段转图片","url":"https://ray.so/"},{"name":"nginx配置器","url":"https://www.digitalocean.com/community/tools/nginx?global.app.lang=zhCN"},{"name":"前端插件库","url":"https://awesomejs.dev/"},{"name":"独特工具箱啥都有","url":"https://www.dute.org/"},{"name":"url编码解码","url":"http://www.jsons.cn/urlencode"},{"name":"菜鸟工具(正则测试等)","url":"https://c.runoob.com/front-end/854/"},{"name":"JSON编辑器格式化","url":"https://www.jsont.run/"},{"name":"七夜导航各类工具集","url":"https://nav.qinight.com/"},{"name":"生活百科wiki","url":"https://zh.wikihow.com/"},{"name":"表情包搜索网站","url":"https://www.dbbqb.com/"},{"name":"果汁工具大全(生活类)","url":"http://guozhivip.com/tool/"},{"name":"谷歌插件国内下载","url":"https://chrome.zzzmh.cn"},{"name":"PDF/图片/视频/音频/格式转换","url":"https://www.aconvert.com/cn/"},{"name":"JSON转各类代码","url":"https://app.quicktype.io/"},{"name":"markdown笔记","url":"https://yank-note.vercel.app"},{"name":"网页版API接口调试(界面清爽)","url":"https://httpie.io/app"},{"name":"在线开发神器手机网页开发同步","url":"https://replit.com/"},{"name":"在网页上运行安卓app","url":"https://www.wolfia.com/"},{"name":"在线工具开发手机web同步开发","url":"https://replit.com/"},{"name":"在线http接口调试","url":"https://httpie.io/app"}]},{"category":"素材","data":[{"name":"免费壁纸","url":"https://wallpaperhub.app"},{"name":"UI设计库","url":"https://screenlane.com/"},{"name":"摄图网","url":"https://699pic.com/"}]},{"category":"学习","data":[{"name":"面试基础知识","url":"https://micro-frontends.ice.work/"},{"name":"各类语言框架语法大全查询","url":"https://socode.pro/"},{"name":"前端人俱乐部","url":"http://f2er.club/"},{"name":"vue3+ts","url":"https://24kcs.github.io/vue3_study/"}]},{"category":"软件","data":[{"name":"正版软件购买","url":"https://apsgo.com/"}]},{"category":"前端","data":[{"name":"图标库","url":"https://iconoir.com/"},{"name":"前端大全","url":"https://docschina.org/"},{"name":"使用 Vue.js 开发小程序的前端框架","url":"http://mpvue.com/"},{"name":"uviewui","url":"https://www.uviewui.com/"},{"name":"varlet","url":"https://varlet.gitee.io/varlet-ui/#/zh-CN/index"},{"name":"vant","url":"https://vant-contrib.gitee.io/vant/#/zh-CN"},{"name":"tdesign","url":"https://tdesign.tencent.com/"},{"name":"前端开发UI素材","url":"https://www.creative-tim.com/"},{"name":"vue-treeselect","url":"https://www.vue-treeselect.cn/"},{"name":"semi","url":"https://semi.design/zh-CN/"},{"name":"tailwindcss","url":"https://www.tailwindcss.cn/"},{"name":"fontawesome图标","url":"https://fontawesome.com/"},{"name":"vantajs动画","url":"https://www.vantajs.com/"},{"name":"视差效果pushinjs","url":"https://nateplusplus.github.io/pushin/"}]}],"photography":[{"thumbnail":"https://thumbnail.jpg","photo":"https://photo.jpg","title":"This is title.","icon":"camera","place":"China"},{"thumbnail":"https://thumbnail.jpg","photo":"https://photo.jpg","title":"This is title.","icon":"camera","place":"China"}]}},"excerpt":"<h2 id=\"微信小程序云开发\"><a href=\"#微信小程序云开发\" class=\"headerlink\" title=\"微信小程序云开发\"></a>微信小程序云开发</h2><h3 id=\"如何利用最快的方式进行小程序的开发？\"><a href=\"#如何利用最快的方式进行小程序的开发？\" class=\"headerlink\" title=\"如何利用最快的方式进行小程序的开发？\"></a>如何利用最快的方式进行小程序的开发？</h3><p>传统的购买服务器搭建后端服务的开发方式已经越来越繁重，因为各种的环境配置，服务部署，服务器价格等压力已经让开发软件成本变的越来越高昂。只有让开发变得简单，让开发变的快捷，特别像小程序这类轻应用，如何能在短短几周的时间内从开发到发布上线，变的尤为重要，提高效率，降低成本才是关键。</p>","more":"<h3 id=\"小程序云开发流程\"><a href=\"#小程序云开发流程\" class=\"headerlink\" title=\"小程序云开发流程\"></a>小程序云开发流程</h3><p><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/WX20220914-155301%402x.png\" alt=\"image.png\"></p>\n<p>选择云开发 并且创建自己的环境<br>前期有一定的免费额度，后面需要收费，价格自行了解<br><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/WX20220914-160458%402x.png\" alt=\"image.png\"></p>\n<p>熟悉下界面<br>云开发提供给我们数据库、云函数(可以理解为后端接口函数)<br>利用云函数来开发我们的后端接口<br>云函数的底层实现是Node<br>所有有Node基础的小伙伴相对来说能够很快上手<br><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/WX20220914-160747%402x.png\" alt=\"image.png\"></p>\n<p>熟悉下目录结构<br>cloudfunctions目录为云函数目录，可以理解为服务端接口目录<br>miniprogram目录是小程序前端目录，可以理解为客户端页面<br>所以这个云开发的项目是前后端分离的项目<br>开发前当前环境一定要选择自己创建的云环境，我这里是test<br><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/WX20220914-161150%402x.png\" alt=\"image.png\"></p>\n<p>新建一个getUser的云函数，这里会看到工具会自动给我们创建config.json、index.js、package.json三个文件对应云函数的配置、入口、依赖<br>我们主要在index.js下编写我们的业务逻辑，也可以说是接口逻辑代码。<br>云函数入口文件的依赖也是依赖于微信的sdk，然后初始化sdk。<br>接下来就是main函数，它是异步的，并且有两个参数，event用来接受客户端入参，context是当前函数的调用信息。<br>通俗的讲main就是接口的入口函数，event通过客户端拿到传递的参数，retrun返回给客户端，就是这么一个很简单的过程。<br><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/WX20220915-111628%402x.png\" alt=\"image.png\"></p>\n<p>将main下内容改成一个参数计算加法的结果返回给客户端。</p>\n<pre><code class=\"js\">// 云函数入口函数\nexports.main = async (event, context) =&gt; &#123;\n  return &#123;\n    code: 100,\n    data: event.a+event.b,\n    msg:&#39;success&#39;\n  &#125;\n&#125;\n</code></pre>\n<p>保存后右击getUser选择上传并部署<br><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/WX20220915-113642%402x.png\" alt=\"image.png\"></p>\n<p>这时候打开云开发→云函数下就可以看到刚刚上传的云函数getUser<br>这样一个简单的getUser的接口就写好了，下面去前端调用下。<br><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/WX20220915-113858%402x.png\" alt=\"image.png\"></p>\n<p>在小程序前端目录miniprogram下index目录下index.js下写一个onLoad函数，并且通过wx.cloud.callFunction函数来调用getUser云函数。<br><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/WX20220915-114458%402x.png\" alt=\"image.png\"></p>\n<p>name为刚刚建的云函数名称，传入a和b参数，重新点击编译按钮，这时候查看network调用情况，可以看到一个云函数接口的调用信息，并且返回了a+b的结果，这就是一个简单的云函数接口调用。</p>\n<pre><code class=\"js\">wx.cloud.callFunction(&#123;\n  name:&#39;getUser&#39;,\n  data:&#123;\n    a:1,\n    b:2\n  &#125;\n&#125;).then(res=&gt;&#123;\n  console.log(res)\n&#125;)\n</code></pre>\n<h3 id=\"如何获取数据库数据？\"><a href=\"#如何获取数据库数据？\" class=\"headerlink\" title=\"如何获取数据库数据？\"></a>如何获取数据库数据？</h3><p>首先在数据库内新建一个集合对应数据库表<br>添加一条记录，id系统自动生成<br>注意这里需要配置好可读写的数据权限，不然可能拿不到数据<br><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/WX20220915-142413%402x.png\" alt=\"image.png\"></p>\n<p>初始化数据库，并且通过collection来获取表数据<br>并且点击云函数上传并部署，完成后再次调用</p>\n<pre><code class=\"js\">// 云函数入口文件\nconst cloud = require(&#39;wx-server-sdk&#39;)\n\ncloud.init()\nconst db = cloud.database()\n// 云函数入口函数\nexports.main = async (event, context) =&gt; &#123;\n  const data = await db.collection(&#39;test&#39;).get()\n  return &#123;\n    code: 100,\n    data: data,\n    msg:&#39;success&#39;\n  &#125;\n&#125;\n\n// 前端调用\nwx.cloud.callFunction(&#123;\n  name:&#39;getUser&#39;,\n  data:&#123;&#125;\n&#125;).then(res=&gt;&#123;\n  console.log(res)\n&#125;)\n</code></pre>\n<p>可以看到云函数成功返回了数据库test表内的数据。<br><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/WX20220915-144153%402x.png\" alt=\"image.png\"></p>\n<h3 id=\"直接从前端获取数据库数据\"><a href=\"#直接从前端获取数据库数据\" class=\"headerlink\" title=\"直接从前端获取数据库数据\"></a>直接从前端获取数据库数据</h3><p>如何直接从前端获取数据库数据，而不许要通过云函数呢，微信sdk也提供了一种简单的方法</p>\n<p><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/WX20220915-144900%402x.png\" alt=\"image.png\"></p>\n<p>注意如果使用这种方式获取数据库数据，一定要将数据库的权限配置成所有用户可读写，否则获取不到数据。</p>\n<pre><code class=\"js\">const db = wx.cloud.database()\ndb.collection(&#39;test&#39;).get().then(res=&gt;&#123;\n  console.log(res)\n&#125;)\n</code></pre>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>微信小程序云函数开发，提供了最快最高效的方式进行了用户与数据的交互，极大的提供了开发的效率，缩短了周期，可以为很多轻量小应用提供最快的上线模式，而不需要像传统开发模式一样，购买服务器部署服务配置环境等等，大大降低了成本。</p>"},{"title":"理解vue3组合式API  Setup（一）","date":"2021-06-25T08:18:00.000Z","_content":"[vue3.0](https://v3.cn.vuejs.org/)发布也有一段时间了，用了那么久vue，3.0相比较2.0最大的区别就在于引入了-----组合式API。\n尝试通过尤大最新发布的前端构建工具[Vite](https://cn.vitejs.dev/)(下一代前端编译构建工具)，新建了一个vue3.0的初始项目，很快就发现了与2.0的不同之处如下图：\n<!-- more -->\n![carbon 2.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/carbon%20(2)_1624615490869.png)\n#### [Setup](https://v3.cn.vuejs.org/guide/composition-api-introduction.html#%E4%BB%80%E4%B9%88%E6%98%AF%E7%BB%84%E5%90%88%E5%BC%8F-api)  \n可以看到在script标签旁边多了setup，那么具体是做什么作用呢？\n首先我们要知道尤大引入组合式api的目的是什么？\n**目的是为了解决复杂业务下代码逻辑的碎片化，以便于更好的阅读和维护。**\n![carbon 1.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/carbon%20(1)_1624615396489.png)\n我们现将setup理解为一个用来存放你逻辑代码的地方,并且它有2个参数props和context\n需要注意的一点是：\nsetup在执行时，组件实例尚未被创建，setup 选项中是不存在this的\n### 在生命周期钩子中调用\n![carbon 4.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/carbon%20(4)_1625454437233.png)\n在setup中定义一个方法并将其return，然后就可以在mounted中调用，只有return出的变量或者函数，才可以在setup外部被this调用。\n![carbon 5.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/carbon%20(5)_1625454662080.png)\n同样我们也可以这么写，将生命周期函数放入setup中调用，前提是必须注册生命周期方法onMounted\n选项 API 生命周期选项和组合式 API 之间的映射，详情参加官方api\n- ~~beforeCreate~~ -> use setup()\n\n- ~~created~~ -> use setup()\n\n- beforeMount -> onBeforeMount\n\n- mounted -> onMounted\n\n- beforeUpdate -> onBeforeUpdate\n\n- updated -> onUpdated\n\n- beforeUnmount -> onBeforeUnmount\n\n- unmounted -> onUnmounted\n\n- errorCaptured -> onErrorCaptured\n\n- renderTracked -> onRenderTracked\n\n- renderTriggered -> onRenderTriggered\n\n- activated -> onActivated\n\n- deactivated -> onDeactivated\n\n这里要说的一点是setup内，相当于之前的created钩子，也就是说是最先执行的\n下面来引入一个新的函数\n### [ref](https://v3.cn.vuejs.org/guide/composition-api-introduction.html#%E5%B8%A6-ref-%E7%9A%84%E5%93%8D%E5%BA%94%E5%BC%8F%E5%8F%98%E9%87%8F)\n![carbon 7.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/carbon%20(7)_1625455356513.png)\nref 函数使任何响应式变量在任何地方起作用\n### watch监听\n![carbon 8.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/carbon%20(8)_1625456544045.png)\n我们用ref来定义一个计数器变量，在setup中用watch来监听计数变化\n### computed 计算属性\n![carbon 9.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/carbon%20(9)_1625464411330.png)\n计算属性twiceTheCounter，需要像ref 一样使用 .value 来获取值\n","source":"_posts/理解vue3组合式API-Setup（一）.md","raw":"---\ntitle: 理解vue3组合式API  Setup（一）\ndate: 2021-06-25 16:18\ntags:\n---\n[vue3.0](https://v3.cn.vuejs.org/)发布也有一段时间了，用了那么久vue，3.0相比较2.0最大的区别就在于引入了-----组合式API。\n尝试通过尤大最新发布的前端构建工具[Vite](https://cn.vitejs.dev/)(下一代前端编译构建工具)，新建了一个vue3.0的初始项目，很快就发现了与2.0的不同之处如下图：\n<!-- more -->\n![carbon 2.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/carbon%20(2)_1624615490869.png)\n#### [Setup](https://v3.cn.vuejs.org/guide/composition-api-introduction.html#%E4%BB%80%E4%B9%88%E6%98%AF%E7%BB%84%E5%90%88%E5%BC%8F-api)  \n可以看到在script标签旁边多了setup，那么具体是做什么作用呢？\n首先我们要知道尤大引入组合式api的目的是什么？\n**目的是为了解决复杂业务下代码逻辑的碎片化，以便于更好的阅读和维护。**\n![carbon 1.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/carbon%20(1)_1624615396489.png)\n我们现将setup理解为一个用来存放你逻辑代码的地方,并且它有2个参数props和context\n需要注意的一点是：\nsetup在执行时，组件实例尚未被创建，setup 选项中是不存在this的\n### 在生命周期钩子中调用\n![carbon 4.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/carbon%20(4)_1625454437233.png)\n在setup中定义一个方法并将其return，然后就可以在mounted中调用，只有return出的变量或者函数，才可以在setup外部被this调用。\n![carbon 5.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/carbon%20(5)_1625454662080.png)\n同样我们也可以这么写，将生命周期函数放入setup中调用，前提是必须注册生命周期方法onMounted\n选项 API 生命周期选项和组合式 API 之间的映射，详情参加官方api\n- ~~beforeCreate~~ -> use setup()\n\n- ~~created~~ -> use setup()\n\n- beforeMount -> onBeforeMount\n\n- mounted -> onMounted\n\n- beforeUpdate -> onBeforeUpdate\n\n- updated -> onUpdated\n\n- beforeUnmount -> onBeforeUnmount\n\n- unmounted -> onUnmounted\n\n- errorCaptured -> onErrorCaptured\n\n- renderTracked -> onRenderTracked\n\n- renderTriggered -> onRenderTriggered\n\n- activated -> onActivated\n\n- deactivated -> onDeactivated\n\n这里要说的一点是setup内，相当于之前的created钩子，也就是说是最先执行的\n下面来引入一个新的函数\n### [ref](https://v3.cn.vuejs.org/guide/composition-api-introduction.html#%E5%B8%A6-ref-%E7%9A%84%E5%93%8D%E5%BA%94%E5%BC%8F%E5%8F%98%E9%87%8F)\n![carbon 7.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/carbon%20(7)_1625455356513.png)\nref 函数使任何响应式变量在任何地方起作用\n### watch监听\n![carbon 8.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/carbon%20(8)_1625456544045.png)\n我们用ref来定义一个计数器变量，在setup中用watch来监听计数变化\n### computed 计算属性\n![carbon 9.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/carbon%20(9)_1625464411330.png)\n计算属性twiceTheCounter，需要像ref 一样使用 .value 来获取值\n","slug":"理解vue3组合式API-Setup（一）","published":1,"updated":"2022-11-02T04:24:55.800Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clagmayfr000g6c8410l7aoo2","content":"<p><a href=\"https://v3.cn.vuejs.org/\">vue3.0</a>发布也有一段时间了，用了那么久vue，3.0相比较2.0最大的区别就在于引入了—–组合式API。<br>尝试通过尤大最新发布的前端构建工具<a href=\"https://cn.vitejs.dev/\">Vite</a>(下一代前端编译构建工具)，新建了一个vue3.0的初始项目，很快就发现了与2.0的不同之处如下图：</p>\n<span id=\"more\"></span>\n<p><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/carbon%20(2)_1624615490869.png\" alt=\"carbon 2.png\"></p>\n<h4 id=\"Setup\"><a href=\"#Setup\" class=\"headerlink\" title=\"Setup\"></a><a href=\"https://v3.cn.vuejs.org/guide/composition-api-introduction.html#%E4%BB%80%E4%B9%88%E6%98%AF%E7%BB%84%E5%90%88%E5%BC%8F-api\">Setup</a></h4><p>可以看到在script标签旁边多了setup，那么具体是做什么作用呢？<br>首先我们要知道尤大引入组合式api的目的是什么？<br><strong>目的是为了解决复杂业务下代码逻辑的碎片化，以便于更好的阅读和维护。</strong><br><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/carbon%20(1)_1624615396489.png\" alt=\"carbon 1.png\"><br>我们现将setup理解为一个用来存放你逻辑代码的地方,并且它有2个参数props和context<br>需要注意的一点是：<br>setup在执行时，组件实例尚未被创建，setup 选项中是不存在this的</p>\n<h3 id=\"在生命周期钩子中调用\"><a href=\"#在生命周期钩子中调用\" class=\"headerlink\" title=\"在生命周期钩子中调用\"></a>在生命周期钩子中调用</h3><p><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/carbon%20(4)_1625454437233.png\" alt=\"carbon 4.png\"><br>在setup中定义一个方法并将其return，然后就可以在mounted中调用，只有return出的变量或者函数，才可以在setup外部被this调用。<br><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/carbon%20(5)_1625454662080.png\" alt=\"carbon 5.png\"><br>同样我们也可以这么写，将生命周期函数放入setup中调用，前提是必须注册生命周期方法onMounted<br>选项 API 生命周期选项和组合式 API 之间的映射，详情参加官方api</p>\n<ul>\n<li><p><del>beforeCreate</del> -&gt; use setup()</p>\n</li>\n<li><p><del>created</del> -&gt; use setup()</p>\n</li>\n<li><p>beforeMount -&gt; onBeforeMount</p>\n</li>\n<li><p>mounted -&gt; onMounted</p>\n</li>\n<li><p>beforeUpdate -&gt; onBeforeUpdate</p>\n</li>\n<li><p>updated -&gt; onUpdated</p>\n</li>\n<li><p>beforeUnmount -&gt; onBeforeUnmount</p>\n</li>\n<li><p>unmounted -&gt; onUnmounted</p>\n</li>\n<li><p>errorCaptured -&gt; onErrorCaptured</p>\n</li>\n<li><p>renderTracked -&gt; onRenderTracked</p>\n</li>\n<li><p>renderTriggered -&gt; onRenderTriggered</p>\n</li>\n<li><p>activated -&gt; onActivated</p>\n</li>\n<li><p>deactivated -&gt; onDeactivated</p>\n</li>\n</ul>\n<p>这里要说的一点是setup内，相当于之前的created钩子，也就是说是最先执行的<br>下面来引入一个新的函数</p>\n<h3 id=\"ref\"><a href=\"#ref\" class=\"headerlink\" title=\"ref\"></a><a href=\"https://v3.cn.vuejs.org/guide/composition-api-introduction.html#%E5%B8%A6-ref-%E7%9A%84%E5%93%8D%E5%BA%94%E5%BC%8F%E5%8F%98%E9%87%8F\">ref</a></h3><p><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/carbon%20(7)_1625455356513.png\" alt=\"carbon 7.png\"><br>ref 函数使任何响应式变量在任何地方起作用</p>\n<h3 id=\"watch监听\"><a href=\"#watch监听\" class=\"headerlink\" title=\"watch监听\"></a>watch监听</h3><p><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/carbon%20(8)_1625456544045.png\" alt=\"carbon 8.png\"><br>我们用ref来定义一个计数器变量，在setup中用watch来监听计数变化</p>\n<h3 id=\"computed-计算属性\"><a href=\"#computed-计算属性\" class=\"headerlink\" title=\"computed 计算属性\"></a>computed 计算属性</h3><p><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/carbon%20(9)_1625464411330.png\" alt=\"carbon 9.png\"><br>计算属性twiceTheCounter，需要像ref 一样使用 .value 来获取值</p>\n","site":{"data":{"friends":[{"category":"技术","data":[{"name":"stackblitz","url":"https://stackblitz.com"},{"name":"serverless-devs","url":"http://www.serverless-devs.com/"},{"name":"cypress自动化测试","url":"https://www.cypress.io/"},{"name":"微前端架构","url":"https://micro-frontends.ice.work/"},{"name":"gin+vue进行极速开发的全栈开发基础平台","url":"https://www.gin-vue-admin.com/"},{"name":"cloudbase","url":"https://docs.cloudbase.net/"},{"name":"supabase","url":"https://supabase.com/"}]},{"category":"工具","data":[{"name":"程序员工具集合大全","url":"https://www.bejson.com/"},{"name":"图片处理","url":"https://imagestool.com/zh_CN/index.html"},{"name":"免费在线抠图","url":"https://picwish.cn/"},{"name":"LOGO海报设计","url":"https://www.canva.cn/"},{"name":"图片无损缩放","url":"http://waifu2x.udp.jp/"},{"name":"图片格式转换器","url":"https://renzhezhilu.github.io/webp2jpg-online/"},{"name":"PDF工具集合","url":"https://tools.pdf24.org/zh/"},{"name":"UI直接生成代码","url":"https://code.fun/"},{"name":"markdown转公众号知乎","url":"https://editor.mdnice.com/"},{"name":"油猴脚本库","url":"https://greasyfork.org/zh-CN"},{"name":"代码片段转图片","url":"https://ray.so/"},{"name":"nginx配置器","url":"https://www.digitalocean.com/community/tools/nginx?global.app.lang=zhCN"},{"name":"前端插件库","url":"https://awesomejs.dev/"},{"name":"独特工具箱啥都有","url":"https://www.dute.org/"},{"name":"url编码解码","url":"http://www.jsons.cn/urlencode"},{"name":"菜鸟工具(正则测试等)","url":"https://c.runoob.com/front-end/854/"},{"name":"JSON编辑器格式化","url":"https://www.jsont.run/"},{"name":"七夜导航各类工具集","url":"https://nav.qinight.com/"},{"name":"生活百科wiki","url":"https://zh.wikihow.com/"},{"name":"表情包搜索网站","url":"https://www.dbbqb.com/"},{"name":"果汁工具大全(生活类)","url":"http://guozhivip.com/tool/"},{"name":"谷歌插件国内下载","url":"https://chrome.zzzmh.cn"},{"name":"PDF/图片/视频/音频/格式转换","url":"https://www.aconvert.com/cn/"},{"name":"JSON转各类代码","url":"https://app.quicktype.io/"},{"name":"markdown笔记","url":"https://yank-note.vercel.app"},{"name":"网页版API接口调试(界面清爽)","url":"https://httpie.io/app"},{"name":"在线开发神器手机网页开发同步","url":"https://replit.com/"},{"name":"在网页上运行安卓app","url":"https://www.wolfia.com/"},{"name":"在线工具开发手机web同步开发","url":"https://replit.com/"},{"name":"在线http接口调试","url":"https://httpie.io/app"}]},{"category":"素材","data":[{"name":"免费壁纸","url":"https://wallpaperhub.app"},{"name":"UI设计库","url":"https://screenlane.com/"},{"name":"摄图网","url":"https://699pic.com/"}]},{"category":"学习","data":[{"name":"面试基础知识","url":"https://micro-frontends.ice.work/"},{"name":"各类语言框架语法大全查询","url":"https://socode.pro/"},{"name":"前端人俱乐部","url":"http://f2er.club/"},{"name":"vue3+ts","url":"https://24kcs.github.io/vue3_study/"}]},{"category":"软件","data":[{"name":"正版软件购买","url":"https://apsgo.com/"}]},{"category":"前端","data":[{"name":"图标库","url":"https://iconoir.com/"},{"name":"前端大全","url":"https://docschina.org/"},{"name":"使用 Vue.js 开发小程序的前端框架","url":"http://mpvue.com/"},{"name":"uviewui","url":"https://www.uviewui.com/"},{"name":"varlet","url":"https://varlet.gitee.io/varlet-ui/#/zh-CN/index"},{"name":"vant","url":"https://vant-contrib.gitee.io/vant/#/zh-CN"},{"name":"tdesign","url":"https://tdesign.tencent.com/"},{"name":"前端开发UI素材","url":"https://www.creative-tim.com/"},{"name":"vue-treeselect","url":"https://www.vue-treeselect.cn/"},{"name":"semi","url":"https://semi.design/zh-CN/"},{"name":"tailwindcss","url":"https://www.tailwindcss.cn/"},{"name":"fontawesome图标","url":"https://fontawesome.com/"},{"name":"vantajs动画","url":"https://www.vantajs.com/"},{"name":"视差效果pushinjs","url":"https://nateplusplus.github.io/pushin/"}]}],"photography":[{"thumbnail":"https://thumbnail.jpg","photo":"https://photo.jpg","title":"This is title.","icon":"camera","place":"China"},{"thumbnail":"https://thumbnail.jpg","photo":"https://photo.jpg","title":"This is title.","icon":"camera","place":"China"}]}},"excerpt":"<p><a href=\"https://v3.cn.vuejs.org/\">vue3.0</a>发布也有一段时间了，用了那么久vue，3.0相比较2.0最大的区别就在于引入了—–组合式API。<br>尝试通过尤大最新发布的前端构建工具<a href=\"https://cn.vitejs.dev/\">Vite</a>(下一代前端编译构建工具)，新建了一个vue3.0的初始项目，很快就发现了与2.0的不同之处如下图：</p>","more":"<p><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/carbon%20(2)_1624615490869.png\" alt=\"carbon 2.png\"></p>\n<h4 id=\"Setup\"><a href=\"#Setup\" class=\"headerlink\" title=\"Setup\"></a><a href=\"https://v3.cn.vuejs.org/guide/composition-api-introduction.html#%E4%BB%80%E4%B9%88%E6%98%AF%E7%BB%84%E5%90%88%E5%BC%8F-api\">Setup</a></h4><p>可以看到在script标签旁边多了setup，那么具体是做什么作用呢？<br>首先我们要知道尤大引入组合式api的目的是什么？<br><strong>目的是为了解决复杂业务下代码逻辑的碎片化，以便于更好的阅读和维护。</strong><br><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/carbon%20(1)_1624615396489.png\" alt=\"carbon 1.png\"><br>我们现将setup理解为一个用来存放你逻辑代码的地方,并且它有2个参数props和context<br>需要注意的一点是：<br>setup在执行时，组件实例尚未被创建，setup 选项中是不存在this的</p>\n<h3 id=\"在生命周期钩子中调用\"><a href=\"#在生命周期钩子中调用\" class=\"headerlink\" title=\"在生命周期钩子中调用\"></a>在生命周期钩子中调用</h3><p><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/carbon%20(4)_1625454437233.png\" alt=\"carbon 4.png\"><br>在setup中定义一个方法并将其return，然后就可以在mounted中调用，只有return出的变量或者函数，才可以在setup外部被this调用。<br><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/carbon%20(5)_1625454662080.png\" alt=\"carbon 5.png\"><br>同样我们也可以这么写，将生命周期函数放入setup中调用，前提是必须注册生命周期方法onMounted<br>选项 API 生命周期选项和组合式 API 之间的映射，详情参加官方api</p>\n<ul>\n<li><p><del>beforeCreate</del> -&gt; use setup()</p>\n</li>\n<li><p><del>created</del> -&gt; use setup()</p>\n</li>\n<li><p>beforeMount -&gt; onBeforeMount</p>\n</li>\n<li><p>mounted -&gt; onMounted</p>\n</li>\n<li><p>beforeUpdate -&gt; onBeforeUpdate</p>\n</li>\n<li><p>updated -&gt; onUpdated</p>\n</li>\n<li><p>beforeUnmount -&gt; onBeforeUnmount</p>\n</li>\n<li><p>unmounted -&gt; onUnmounted</p>\n</li>\n<li><p>errorCaptured -&gt; onErrorCaptured</p>\n</li>\n<li><p>renderTracked -&gt; onRenderTracked</p>\n</li>\n<li><p>renderTriggered -&gt; onRenderTriggered</p>\n</li>\n<li><p>activated -&gt; onActivated</p>\n</li>\n<li><p>deactivated -&gt; onDeactivated</p>\n</li>\n</ul>\n<p>这里要说的一点是setup内，相当于之前的created钩子，也就是说是最先执行的<br>下面来引入一个新的函数</p>\n<h3 id=\"ref\"><a href=\"#ref\" class=\"headerlink\" title=\"ref\"></a><a href=\"https://v3.cn.vuejs.org/guide/composition-api-introduction.html#%E5%B8%A6-ref-%E7%9A%84%E5%93%8D%E5%BA%94%E5%BC%8F%E5%8F%98%E9%87%8F\">ref</a></h3><p><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/carbon%20(7)_1625455356513.png\" alt=\"carbon 7.png\"><br>ref 函数使任何响应式变量在任何地方起作用</p>\n<h3 id=\"watch监听\"><a href=\"#watch监听\" class=\"headerlink\" title=\"watch监听\"></a>watch监听</h3><p><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/carbon%20(8)_1625456544045.png\" alt=\"carbon 8.png\"><br>我们用ref来定义一个计数器变量，在setup中用watch来监听计数变化</p>\n<h3 id=\"computed-计算属性\"><a href=\"#computed-计算属性\" class=\"headerlink\" title=\"computed 计算属性\"></a>computed 计算属性</h3><p><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/carbon%20(9)_1625464411330.png\" alt=\"carbon 9.png\"><br>计算属性twiceTheCounter，需要像ref 一样使用 .value 来获取值</p>"},{"title":"理解vue3组合式API  Setup（二）","date":"2021-07-05T06:27:00.000Z","_content":"\n### 理解vue3组合式API Setup（二）\n<!-- more -->\n### Props\n![carbon 11.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/carbon%20(11)_1625540082237.png)\n创建一个子组件，在子组件内监听父组件计数器。\n子组件props只能通过toRefs进行解构，否则组件将无法响应式传递参数。\n如果content是可选的，在未传入content的情况下，toRefs是不会为它创建ref，所以需要使用toRef来处理。\n### Context\n![carbon 12.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/carbon%20(12)_1625541122747.png)\ncontext就显而易见了，这个参数能访问到之前vue2上this可访问到的三个属性，原因setup在创建时，dom还未被创建，所以this访问不到，通过上下文的方式来传递这三个属性:\n``` js\nthis.$attrs  \nthis.$slots  \nthis.$emit \n```\n\n### reactive\n![carbon 14.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/carbon%20(14)_1625542582030.png)\n\nreactive其实和toRef类似，都是将数据变为响应式，不同是reactive一般用来处理复杂对象数据之类。\n### 转换写法\n![carbon 16.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/carbon%20(16)_1625555312208.png)\n将setup移到script标签内，这样整个script内就都是setup的天下，引入defineProps定义属性，此时就不需要再将变量方法通过return来返回出去了，然后我们再通过reactive定义一个user对象，让setUserAge按钮来修改对象内age值，点击按钮来查看ui的更新变化。\n### 子组件调用父组件方法\n![carbon 18.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/carbon%20(18)_1625558127998.png)\n在父组件内定义fatherClick方法并且有个age参数，在子组件内引入defineEmit，通过defineEmit(['fatherClick']) 来触发父组件方法并传递参数，如果是多个方法，在此数组里['fatherClick']添加即可。\n![carbon 19.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/carbon%20(19)_1625558863142.png)\n同样我们也可以通过context来调用父组件方法，但是需要引入useContext函数。\n#### 总结\nvue3的新特性还有很多，同时也在不断更新优化，当前官方部分api并不全面，许多问题在官网也查询不到，所以不建议用在生产环境。组合式api还有大量要学习的地方，对于vue2是一种延续又是一种大变革；有一定vue开发经验的同学可能上手相对好一点，但对于新手，vue3的变化不是很友好，很多特征的理解相比2来说更加有深度，但是不代表vue3不好，一门语言的发展，势必要取其精华，去其糟粕，在性能和优化上vue3确实比vue2更上一个阶梯，包括新的构建工具vite，但是学习的成本也是在的，拥抱ts，也让vue不再像之前那么友好新手了，但是ts势必是个大趋势，未来的大环境，所以还是好好学习，与时俱进吧！","source":"_posts/理解vue3组合式API-Setup（二）.md","raw":"---\ntitle: 理解vue3组合式API  Setup（二）\ndate: 2021-07-05 14:27\ntags:\n---\n\n### 理解vue3组合式API Setup（二）\n<!-- more -->\n### Props\n![carbon 11.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/carbon%20(11)_1625540082237.png)\n创建一个子组件，在子组件内监听父组件计数器。\n子组件props只能通过toRefs进行解构，否则组件将无法响应式传递参数。\n如果content是可选的，在未传入content的情况下，toRefs是不会为它创建ref，所以需要使用toRef来处理。\n### Context\n![carbon 12.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/carbon%20(12)_1625541122747.png)\ncontext就显而易见了，这个参数能访问到之前vue2上this可访问到的三个属性，原因setup在创建时，dom还未被创建，所以this访问不到，通过上下文的方式来传递这三个属性:\n``` js\nthis.$attrs  \nthis.$slots  \nthis.$emit \n```\n\n### reactive\n![carbon 14.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/carbon%20(14)_1625542582030.png)\n\nreactive其实和toRef类似，都是将数据变为响应式，不同是reactive一般用来处理复杂对象数据之类。\n### 转换写法\n![carbon 16.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/carbon%20(16)_1625555312208.png)\n将setup移到script标签内，这样整个script内就都是setup的天下，引入defineProps定义属性，此时就不需要再将变量方法通过return来返回出去了，然后我们再通过reactive定义一个user对象，让setUserAge按钮来修改对象内age值，点击按钮来查看ui的更新变化。\n### 子组件调用父组件方法\n![carbon 18.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/carbon%20(18)_1625558127998.png)\n在父组件内定义fatherClick方法并且有个age参数，在子组件内引入defineEmit，通过defineEmit(['fatherClick']) 来触发父组件方法并传递参数，如果是多个方法，在此数组里['fatherClick']添加即可。\n![carbon 19.png](https://vanterc.oss-cn-beijing.aliyuncs.com/blog/carbon%20(19)_1625558863142.png)\n同样我们也可以通过context来调用父组件方法，但是需要引入useContext函数。\n#### 总结\nvue3的新特性还有很多，同时也在不断更新优化，当前官方部分api并不全面，许多问题在官网也查询不到，所以不建议用在生产环境。组合式api还有大量要学习的地方，对于vue2是一种延续又是一种大变革；有一定vue开发经验的同学可能上手相对好一点，但对于新手，vue3的变化不是很友好，很多特征的理解相比2来说更加有深度，但是不代表vue3不好，一门语言的发展，势必要取其精华，去其糟粕，在性能和优化上vue3确实比vue2更上一个阶梯，包括新的构建工具vite，但是学习的成本也是在的，拥抱ts，也让vue不再像之前那么友好新手了，但是ts势必是个大趋势，未来的大环境，所以还是好好学习，与时俱进吧！","slug":"理解vue3组合式API-Setup（二）","published":1,"updated":"2022-11-02T04:24:55.800Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clagmayfs000h6c845c6c18e0","content":"<h3 id=\"理解vue3组合式API-Setup（二）\"><a href=\"#理解vue3组合式API-Setup（二）\" class=\"headerlink\" title=\"理解vue3组合式API Setup（二）\"></a>理解vue3组合式API Setup（二）</h3><span id=\"more\"></span>\n<h3 id=\"Props\"><a href=\"#Props\" class=\"headerlink\" title=\"Props\"></a>Props</h3><p><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/carbon%20(11)_1625540082237.png\" alt=\"carbon 11.png\"><br>创建一个子组件，在子组件内监听父组件计数器。<br>子组件props只能通过toRefs进行解构，否则组件将无法响应式传递参数。<br>如果content是可选的，在未传入content的情况下，toRefs是不会为它创建ref，所以需要使用toRef来处理。</p>\n<h3 id=\"Context\"><a href=\"#Context\" class=\"headerlink\" title=\"Context\"></a>Context</h3><p><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/carbon%20(12)_1625541122747.png\" alt=\"carbon 12.png\"><br>context就显而易见了，这个参数能访问到之前vue2上this可访问到的三个属性，原因setup在创建时，dom还未被创建，所以this访问不到，通过上下文的方式来传递这三个属性:</p>\n<pre><code class=\"js\">this.$attrs  \nthis.$slots  \nthis.$emit \n</code></pre>\n<h3 id=\"reactive\"><a href=\"#reactive\" class=\"headerlink\" title=\"reactive\"></a>reactive</h3><p><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/carbon%20(14)_1625542582030.png\" alt=\"carbon 14.png\"></p>\n<p>reactive其实和toRef类似，都是将数据变为响应式，不同是reactive一般用来处理复杂对象数据之类。</p>\n<h3 id=\"转换写法\"><a href=\"#转换写法\" class=\"headerlink\" title=\"转换写法\"></a>转换写法</h3><p><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/carbon%20(16)_1625555312208.png\" alt=\"carbon 16.png\"><br>将setup移到script标签内，这样整个script内就都是setup的天下，引入defineProps定义属性，此时就不需要再将变量方法通过return来返回出去了，然后我们再通过reactive定义一个user对象，让setUserAge按钮来修改对象内age值，点击按钮来查看ui的更新变化。</p>\n<h3 id=\"子组件调用父组件方法\"><a href=\"#子组件调用父组件方法\" class=\"headerlink\" title=\"子组件调用父组件方法\"></a>子组件调用父组件方法</h3><p><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/carbon%20(18)_1625558127998.png\" alt=\"carbon 18.png\"><br>在父组件内定义fatherClick方法并且有个age参数，在子组件内引入defineEmit，通过defineEmit([‘fatherClick’]) 来触发父组件方法并传递参数，如果是多个方法，在此数组里[‘fatherClick’]添加即可。<br><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/carbon%20(19)_1625558863142.png\" alt=\"carbon 19.png\"><br>同样我们也可以通过context来调用父组件方法，但是需要引入useContext函数。</p>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>vue3的新特性还有很多，同时也在不断更新优化，当前官方部分api并不全面，许多问题在官网也查询不到，所以不建议用在生产环境。组合式api还有大量要学习的地方，对于vue2是一种延续又是一种大变革；有一定vue开发经验的同学可能上手相对好一点，但对于新手，vue3的变化不是很友好，很多特征的理解相比2来说更加有深度，但是不代表vue3不好，一门语言的发展，势必要取其精华，去其糟粕，在性能和优化上vue3确实比vue2更上一个阶梯，包括新的构建工具vite，但是学习的成本也是在的，拥抱ts，也让vue不再像之前那么友好新手了，但是ts势必是个大趋势，未来的大环境，所以还是好好学习，与时俱进吧！</p>\n","site":{"data":{"friends":[{"category":"技术","data":[{"name":"stackblitz","url":"https://stackblitz.com"},{"name":"serverless-devs","url":"http://www.serverless-devs.com/"},{"name":"cypress自动化测试","url":"https://www.cypress.io/"},{"name":"微前端架构","url":"https://micro-frontends.ice.work/"},{"name":"gin+vue进行极速开发的全栈开发基础平台","url":"https://www.gin-vue-admin.com/"},{"name":"cloudbase","url":"https://docs.cloudbase.net/"},{"name":"supabase","url":"https://supabase.com/"}]},{"category":"工具","data":[{"name":"程序员工具集合大全","url":"https://www.bejson.com/"},{"name":"图片处理","url":"https://imagestool.com/zh_CN/index.html"},{"name":"免费在线抠图","url":"https://picwish.cn/"},{"name":"LOGO海报设计","url":"https://www.canva.cn/"},{"name":"图片无损缩放","url":"http://waifu2x.udp.jp/"},{"name":"图片格式转换器","url":"https://renzhezhilu.github.io/webp2jpg-online/"},{"name":"PDF工具集合","url":"https://tools.pdf24.org/zh/"},{"name":"UI直接生成代码","url":"https://code.fun/"},{"name":"markdown转公众号知乎","url":"https://editor.mdnice.com/"},{"name":"油猴脚本库","url":"https://greasyfork.org/zh-CN"},{"name":"代码片段转图片","url":"https://ray.so/"},{"name":"nginx配置器","url":"https://www.digitalocean.com/community/tools/nginx?global.app.lang=zhCN"},{"name":"前端插件库","url":"https://awesomejs.dev/"},{"name":"独特工具箱啥都有","url":"https://www.dute.org/"},{"name":"url编码解码","url":"http://www.jsons.cn/urlencode"},{"name":"菜鸟工具(正则测试等)","url":"https://c.runoob.com/front-end/854/"},{"name":"JSON编辑器格式化","url":"https://www.jsont.run/"},{"name":"七夜导航各类工具集","url":"https://nav.qinight.com/"},{"name":"生活百科wiki","url":"https://zh.wikihow.com/"},{"name":"表情包搜索网站","url":"https://www.dbbqb.com/"},{"name":"果汁工具大全(生活类)","url":"http://guozhivip.com/tool/"},{"name":"谷歌插件国内下载","url":"https://chrome.zzzmh.cn"},{"name":"PDF/图片/视频/音频/格式转换","url":"https://www.aconvert.com/cn/"},{"name":"JSON转各类代码","url":"https://app.quicktype.io/"},{"name":"markdown笔记","url":"https://yank-note.vercel.app"},{"name":"网页版API接口调试(界面清爽)","url":"https://httpie.io/app"},{"name":"在线开发神器手机网页开发同步","url":"https://replit.com/"},{"name":"在网页上运行安卓app","url":"https://www.wolfia.com/"},{"name":"在线工具开发手机web同步开发","url":"https://replit.com/"},{"name":"在线http接口调试","url":"https://httpie.io/app"}]},{"category":"素材","data":[{"name":"免费壁纸","url":"https://wallpaperhub.app"},{"name":"UI设计库","url":"https://screenlane.com/"},{"name":"摄图网","url":"https://699pic.com/"}]},{"category":"学习","data":[{"name":"面试基础知识","url":"https://micro-frontends.ice.work/"},{"name":"各类语言框架语法大全查询","url":"https://socode.pro/"},{"name":"前端人俱乐部","url":"http://f2er.club/"},{"name":"vue3+ts","url":"https://24kcs.github.io/vue3_study/"}]},{"category":"软件","data":[{"name":"正版软件购买","url":"https://apsgo.com/"}]},{"category":"前端","data":[{"name":"图标库","url":"https://iconoir.com/"},{"name":"前端大全","url":"https://docschina.org/"},{"name":"使用 Vue.js 开发小程序的前端框架","url":"http://mpvue.com/"},{"name":"uviewui","url":"https://www.uviewui.com/"},{"name":"varlet","url":"https://varlet.gitee.io/varlet-ui/#/zh-CN/index"},{"name":"vant","url":"https://vant-contrib.gitee.io/vant/#/zh-CN"},{"name":"tdesign","url":"https://tdesign.tencent.com/"},{"name":"前端开发UI素材","url":"https://www.creative-tim.com/"},{"name":"vue-treeselect","url":"https://www.vue-treeselect.cn/"},{"name":"semi","url":"https://semi.design/zh-CN/"},{"name":"tailwindcss","url":"https://www.tailwindcss.cn/"},{"name":"fontawesome图标","url":"https://fontawesome.com/"},{"name":"vantajs动画","url":"https://www.vantajs.com/"},{"name":"视差效果pushinjs","url":"https://nateplusplus.github.io/pushin/"}]}],"photography":[{"thumbnail":"https://thumbnail.jpg","photo":"https://photo.jpg","title":"This is title.","icon":"camera","place":"China"},{"thumbnail":"https://thumbnail.jpg","photo":"https://photo.jpg","title":"This is title.","icon":"camera","place":"China"}]}},"excerpt":"<h3 id=\"理解vue3组合式API-Setup（二）\"><a href=\"#理解vue3组合式API-Setup（二）\" class=\"headerlink\" title=\"理解vue3组合式API Setup（二）\"></a>理解vue3组合式API Setup（二）</h3>","more":"<h3 id=\"Props\"><a href=\"#Props\" class=\"headerlink\" title=\"Props\"></a>Props</h3><p><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/carbon%20(11)_1625540082237.png\" alt=\"carbon 11.png\"><br>创建一个子组件，在子组件内监听父组件计数器。<br>子组件props只能通过toRefs进行解构，否则组件将无法响应式传递参数。<br>如果content是可选的，在未传入content的情况下，toRefs是不会为它创建ref，所以需要使用toRef来处理。</p>\n<h3 id=\"Context\"><a href=\"#Context\" class=\"headerlink\" title=\"Context\"></a>Context</h3><p><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/carbon%20(12)_1625541122747.png\" alt=\"carbon 12.png\"><br>context就显而易见了，这个参数能访问到之前vue2上this可访问到的三个属性，原因setup在创建时，dom还未被创建，所以this访问不到，通过上下文的方式来传递这三个属性:</p>\n<pre><code class=\"js\">this.$attrs  \nthis.$slots  \nthis.$emit \n</code></pre>\n<h3 id=\"reactive\"><a href=\"#reactive\" class=\"headerlink\" title=\"reactive\"></a>reactive</h3><p><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/carbon%20(14)_1625542582030.png\" alt=\"carbon 14.png\"></p>\n<p>reactive其实和toRef类似，都是将数据变为响应式，不同是reactive一般用来处理复杂对象数据之类。</p>\n<h3 id=\"转换写法\"><a href=\"#转换写法\" class=\"headerlink\" title=\"转换写法\"></a>转换写法</h3><p><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/carbon%20(16)_1625555312208.png\" alt=\"carbon 16.png\"><br>将setup移到script标签内，这样整个script内就都是setup的天下，引入defineProps定义属性，此时就不需要再将变量方法通过return来返回出去了，然后我们再通过reactive定义一个user对象，让setUserAge按钮来修改对象内age值，点击按钮来查看ui的更新变化。</p>\n<h3 id=\"子组件调用父组件方法\"><a href=\"#子组件调用父组件方法\" class=\"headerlink\" title=\"子组件调用父组件方法\"></a>子组件调用父组件方法</h3><p><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/carbon%20(18)_1625558127998.png\" alt=\"carbon 18.png\"><br>在父组件内定义fatherClick方法并且有个age参数，在子组件内引入defineEmit，通过defineEmit([‘fatherClick’]) 来触发父组件方法并传递参数，如果是多个方法，在此数组里[‘fatherClick’]添加即可。<br><img src=\"https://vanterc.oss-cn-beijing.aliyuncs.com/blog/carbon%20(19)_1625558863142.png\" alt=\"carbon 19.png\"><br>同样我们也可以通过context来调用父组件方法，但是需要引入useContext函数。</p>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>vue3的新特性还有很多，同时也在不断更新优化，当前官方部分api并不全面，许多问题在官网也查询不到，所以不建议用在生产环境。组合式api还有大量要学习的地方，对于vue2是一种延续又是一种大变革；有一定vue开发经验的同学可能上手相对好一点，但对于新手，vue3的变化不是很友好，很多特征的理解相比2来说更加有深度，但是不代表vue3不好，一门语言的发展，势必要取其精华，去其糟粕，在性能和优化上vue3确实比vue2更上一个阶梯，包括新的构建工具vite，但是学习的成本也是在的，拥抱ts，也让vue不再像之前那么友好新手了，但是ts势必是个大趋势，未来的大环境，所以还是好好学习，与时俱进吧！</p>"},{"title":"纯前端利用canvas压缩图片上传","date":"2021-02-25T09:57:00.000Z","_content":"\n实现的方式是上传图片file->获取base64->转化为canvas->canvas压缩后转化为base64->base64转化为file\n<!-- more -->\n```html\n<template>\n  <div>\n\t<input ref=\"uploadinput\" type=\"file\" name=\"file\" accept=\"image/*\" @change=\"changeImg\"/>\n  </div>\n</template>\n\n<script>\n  export default {\n    data(){\n    \treturn {\n      \tpicurl:\"\"\n      }\n    },\n    methods: {\n      async changeImg(){\n              let that = this\n              let input = this.$refs.uploadinput\n              let file = input.files[0]\n              this.picurl = await this.getBase64(file)\n        \t\t\tlet newfile = dataURLtoFile(this.picurl,\"pic.jpeg\")\n      },\n      //获取Base64\n    \tgetBase64(file) {\n        return new Promise((resolve, reject) => {\n          const reader = new FileReader();\n          reader.readAsDataURL(file);\n          reader.onload = () => {\n            this.canvasDataURL(reader.result,1500).then(r=>{\n              resolve(r);\n            }).catch(e=>{\n              reject(e);\n            })\n          }\n          reader.onerror = error => reject(error);\n        });\n      },\n\n      //图片压缩处理\n      canvasDataURL(re,w){\n        return new Promise((resolve, reject) =>{\n          let newImg=new Image();\n          newImg.src=re;\n          let imgWidth,imgHeight;\n          newImg.onload = () =>{\n            let img=document.createElement(\"img\");\n            img.src=newImg.src;\n            imgWidth=img.width;\n            imgHeight=img.height;\n            let canvas=document.createElement(\"canvas\");\n            canvas.width=imgWidth;\n            canvas.height=imgHeight;\n            let ctx=canvas.getContext(\"2d\");\n            ctx.clearRect(0,0,imgWidth,imgHeight);\n            ctx.drawImage(img,0,0,imgWidth,imgHeight);\n            resolve(canvas.toDataURL(\"image/jpeg\",0.2))\n          }\n          newImg.onerror = error => reject(error);\n        }) \n      },\n\n      //将base64转换为文件\n      dataURLtoFile(dataurl, filename) {\n        let arr = dataurl.split(','), mime = arr[0].match(/:(.*?);/)[1],\n            bstr = atob(arr[1]), n = bstr.length, u8arr = new Uint8Array(n);\n        while(n--){\n          u8arr[n] = bstr.charCodeAt(n);\n        }\n        return new File([u8arr], filename, {type:mime});\n      },\n    }\n  }\n</script>\n\n<style lang=\"scss\" scoped>\n\n</style>\n\n\n\n\n\n\t\t\t\t\t\t\n```\n\n\n","source":"_posts/纯前端利用canvas压缩图片上传.md","raw":"---\ntitle: 纯前端利用canvas压缩图片上传\ndate: 2021-02-25 17:57\ntags:\n---\n\n实现的方式是上传图片file->获取base64->转化为canvas->canvas压缩后转化为base64->base64转化为file\n<!-- more -->\n```html\n<template>\n  <div>\n\t<input ref=\"uploadinput\" type=\"file\" name=\"file\" accept=\"image/*\" @change=\"changeImg\"/>\n  </div>\n</template>\n\n<script>\n  export default {\n    data(){\n    \treturn {\n      \tpicurl:\"\"\n      }\n    },\n    methods: {\n      async changeImg(){\n              let that = this\n              let input = this.$refs.uploadinput\n              let file = input.files[0]\n              this.picurl = await this.getBase64(file)\n        \t\t\tlet newfile = dataURLtoFile(this.picurl,\"pic.jpeg\")\n      },\n      //获取Base64\n    \tgetBase64(file) {\n        return new Promise((resolve, reject) => {\n          const reader = new FileReader();\n          reader.readAsDataURL(file);\n          reader.onload = () => {\n            this.canvasDataURL(reader.result,1500).then(r=>{\n              resolve(r);\n            }).catch(e=>{\n              reject(e);\n            })\n          }\n          reader.onerror = error => reject(error);\n        });\n      },\n\n      //图片压缩处理\n      canvasDataURL(re,w){\n        return new Promise((resolve, reject) =>{\n          let newImg=new Image();\n          newImg.src=re;\n          let imgWidth,imgHeight;\n          newImg.onload = () =>{\n            let img=document.createElement(\"img\");\n            img.src=newImg.src;\n            imgWidth=img.width;\n            imgHeight=img.height;\n            let canvas=document.createElement(\"canvas\");\n            canvas.width=imgWidth;\n            canvas.height=imgHeight;\n            let ctx=canvas.getContext(\"2d\");\n            ctx.clearRect(0,0,imgWidth,imgHeight);\n            ctx.drawImage(img,0,0,imgWidth,imgHeight);\n            resolve(canvas.toDataURL(\"image/jpeg\",0.2))\n          }\n          newImg.onerror = error => reject(error);\n        }) \n      },\n\n      //将base64转换为文件\n      dataURLtoFile(dataurl, filename) {\n        let arr = dataurl.split(','), mime = arr[0].match(/:(.*?);/)[1],\n            bstr = atob(arr[1]), n = bstr.length, u8arr = new Uint8Array(n);\n        while(n--){\n          u8arr[n] = bstr.charCodeAt(n);\n        }\n        return new File([u8arr], filename, {type:mime});\n      },\n    }\n  }\n</script>\n\n<style lang=\"scss\" scoped>\n\n</style>\n\n\n\n\n\n\t\t\t\t\t\t\n```\n\n\n","slug":"纯前端利用canvas压缩图片上传","published":1,"updated":"2022-11-02T04:24:55.800Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clagmayft000i6c844onj21c3","content":"<p>实现的方式是上传图片file-&gt;获取base64-&gt;转化为canvas-&gt;canvas压缩后转化为base64-&gt;base64转化为file</p>\n<span id=\"more\"></span>\n<pre><code class=\"html\">&lt;template&gt;\n  &lt;div&gt;\n    &lt;input ref=&quot;uploadinput&quot; type=&quot;file&quot; name=&quot;file&quot; accept=&quot;image/*&quot; @change=&quot;changeImg&quot;/&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\n  export default &#123;\n    data()&#123;\n        return &#123;\n          picurl:&quot;&quot;\n      &#125;\n    &#125;,\n    methods: &#123;\n      async changeImg()&#123;\n              let that = this\n              let input = this.$refs.uploadinput\n              let file = input.files[0]\n              this.picurl = await this.getBase64(file)\n                    let newfile = dataURLtoFile(this.picurl,&quot;pic.jpeg&quot;)\n      &#125;,\n      //获取Base64\n        getBase64(file) &#123;\n        return new Promise((resolve, reject) =&gt; &#123;\n          const reader = new FileReader();\n          reader.readAsDataURL(file);\n          reader.onload = () =&gt; &#123;\n            this.canvasDataURL(reader.result,1500).then(r=&gt;&#123;\n              resolve(r);\n            &#125;).catch(e=&gt;&#123;\n              reject(e);\n            &#125;)\n          &#125;\n          reader.onerror = error =&gt; reject(error);\n        &#125;);\n      &#125;,\n\n      //图片压缩处理\n      canvasDataURL(re,w)&#123;\n        return new Promise((resolve, reject) =&gt;&#123;\n          let newImg=new Image();\n          newImg.src=re;\n          let imgWidth,imgHeight;\n          newImg.onload = () =&gt;&#123;\n            let img=document.createElement(&quot;img&quot;);\n            img.src=newImg.src;\n            imgWidth=img.width;\n            imgHeight=img.height;\n            let canvas=document.createElement(&quot;canvas&quot;);\n            canvas.width=imgWidth;\n            canvas.height=imgHeight;\n            let ctx=canvas.getContext(&quot;2d&quot;);\n            ctx.clearRect(0,0,imgWidth,imgHeight);\n            ctx.drawImage(img,0,0,imgWidth,imgHeight);\n            resolve(canvas.toDataURL(&quot;image/jpeg&quot;,0.2))\n          &#125;\n          newImg.onerror = error =&gt; reject(error);\n        &#125;) \n      &#125;,\n\n      //将base64转换为文件\n      dataURLtoFile(dataurl, filename) &#123;\n        let arr = dataurl.split(&#39;,&#39;), mime = arr[0].match(/:(.*?);/)[1],\n            bstr = atob(arr[1]), n = bstr.length, u8arr = new Uint8Array(n);\n        while(n--)&#123;\n          u8arr[n] = bstr.charCodeAt(n);\n        &#125;\n        return new File([u8arr], filename, &#123;type:mime&#125;);\n      &#125;,\n    &#125;\n  &#125;\n&lt;/script&gt;\n\n&lt;style lang=&quot;scss&quot; scoped&gt;\n\n&lt;/style&gt;\n\n\n\n\n\n                        \n</code></pre>\n","site":{"data":{"friends":[{"category":"技术","data":[{"name":"stackblitz","url":"https://stackblitz.com"},{"name":"serverless-devs","url":"http://www.serverless-devs.com/"},{"name":"cypress自动化测试","url":"https://www.cypress.io/"},{"name":"微前端架构","url":"https://micro-frontends.ice.work/"},{"name":"gin+vue进行极速开发的全栈开发基础平台","url":"https://www.gin-vue-admin.com/"},{"name":"cloudbase","url":"https://docs.cloudbase.net/"},{"name":"supabase","url":"https://supabase.com/"}]},{"category":"工具","data":[{"name":"程序员工具集合大全","url":"https://www.bejson.com/"},{"name":"图片处理","url":"https://imagestool.com/zh_CN/index.html"},{"name":"免费在线抠图","url":"https://picwish.cn/"},{"name":"LOGO海报设计","url":"https://www.canva.cn/"},{"name":"图片无损缩放","url":"http://waifu2x.udp.jp/"},{"name":"图片格式转换器","url":"https://renzhezhilu.github.io/webp2jpg-online/"},{"name":"PDF工具集合","url":"https://tools.pdf24.org/zh/"},{"name":"UI直接生成代码","url":"https://code.fun/"},{"name":"markdown转公众号知乎","url":"https://editor.mdnice.com/"},{"name":"油猴脚本库","url":"https://greasyfork.org/zh-CN"},{"name":"代码片段转图片","url":"https://ray.so/"},{"name":"nginx配置器","url":"https://www.digitalocean.com/community/tools/nginx?global.app.lang=zhCN"},{"name":"前端插件库","url":"https://awesomejs.dev/"},{"name":"独特工具箱啥都有","url":"https://www.dute.org/"},{"name":"url编码解码","url":"http://www.jsons.cn/urlencode"},{"name":"菜鸟工具(正则测试等)","url":"https://c.runoob.com/front-end/854/"},{"name":"JSON编辑器格式化","url":"https://www.jsont.run/"},{"name":"七夜导航各类工具集","url":"https://nav.qinight.com/"},{"name":"生活百科wiki","url":"https://zh.wikihow.com/"},{"name":"表情包搜索网站","url":"https://www.dbbqb.com/"},{"name":"果汁工具大全(生活类)","url":"http://guozhivip.com/tool/"},{"name":"谷歌插件国内下载","url":"https://chrome.zzzmh.cn"},{"name":"PDF/图片/视频/音频/格式转换","url":"https://www.aconvert.com/cn/"},{"name":"JSON转各类代码","url":"https://app.quicktype.io/"},{"name":"markdown笔记","url":"https://yank-note.vercel.app"},{"name":"网页版API接口调试(界面清爽)","url":"https://httpie.io/app"},{"name":"在线开发神器手机网页开发同步","url":"https://replit.com/"},{"name":"在网页上运行安卓app","url":"https://www.wolfia.com/"},{"name":"在线工具开发手机web同步开发","url":"https://replit.com/"},{"name":"在线http接口调试","url":"https://httpie.io/app"}]},{"category":"素材","data":[{"name":"免费壁纸","url":"https://wallpaperhub.app"},{"name":"UI设计库","url":"https://screenlane.com/"},{"name":"摄图网","url":"https://699pic.com/"}]},{"category":"学习","data":[{"name":"面试基础知识","url":"https://micro-frontends.ice.work/"},{"name":"各类语言框架语法大全查询","url":"https://socode.pro/"},{"name":"前端人俱乐部","url":"http://f2er.club/"},{"name":"vue3+ts","url":"https://24kcs.github.io/vue3_study/"}]},{"category":"软件","data":[{"name":"正版软件购买","url":"https://apsgo.com/"}]},{"category":"前端","data":[{"name":"图标库","url":"https://iconoir.com/"},{"name":"前端大全","url":"https://docschina.org/"},{"name":"使用 Vue.js 开发小程序的前端框架","url":"http://mpvue.com/"},{"name":"uviewui","url":"https://www.uviewui.com/"},{"name":"varlet","url":"https://varlet.gitee.io/varlet-ui/#/zh-CN/index"},{"name":"vant","url":"https://vant-contrib.gitee.io/vant/#/zh-CN"},{"name":"tdesign","url":"https://tdesign.tencent.com/"},{"name":"前端开发UI素材","url":"https://www.creative-tim.com/"},{"name":"vue-treeselect","url":"https://www.vue-treeselect.cn/"},{"name":"semi","url":"https://semi.design/zh-CN/"},{"name":"tailwindcss","url":"https://www.tailwindcss.cn/"},{"name":"fontawesome图标","url":"https://fontawesome.com/"},{"name":"vantajs动画","url":"https://www.vantajs.com/"},{"name":"视差效果pushinjs","url":"https://nateplusplus.github.io/pushin/"}]}],"photography":[{"thumbnail":"https://thumbnail.jpg","photo":"https://photo.jpg","title":"This is title.","icon":"camera","place":"China"},{"thumbnail":"https://thumbnail.jpg","photo":"https://photo.jpg","title":"This is title.","icon":"camera","place":"China"}]}},"excerpt":"<p>实现的方式是上传图片file-&gt;获取base64-&gt;转化为canvas-&gt;canvas压缩后转化为base64-&gt;base64转化为file</p>","more":"<pre><code class=\"html\">&lt;template&gt;\n  &lt;div&gt;\n    &lt;input ref=&quot;uploadinput&quot; type=&quot;file&quot; name=&quot;file&quot; accept=&quot;image/*&quot; @change=&quot;changeImg&quot;/&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\n  export default &#123;\n    data()&#123;\n        return &#123;\n          picurl:&quot;&quot;\n      &#125;\n    &#125;,\n    methods: &#123;\n      async changeImg()&#123;\n              let that = this\n              let input = this.$refs.uploadinput\n              let file = input.files[0]\n              this.picurl = await this.getBase64(file)\n                    let newfile = dataURLtoFile(this.picurl,&quot;pic.jpeg&quot;)\n      &#125;,\n      //获取Base64\n        getBase64(file) &#123;\n        return new Promise((resolve, reject) =&gt; &#123;\n          const reader = new FileReader();\n          reader.readAsDataURL(file);\n          reader.onload = () =&gt; &#123;\n            this.canvasDataURL(reader.result,1500).then(r=&gt;&#123;\n              resolve(r);\n            &#125;).catch(e=&gt;&#123;\n              reject(e);\n            &#125;)\n          &#125;\n          reader.onerror = error =&gt; reject(error);\n        &#125;);\n      &#125;,\n\n      //图片压缩处理\n      canvasDataURL(re,w)&#123;\n        return new Promise((resolve, reject) =&gt;&#123;\n          let newImg=new Image();\n          newImg.src=re;\n          let imgWidth,imgHeight;\n          newImg.onload = () =&gt;&#123;\n            let img=document.createElement(&quot;img&quot;);\n            img.src=newImg.src;\n            imgWidth=img.width;\n            imgHeight=img.height;\n            let canvas=document.createElement(&quot;canvas&quot;);\n            canvas.width=imgWidth;\n            canvas.height=imgHeight;\n            let ctx=canvas.getContext(&quot;2d&quot;);\n            ctx.clearRect(0,0,imgWidth,imgHeight);\n            ctx.drawImage(img,0,0,imgWidth,imgHeight);\n            resolve(canvas.toDataURL(&quot;image/jpeg&quot;,0.2))\n          &#125;\n          newImg.onerror = error =&gt; reject(error);\n        &#125;) \n      &#125;,\n\n      //将base64转换为文件\n      dataURLtoFile(dataurl, filename) &#123;\n        let arr = dataurl.split(&#39;,&#39;), mime = arr[0].match(/:(.*?);/)[1],\n            bstr = atob(arr[1]), n = bstr.length, u8arr = new Uint8Array(n);\n        while(n--)&#123;\n          u8arr[n] = bstr.charCodeAt(n);\n        &#125;\n        return new File([u8arr], filename, &#123;type:mime&#125;);\n      &#125;,\n    &#125;\n  &#125;\n&lt;/script&gt;\n\n&lt;style lang=&quot;scss&quot; scoped&gt;\n\n&lt;/style&gt;\n\n\n\n\n\n                        \n</code></pre>"},{"title":"解决vue keepAlive 二次进入页面显示首次缓存问题","date":"2021-07-26T06:04:00.000Z","_content":"问题场景：\n当某个带有筛选条件查询列表的页面需要进行缓存，以便不再需要重复进行选择或者输入筛选条件的时候，我们就可以利用keepAlive来进行缓存，但keepAlive也存在着一些坑，这是需要注意的地方。\n<!-- more -->\n### 如何利用keepAlive进行缓存\n1、在路由meta内定义keepAlive，来设置需要被缓存的页面\n```js\nmeta: { keepAlive: true }\n```\nture: 需要缓存的路由；false:不需要缓存的路由\n\n2、判断router-view\n```js\n<keep-alive>\n  <router-view v-if=\"$route.meta.keepAlive\"/>\n</keep-alive>\n<router-view v-if=\"!$route.meta.keepAlive\"></router-view>\n```\n被keep-alive包裹的为需要缓存的页面，这样我们就可以通过keepAlive来切换哪些页面需要缓存，哪些不需要缓存。\n\n3、进入详情页面缓存，否则不缓存\n```js\nbeforeRouteLeave (to, from, next) {\n    if (to.path === '/index/page1/detail') {\n      from.meta.keepAlive = true\n      next()\n    } else {\n      from.meta.keepAlive = false\n      next()\n    }\n  }\n```\n路由守卫钩子 beforeRouteLeave 离开页面路由的时候出发；\n当离开缓存页面，进入详情页面的时候，我们将缓存页面keepAlive设置true，如果离开缓存页面，不是进入详情页面的时候，我们设置为false，不进行缓存。\n\n这是最基本的缓存设置，但是keepAlive也留下了一个大坑。\n\n## keepAlive二次进入页面显示首次缓存问题\n第一次从缓存页面进入详情页再返回到缓存页面的时候，页面条件能被正确的缓存下来，但是当我们切换到别的路由，再一次进入该缓存页修改查询条件，并进入详情后返回缓存页，此时缓存的是页面状态是第一次进入该页面的时候的状态，也就是说，第二次进入页面的时候，该缓存读取的是第一次的缓存，这就非常的坑了。\n所以通过下面的刷新缓存路由的方式来解决这个问题。\n\n1、调整 router-view\n```js\n// view\n<keep-alive v-if=\"isRouterAlive\">\n  <router-view v-if=\"$route.meta.keepAlive\"/>\n</keep-alive>\n<router-view v-if=\"!$route.meta.keepAlive\"></router-view>\n\n// js\ndata () {\n  return {\n    isRouterAlive: true\n  }\n},\nprovide () { return { reload: this.reload } },\n\nmethods: {\n  reload () {\n    this.isRouterAlive = false\n    this.$nextTick(() => (this.isRouterAlive = true))\n  }\n}\n```\n\n定义一个isRouterAlive变量，用来刷新keep-alive;通过provide向下面子孙组件们暴露一个reload方法，用来刷新缓存。\n\n2、设置缓存\n```js\nexport default {\n inject: ['reload'],\n data () {\n   return {\n    ....\n   },\n },\n beforeRouteEnter (to, from, next) {\n    to.meta.keepAlive = true\n    if (from.path !== '/index/page1/detail') {\n      next(vm => {\n        vm.reload()\n      })\n    } else {\n      next()\n    }\n  },\n  beforeRouteLeave (to, from, next) {\n    if (to.path === '/index/page1/detail') {\n      from.meta.keepAlive = true\n      next()\n    } else {\n      from.meta.keepAlive = false\n      next()\n    }\n  }\n}\n```\n\n子组件注册inject: ['reload'] 方法，beforeRouteEnter钩子在进入缓存页面的时候通过通过判断路由是否是来自详情页面，如果不是详情页，我们就刷新缓存，如果是详情页，就不做处理。\n这样就解决了，只要是路由进入过别的页面(非详情页面)，我们就刷新缓存，这样就不会出现二次进入的时候，显示的是第一次的缓存状态，同时从详情页返回后正常显示缓存数据。\n\n","source":"_posts/解决vue-keepAlive-二次进入页面显示首次缓存问题.md","raw":"---\ntitle: 解决vue keepAlive 二次进入页面显示首次缓存问题\ndate: 2021-07-26 14:04\ntags:\n---\n问题场景：\n当某个带有筛选条件查询列表的页面需要进行缓存，以便不再需要重复进行选择或者输入筛选条件的时候，我们就可以利用keepAlive来进行缓存，但keepAlive也存在着一些坑，这是需要注意的地方。\n<!-- more -->\n### 如何利用keepAlive进行缓存\n1、在路由meta内定义keepAlive，来设置需要被缓存的页面\n```js\nmeta: { keepAlive: true }\n```\nture: 需要缓存的路由；false:不需要缓存的路由\n\n2、判断router-view\n```js\n<keep-alive>\n  <router-view v-if=\"$route.meta.keepAlive\"/>\n</keep-alive>\n<router-view v-if=\"!$route.meta.keepAlive\"></router-view>\n```\n被keep-alive包裹的为需要缓存的页面，这样我们就可以通过keepAlive来切换哪些页面需要缓存，哪些不需要缓存。\n\n3、进入详情页面缓存，否则不缓存\n```js\nbeforeRouteLeave (to, from, next) {\n    if (to.path === '/index/page1/detail') {\n      from.meta.keepAlive = true\n      next()\n    } else {\n      from.meta.keepAlive = false\n      next()\n    }\n  }\n```\n路由守卫钩子 beforeRouteLeave 离开页面路由的时候出发；\n当离开缓存页面，进入详情页面的时候，我们将缓存页面keepAlive设置true，如果离开缓存页面，不是进入详情页面的时候，我们设置为false，不进行缓存。\n\n这是最基本的缓存设置，但是keepAlive也留下了一个大坑。\n\n## keepAlive二次进入页面显示首次缓存问题\n第一次从缓存页面进入详情页再返回到缓存页面的时候，页面条件能被正确的缓存下来，但是当我们切换到别的路由，再一次进入该缓存页修改查询条件，并进入详情后返回缓存页，此时缓存的是页面状态是第一次进入该页面的时候的状态，也就是说，第二次进入页面的时候，该缓存读取的是第一次的缓存，这就非常的坑了。\n所以通过下面的刷新缓存路由的方式来解决这个问题。\n\n1、调整 router-view\n```js\n// view\n<keep-alive v-if=\"isRouterAlive\">\n  <router-view v-if=\"$route.meta.keepAlive\"/>\n</keep-alive>\n<router-view v-if=\"!$route.meta.keepAlive\"></router-view>\n\n// js\ndata () {\n  return {\n    isRouterAlive: true\n  }\n},\nprovide () { return { reload: this.reload } },\n\nmethods: {\n  reload () {\n    this.isRouterAlive = false\n    this.$nextTick(() => (this.isRouterAlive = true))\n  }\n}\n```\n\n定义一个isRouterAlive变量，用来刷新keep-alive;通过provide向下面子孙组件们暴露一个reload方法，用来刷新缓存。\n\n2、设置缓存\n```js\nexport default {\n inject: ['reload'],\n data () {\n   return {\n    ....\n   },\n },\n beforeRouteEnter (to, from, next) {\n    to.meta.keepAlive = true\n    if (from.path !== '/index/page1/detail') {\n      next(vm => {\n        vm.reload()\n      })\n    } else {\n      next()\n    }\n  },\n  beforeRouteLeave (to, from, next) {\n    if (to.path === '/index/page1/detail') {\n      from.meta.keepAlive = true\n      next()\n    } else {\n      from.meta.keepAlive = false\n      next()\n    }\n  }\n}\n```\n\n子组件注册inject: ['reload'] 方法，beforeRouteEnter钩子在进入缓存页面的时候通过通过判断路由是否是来自详情页面，如果不是详情页，我们就刷新缓存，如果是详情页，就不做处理。\n这样就解决了，只要是路由进入过别的页面(非详情页面)，我们就刷新缓存，这样就不会出现二次进入的时候，显示的是第一次的缓存状态，同时从详情页返回后正常显示缓存数据。\n\n","slug":"解决vue-keepAlive-二次进入页面显示首次缓存问题","published":1,"updated":"2022-11-02T04:24:55.800Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clagmayfu000j6c840gkrf9q7","content":"<p>问题场景：<br>当某个带有筛选条件查询列表的页面需要进行缓存，以便不再需要重复进行选择或者输入筛选条件的时候，我们就可以利用keepAlive来进行缓存，但keepAlive也存在着一些坑，这是需要注意的地方。</p>\n<span id=\"more\"></span>\n<h3 id=\"如何利用keepAlive进行缓存\"><a href=\"#如何利用keepAlive进行缓存\" class=\"headerlink\" title=\"如何利用keepAlive进行缓存\"></a>如何利用keepAlive进行缓存</h3><p>1、在路由meta内定义keepAlive，来设置需要被缓存的页面</p>\n<pre><code class=\"js\">meta: &#123; keepAlive: true &#125;\n</code></pre>\n<p>ture: 需要缓存的路由；false:不需要缓存的路由</p>\n<p>2、判断router-view</p>\n<pre><code class=\"js\">&lt;keep-alive&gt;\n  &lt;router-view v-if=&quot;$route.meta.keepAlive&quot;/&gt;\n&lt;/keep-alive&gt;\n&lt;router-view v-if=&quot;!$route.meta.keepAlive&quot;&gt;&lt;/router-view&gt;\n</code></pre>\n<p>被keep-alive包裹的为需要缓存的页面，这样我们就可以通过keepAlive来切换哪些页面需要缓存，哪些不需要缓存。</p>\n<p>3、进入详情页面缓存，否则不缓存</p>\n<pre><code class=\"js\">beforeRouteLeave (to, from, next) &#123;\n    if (to.path === &#39;/index/page1/detail&#39;) &#123;\n      from.meta.keepAlive = true\n      next()\n    &#125; else &#123;\n      from.meta.keepAlive = false\n      next()\n    &#125;\n  &#125;\n</code></pre>\n<p>路由守卫钩子 beforeRouteLeave 离开页面路由的时候出发；<br>当离开缓存页面，进入详情页面的时候，我们将缓存页面keepAlive设置true，如果离开缓存页面，不是进入详情页面的时候，我们设置为false，不进行缓存。</p>\n<p>这是最基本的缓存设置，但是keepAlive也留下了一个大坑。</p>\n<h2 id=\"keepAlive二次进入页面显示首次缓存问题\"><a href=\"#keepAlive二次进入页面显示首次缓存问题\" class=\"headerlink\" title=\"keepAlive二次进入页面显示首次缓存问题\"></a>keepAlive二次进入页面显示首次缓存问题</h2><p>第一次从缓存页面进入详情页再返回到缓存页面的时候，页面条件能被正确的缓存下来，但是当我们切换到别的路由，再一次进入该缓存页修改查询条件，并进入详情后返回缓存页，此时缓存的是页面状态是第一次进入该页面的时候的状态，也就是说，第二次进入页面的时候，该缓存读取的是第一次的缓存，这就非常的坑了。<br>所以通过下面的刷新缓存路由的方式来解决这个问题。</p>\n<p>1、调整 router-view</p>\n<pre><code class=\"js\">// view\n&lt;keep-alive v-if=&quot;isRouterAlive&quot;&gt;\n  &lt;router-view v-if=&quot;$route.meta.keepAlive&quot;/&gt;\n&lt;/keep-alive&gt;\n&lt;router-view v-if=&quot;!$route.meta.keepAlive&quot;&gt;&lt;/router-view&gt;\n\n// js\ndata () &#123;\n  return &#123;\n    isRouterAlive: true\n  &#125;\n&#125;,\nprovide () &#123; return &#123; reload: this.reload &#125; &#125;,\n\nmethods: &#123;\n  reload () &#123;\n    this.isRouterAlive = false\n    this.$nextTick(() =&gt; (this.isRouterAlive = true))\n  &#125;\n&#125;\n</code></pre>\n<p>定义一个isRouterAlive变量，用来刷新keep-alive;通过provide向下面子孙组件们暴露一个reload方法，用来刷新缓存。</p>\n<p>2、设置缓存</p>\n<pre><code class=\"js\">export default &#123;\n inject: [&#39;reload&#39;],\n data () &#123;\n   return &#123;\n    ....\n   &#125;,\n &#125;,\n beforeRouteEnter (to, from, next) &#123;\n    to.meta.keepAlive = true\n    if (from.path !== &#39;/index/page1/detail&#39;) &#123;\n      next(vm =&gt; &#123;\n        vm.reload()\n      &#125;)\n    &#125; else &#123;\n      next()\n    &#125;\n  &#125;,\n  beforeRouteLeave (to, from, next) &#123;\n    if (to.path === &#39;/index/page1/detail&#39;) &#123;\n      from.meta.keepAlive = true\n      next()\n    &#125; else &#123;\n      from.meta.keepAlive = false\n      next()\n    &#125;\n  &#125;\n&#125;\n</code></pre>\n<p>子组件注册inject: [‘reload’] 方法，beforeRouteEnter钩子在进入缓存页面的时候通过通过判断路由是否是来自详情页面，如果不是详情页，我们就刷新缓存，如果是详情页，就不做处理。<br>这样就解决了，只要是路由进入过别的页面(非详情页面)，我们就刷新缓存，这样就不会出现二次进入的时候，显示的是第一次的缓存状态，同时从详情页返回后正常显示缓存数据。</p>\n","site":{"data":{"friends":[{"category":"技术","data":[{"name":"stackblitz","url":"https://stackblitz.com"},{"name":"serverless-devs","url":"http://www.serverless-devs.com/"},{"name":"cypress自动化测试","url":"https://www.cypress.io/"},{"name":"微前端架构","url":"https://micro-frontends.ice.work/"},{"name":"gin+vue进行极速开发的全栈开发基础平台","url":"https://www.gin-vue-admin.com/"},{"name":"cloudbase","url":"https://docs.cloudbase.net/"},{"name":"supabase","url":"https://supabase.com/"}]},{"category":"工具","data":[{"name":"程序员工具集合大全","url":"https://www.bejson.com/"},{"name":"图片处理","url":"https://imagestool.com/zh_CN/index.html"},{"name":"免费在线抠图","url":"https://picwish.cn/"},{"name":"LOGO海报设计","url":"https://www.canva.cn/"},{"name":"图片无损缩放","url":"http://waifu2x.udp.jp/"},{"name":"图片格式转换器","url":"https://renzhezhilu.github.io/webp2jpg-online/"},{"name":"PDF工具集合","url":"https://tools.pdf24.org/zh/"},{"name":"UI直接生成代码","url":"https://code.fun/"},{"name":"markdown转公众号知乎","url":"https://editor.mdnice.com/"},{"name":"油猴脚本库","url":"https://greasyfork.org/zh-CN"},{"name":"代码片段转图片","url":"https://ray.so/"},{"name":"nginx配置器","url":"https://www.digitalocean.com/community/tools/nginx?global.app.lang=zhCN"},{"name":"前端插件库","url":"https://awesomejs.dev/"},{"name":"独特工具箱啥都有","url":"https://www.dute.org/"},{"name":"url编码解码","url":"http://www.jsons.cn/urlencode"},{"name":"菜鸟工具(正则测试等)","url":"https://c.runoob.com/front-end/854/"},{"name":"JSON编辑器格式化","url":"https://www.jsont.run/"},{"name":"七夜导航各类工具集","url":"https://nav.qinight.com/"},{"name":"生活百科wiki","url":"https://zh.wikihow.com/"},{"name":"表情包搜索网站","url":"https://www.dbbqb.com/"},{"name":"果汁工具大全(生活类)","url":"http://guozhivip.com/tool/"},{"name":"谷歌插件国内下载","url":"https://chrome.zzzmh.cn"},{"name":"PDF/图片/视频/音频/格式转换","url":"https://www.aconvert.com/cn/"},{"name":"JSON转各类代码","url":"https://app.quicktype.io/"},{"name":"markdown笔记","url":"https://yank-note.vercel.app"},{"name":"网页版API接口调试(界面清爽)","url":"https://httpie.io/app"},{"name":"在线开发神器手机网页开发同步","url":"https://replit.com/"},{"name":"在网页上运行安卓app","url":"https://www.wolfia.com/"},{"name":"在线工具开发手机web同步开发","url":"https://replit.com/"},{"name":"在线http接口调试","url":"https://httpie.io/app"}]},{"category":"素材","data":[{"name":"免费壁纸","url":"https://wallpaperhub.app"},{"name":"UI设计库","url":"https://screenlane.com/"},{"name":"摄图网","url":"https://699pic.com/"}]},{"category":"学习","data":[{"name":"面试基础知识","url":"https://micro-frontends.ice.work/"},{"name":"各类语言框架语法大全查询","url":"https://socode.pro/"},{"name":"前端人俱乐部","url":"http://f2er.club/"},{"name":"vue3+ts","url":"https://24kcs.github.io/vue3_study/"}]},{"category":"软件","data":[{"name":"正版软件购买","url":"https://apsgo.com/"}]},{"category":"前端","data":[{"name":"图标库","url":"https://iconoir.com/"},{"name":"前端大全","url":"https://docschina.org/"},{"name":"使用 Vue.js 开发小程序的前端框架","url":"http://mpvue.com/"},{"name":"uviewui","url":"https://www.uviewui.com/"},{"name":"varlet","url":"https://varlet.gitee.io/varlet-ui/#/zh-CN/index"},{"name":"vant","url":"https://vant-contrib.gitee.io/vant/#/zh-CN"},{"name":"tdesign","url":"https://tdesign.tencent.com/"},{"name":"前端开发UI素材","url":"https://www.creative-tim.com/"},{"name":"vue-treeselect","url":"https://www.vue-treeselect.cn/"},{"name":"semi","url":"https://semi.design/zh-CN/"},{"name":"tailwindcss","url":"https://www.tailwindcss.cn/"},{"name":"fontawesome图标","url":"https://fontawesome.com/"},{"name":"vantajs动画","url":"https://www.vantajs.com/"},{"name":"视差效果pushinjs","url":"https://nateplusplus.github.io/pushin/"}]}],"photography":[{"thumbnail":"https://thumbnail.jpg","photo":"https://photo.jpg","title":"This is title.","icon":"camera","place":"China"},{"thumbnail":"https://thumbnail.jpg","photo":"https://photo.jpg","title":"This is title.","icon":"camera","place":"China"}]}},"excerpt":"<p>问题场景：<br>当某个带有筛选条件查询列表的页面需要进行缓存，以便不再需要重复进行选择或者输入筛选条件的时候，我们就可以利用keepAlive来进行缓存，但keepAlive也存在着一些坑，这是需要注意的地方。</p>","more":"<h3 id=\"如何利用keepAlive进行缓存\"><a href=\"#如何利用keepAlive进行缓存\" class=\"headerlink\" title=\"如何利用keepAlive进行缓存\"></a>如何利用keepAlive进行缓存</h3><p>1、在路由meta内定义keepAlive，来设置需要被缓存的页面</p>\n<pre><code class=\"js\">meta: &#123; keepAlive: true &#125;\n</code></pre>\n<p>ture: 需要缓存的路由；false:不需要缓存的路由</p>\n<p>2、判断router-view</p>\n<pre><code class=\"js\">&lt;keep-alive&gt;\n  &lt;router-view v-if=&quot;$route.meta.keepAlive&quot;/&gt;\n&lt;/keep-alive&gt;\n&lt;router-view v-if=&quot;!$route.meta.keepAlive&quot;&gt;&lt;/router-view&gt;\n</code></pre>\n<p>被keep-alive包裹的为需要缓存的页面，这样我们就可以通过keepAlive来切换哪些页面需要缓存，哪些不需要缓存。</p>\n<p>3、进入详情页面缓存，否则不缓存</p>\n<pre><code class=\"js\">beforeRouteLeave (to, from, next) &#123;\n    if (to.path === &#39;/index/page1/detail&#39;) &#123;\n      from.meta.keepAlive = true\n      next()\n    &#125; else &#123;\n      from.meta.keepAlive = false\n      next()\n    &#125;\n  &#125;\n</code></pre>\n<p>路由守卫钩子 beforeRouteLeave 离开页面路由的时候出发；<br>当离开缓存页面，进入详情页面的时候，我们将缓存页面keepAlive设置true，如果离开缓存页面，不是进入详情页面的时候，我们设置为false，不进行缓存。</p>\n<p>这是最基本的缓存设置，但是keepAlive也留下了一个大坑。</p>\n<h2 id=\"keepAlive二次进入页面显示首次缓存问题\"><a href=\"#keepAlive二次进入页面显示首次缓存问题\" class=\"headerlink\" title=\"keepAlive二次进入页面显示首次缓存问题\"></a>keepAlive二次进入页面显示首次缓存问题</h2><p>第一次从缓存页面进入详情页再返回到缓存页面的时候，页面条件能被正确的缓存下来，但是当我们切换到别的路由，再一次进入该缓存页修改查询条件，并进入详情后返回缓存页，此时缓存的是页面状态是第一次进入该页面的时候的状态，也就是说，第二次进入页面的时候，该缓存读取的是第一次的缓存，这就非常的坑了。<br>所以通过下面的刷新缓存路由的方式来解决这个问题。</p>\n<p>1、调整 router-view</p>\n<pre><code class=\"js\">// view\n&lt;keep-alive v-if=&quot;isRouterAlive&quot;&gt;\n  &lt;router-view v-if=&quot;$route.meta.keepAlive&quot;/&gt;\n&lt;/keep-alive&gt;\n&lt;router-view v-if=&quot;!$route.meta.keepAlive&quot;&gt;&lt;/router-view&gt;\n\n// js\ndata () &#123;\n  return &#123;\n    isRouterAlive: true\n  &#125;\n&#125;,\nprovide () &#123; return &#123; reload: this.reload &#125; &#125;,\n\nmethods: &#123;\n  reload () &#123;\n    this.isRouterAlive = false\n    this.$nextTick(() =&gt; (this.isRouterAlive = true))\n  &#125;\n&#125;\n</code></pre>\n<p>定义一个isRouterAlive变量，用来刷新keep-alive;通过provide向下面子孙组件们暴露一个reload方法，用来刷新缓存。</p>\n<p>2、设置缓存</p>\n<pre><code class=\"js\">export default &#123;\n inject: [&#39;reload&#39;],\n data () &#123;\n   return &#123;\n    ....\n   &#125;,\n &#125;,\n beforeRouteEnter (to, from, next) &#123;\n    to.meta.keepAlive = true\n    if (from.path !== &#39;/index/page1/detail&#39;) &#123;\n      next(vm =&gt; &#123;\n        vm.reload()\n      &#125;)\n    &#125; else &#123;\n      next()\n    &#125;\n  &#125;,\n  beforeRouteLeave (to, from, next) &#123;\n    if (to.path === &#39;/index/page1/detail&#39;) &#123;\n      from.meta.keepAlive = true\n      next()\n    &#125; else &#123;\n      from.meta.keepAlive = false\n      next()\n    &#125;\n  &#125;\n&#125;\n</code></pre>\n<p>子组件注册inject: [‘reload’] 方法，beforeRouteEnter钩子在进入缓存页面的时候通过通过判断路由是否是来自详情页面，如果不是详情页，我们就刷新缓存，如果是详情页，就不做处理。<br>这样就解决了，只要是路由进入过别的页面(非详情页面)，我们就刷新缓存，这样就不会出现二次进入的时候，显示的是第一次的缓存状态，同时从详情页返回后正常显示缓存数据。</p>"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}